// define the newgrf
grf {
//	grfid: "\41\4E\02\01";
	grfid: "\4A\44\BB\B1";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESCRIPTION);
	version: 1720;
	min_compatible_version: 1710;
	param 0 {
        param_reset_construction_costs {
            type:    bool;
            name:    string(STR_PARAM_RESET_CONSTRUCTION_COSTS);
            desc:    string(STR_PARAM_RESET_CONSTRUCTION_COSTS_DESC);
            bit: 0;
            def_value: 1;
        }
    }
	param 1 {
        param_adjust_ship_speed {
            type:    int;
            name:    string(STR_PARAM_ADJUST_SHIP_SPEEDS);
            min_value: 0;
            max_value: 2;
            def_value: 1;
            names: {
                0: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_0);
                1: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_1);
                2: string(STR_PARAM_ADJUST_SHIP_SPEEDS_OPTION_2);
            };
        }
    }
	param 2 {
		param_roster {
			name: string(STR_PARAM_ROSTER);
			desc: string(STR_PARAM_ROSTER_DESC);
			min_value: 0;
			max_value: 0;
			names: {
			    
                    0: string(STR_PARAM_ROSTER_OPTION_0);
			    
			};
		}
	}
}


basecost {
 	PR_RUNNING_SHIP: 2;
 	PR_BUILD_VEHICLE_SHIP: 2;
}

if (param_reset_construction_costs) {
    basecost {
 	    PR_BUILD_CANAL: -3;
 	    PR_CLEAR_CANAL: -4;
        PR_BUILD_AQUEDUCT: -2;
        PR_CLEAR_AQUEDUCT: -4;
        PR_BUILD_LOCK: -1;
        PR_CLEAR_LOCK: -2;
    }
}

// sort order
sort(FEAT_SHIPS, [2001, 1010, 2020, 1040, 1030, 1031, 1032, 49, 50, 79, 80, 2030, 2031, 1050, 1060, 2040, 70, 89, 90, 100, 1200, 1210, 2050, 250, 1000, 1001, 150, 1100, 1110, 1120, 1101, 1111, 1125, 1132, 1135, 1180, 1170, 1126, 1440, 1130, 1145, 1150, 1230, 1231, 1220, 1221, 1222, 1240, 1160, 2120, 2125, 2135, 2140, 2110, 1255, 1258, 1245, 1250, 1260, 1265, 1270, 1271, 1275, 1280, 1282, 2248, 2250, 2255, 2251, 2260]);
/*
 * ********************************************
 * Define cargo translation table and refits
 * ********************************************
 */

cargotable {
    
    PASS,
    
    TOUR,
    
    MAIL,
    
    COAL,
    
    IORE,
    
    GRVL,
    
    SAND,
    
    AORE,
    
    CORE,
    
    CLAY,
    
    SCMT,
    
    WOOD,
    
    LIME,
    
    GOOD,
    
    FOOD,
    
    STEL,
    
    FMSP,
    
    ENSP,
    
    BEER,
    
    BDMT,
    
    MNSP,
    
    PAPR,
    
    WDPR,
    
    VEHI,
    
    COPR,
    
    DYES,
    
    OIL_,
    
    RFPR,
    
    PETR,
    
    PLAS,
    
    WATR,
    
    FISH,
    
    CERE,
    
    FICR,
    
    FRVG,
    
    FRUT,
    
    GRAI,
    
    LVST,
    
    MAIZ,
    
    MILK,
    
    RUBR,
    
    SGBT,
    
    SGCN,
    
    WHEA,
    
    WOOL,
    
    OLSD,
    
    SUGR,
    
    BEAN,
    
    NITR,
    
}
disable_item(FEAT_SHIPS, 00, 10);
// -- begin Bundaberg [Tanker] -- 


// graphics
template spriteset_template_bundaberg_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(bundaberg_tanker_ss_not_loaded_not_moving, "src/graphics/bundaberg_tanker_0.png") {
  spriteset_template_bundaberg_tanker(10)
}
spriteset(bundaberg_tanker_ss_not_loaded_moving, "src/graphics/bundaberg_tanker_0.png") {
  spriteset_template_bundaberg_tanker(110)
}
spriteset(bundaberg_tanker_ss_loaded_not_moving, "src/graphics/bundaberg_tanker_0.png") {
  spriteset_template_bundaberg_tanker(210)
}
spriteset(bundaberg_tanker_ss_loaded_moving, "src/graphics/bundaberg_tanker_0.png") {
  spriteset_template_bundaberg_tanker(310)
}

spritegroup bundaberg_tanker_sg_moving {
    loaded:  [
        bundaberg_tanker_ss_not_loaded_moving,
        bundaberg_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        bundaberg_tanker_ss_loaded_moving,
    ];
}

spritegroup bundaberg_tanker_sg_not_moving {
    loaded:  [
        bundaberg_tanker_ss_not_loaded_not_moving,
        bundaberg_tanker_ss_loaded_not_moving,
    ];
    loading: [
        bundaberg_tanker_ss_not_loaded_not_moving,
        bundaberg_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_graphics, current_speed) {
    0: return bundaberg_tanker_sg_not_moving;
    return bundaberg_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_bundaberg_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(bundaberg_tanker_ss_purchase, "src/graphics/bundaberg_tanker_0.png") {
  spriteset_template_purchase_bundaberg_tanker()
}

spritegroup bundaberg_tanker_sg_purchase {
    loaded:  [
        bundaberg_tanker_ss_purchase,
    ];
    loading: [
        bundaberg_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 48;
        1..25 : 47;
        26..50 : 46;
        51..75 : 44;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 69;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 94;
        1..25 : 92;
        26..50 : 90;
        51..75 : 88;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: bundaberg_tanker_switch_speed_varies_with_load_amount_0;
    1: bundaberg_tanker_switch_speed_varies_with_load_amount_1;
    2: bundaberg_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1060;
}
switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    bundaberg_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, bundaberg_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1060;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, bundaberg_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 16, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, bundaberg_tanker, 1258) {
    property {
        name:                           string(STR_NAME_bundaberg_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1914,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1060;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    78;
        running_cost_factor:            174;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          bundaberg_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 bundaberg_tanker_switch_purchase_speed;
        cargo_capacity:                 bundaberg_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        bundaberg_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             bundaberg_tanker_switch_cargo_subtype_text;
        default:                        bundaberg_tanker_switch_graphics;
        purchase:                       bundaberg_tanker_sg_purchase;
        create_effect:                  bundaberg_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, bundaberg_tanker, 1258) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Bundaberg [Tanker] -- 


// -- begin Saint Marie [Barge Tug] -- 


// graphics
template spriteset_template_saint_marie_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -80, -24, ANIM]
    [186,       y,          138,        48,          -66, -21, ANIM]
    [328,       y,          113,        71,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -78, -26, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        71,          -32, -23, ANIM]
}


    spriteset(saint_marie_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(10)
    }
    spriteset(saint_marie_freight_barge_ss_not_loaded_moving_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(110)
    }
    spriteset(saint_marie_freight_barge_ss_loading_0_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(210)
    }
    spriteset(saint_marie_freight_barge_ss_loading_1_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(310)
    }
    spriteset(saint_marie_freight_barge_ss_loading_2_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(410)
    }
    spriteset(saint_marie_freight_barge_ss_loading_3_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(510)
    }
    spriteset(saint_marie_freight_barge_ss_loaded_not_moving_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(610)
    }
    spriteset(saint_marie_freight_barge_ss_loaded_moving_0, "src/graphics/saint_marie_freight_barge_0.png") {
      spriteset_template_saint_marie_freight_barge(710)
    }

    spritegroup saint_marie_freight_barge_sg_moving_0 {
        loaded:  [
            saint_marie_freight_barge_ss_not_loaded_moving_0,
            saint_marie_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            saint_marie_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup saint_marie_freight_barge_sg_not_moving_0 {
        loaded:  [
            saint_marie_freight_barge_ss_not_loaded_not_moving_0,
            saint_marie_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            saint_marie_freight_barge_ss_loading_0_0,
            saint_marie_freight_barge_ss_loading_1_0,
            saint_marie_freight_barge_ss_loading_2_0,
            saint_marie_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_graphics_0, current_speed) {
        0: return saint_marie_freight_barge_sg_not_moving_0;
        return saint_marie_freight_barge_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_graphics_random_0) {
        
            1: return saint_marie_freight_barge_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_graphics, build_year) {
    
        0..5000000:saint_marie_freight_barge_switch_graphics_random_0;
    
    return saint_marie_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_saint_marie_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [652, 28, 87, 22, -43, -10, ANIM]
}

spriteset(saint_marie_freight_barge_ss_purchase, "src/graphics/saint_marie_freight_barge_0.png") {
  spriteset_template_purchase_saint_marie_freight_barge()
}

spritegroup saint_marie_freight_barge_sg_purchase {
    loaded:  [
        saint_marie_freight_barge_ss_purchase,
    ];
    loading: [
        saint_marie_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 38;
        1..25 : 37;
        26..50 : 37;
        51..75 : 36;
        76..100 : 35;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 57;
        1..25 : 56;
        26..50 : 54;
        51..75 : 53;
        76..100 : 52;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 75;
        1..25 : 74;
        26..50 : 72;
        51..75 : 70;
        76..100 : 69;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: saint_marie_freight_barge_switch_speed_varies_with_load_amount_0;
    1: saint_marie_freight_barge_switch_speed_varies_with_load_amount_1;
    2: saint_marie_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 35;
    1: 52;
    2: 69;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 200;
}
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    saint_marie_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 200;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, saint_marie_freight_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, -7, 0, 16), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, saint_marie_freight_barge, 2110) {
    property {
        name:                           string(STR_NAME_saint_marie_freight_barge, string(STR_NAME_SUFFIX_BARGE_TUG));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 200;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          16.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    15;
        running_cost_factor:            40;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   51; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   55;
    }
    graphics {
        speed:                          saint_marie_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 saint_marie_freight_barge_switch_purchase_speed;
        cargo_capacity:                 saint_marie_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        saint_marie_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             saint_marie_freight_barge_switch_cargo_subtype_text;
        default:                        saint_marie_freight_barge_switch_graphics;
        purchase:                       saint_marie_freight_barge_sg_purchase;
        create_effect:                  saint_marie_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, saint_marie_freight_barge, 2110) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Saint Marie [Barge Tug] -- 


// -- begin Lorraine Edibles [Tanker] -- 


// graphics
template spriteset_template_lorraine_edibles_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(lorraine_edibles_tanker_ss_not_loaded_not_moving, "src/graphics/lorraine_edibles_tanker_0.png") {
  spriteset_template_lorraine_edibles_tanker(10)
}
spriteset(lorraine_edibles_tanker_ss_not_loaded_moving, "src/graphics/lorraine_edibles_tanker_0.png") {
  spriteset_template_lorraine_edibles_tanker(110)
}
spriteset(lorraine_edibles_tanker_ss_loaded_not_moving, "src/graphics/lorraine_edibles_tanker_0.png") {
  spriteset_template_lorraine_edibles_tanker(210)
}
spriteset(lorraine_edibles_tanker_ss_loaded_moving, "src/graphics/lorraine_edibles_tanker_0.png") {
  spriteset_template_lorraine_edibles_tanker(310)
}

spritegroup lorraine_edibles_tanker_sg_moving {
    loaded:  [
        lorraine_edibles_tanker_ss_not_loaded_moving,
        lorraine_edibles_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        lorraine_edibles_tanker_ss_loaded_moving,
    ];
}

spritegroup lorraine_edibles_tanker_sg_not_moving {
    loaded:  [
        lorraine_edibles_tanker_ss_not_loaded_not_moving,
        lorraine_edibles_tanker_ss_loaded_not_moving,
    ];
    loading: [
        lorraine_edibles_tanker_ss_not_loaded_not_moving,
        lorraine_edibles_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_graphics, current_speed) {
    0: return lorraine_edibles_tanker_sg_not_moving;
    return lorraine_edibles_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_lorraine_edibles_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 130, 22, -65, -10]
}

spriteset(lorraine_edibles_tanker_ss_purchase, "src/graphics/lorraine_edibles_tanker_0.png") {
  spriteset_template_purchase_lorraine_edibles_tanker()
}

spritegroup lorraine_edibles_tanker_sg_purchase {
    loaded:  [
        lorraine_edibles_tanker_ss_purchase,
    ];
    loading: [
        lorraine_edibles_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: lorraine_edibles_tanker_switch_speed_varies_with_load_amount_0;
    1: lorraine_edibles_tanker_switch_speed_varies_with_load_amount_1;
    2: lorraine_edibles_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 860;
}
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    lorraine_edibles_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 860;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, lorraine_edibles_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, lorraine_edibles_tanker, 1282) {
    property {
        name:                           string(STR_NAME_lorraine_edibles_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1976,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 860;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    83;
        running_cost_factor:            166;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [RFPR,OIL_,FMSP,PETR];
        default_cargo_type:             WATR;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          lorraine_edibles_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 lorraine_edibles_tanker_switch_purchase_speed;
        cargo_capacity:                 lorraine_edibles_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        lorraine_edibles_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             lorraine_edibles_tanker_switch_cargo_subtype_text;
        default:                        lorraine_edibles_tanker_switch_graphics;
        purchase:                       lorraine_edibles_tanker_sg_purchase;
        create_effect:                  lorraine_edibles_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, lorraine_edibles_tanker, 1282) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Lorraine Edibles [Tanker] -- 




// -- begin Port Jackson [Catamaran] -- 


// graphics

    template spriteset_template_port_jackson_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -54, ANIM]
        [60,        y,          113,        66,          -57, -26, ANIM]
        [186,       y,          138,        48,          -35, -29, ANIM]
        [328,       y,          113,        66,          -19, -32, ANIM]
        [454,       y,          28,   89,          -14, -54, ANIM]
        [494,       y,          113,        66,          -58, -32, ANIM]
        [620,       y,          138,        48,          -42, -29, ANIM]
        [762,       y,          113,        66,          -1, -26, ANIM]
    }



    spriteset(port_jackson_ferry_ss_not_loaded_not_moving_0, "src/graphics/port_jackson_ferry_0.png") {
      spriteset_template_port_jackson_ferry(10)
    }
    spriteset(port_jackson_ferry_ss_not_loaded_moving_0, "src/graphics/port_jackson_ferry_0.png") {
      spriteset_template_port_jackson_ferry(110)
    }
    spriteset(port_jackson_ferry_ss_loaded_not_moving_0, "src/graphics/port_jackson_ferry_0.png") {
      spriteset_template_port_jackson_ferry(510)
    }
    spriteset(port_jackson_ferry_ss_loaded_moving_0, "src/graphics/port_jackson_ferry_0.png") {
      spriteset_template_port_jackson_ferry(610)
    }

    spritegroup port_jackson_ferry_sg_moving_0 {
        loaded:  [
            port_jackson_ferry_ss_not_loaded_moving_0,
            port_jackson_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            port_jackson_ferry_ss_not_loaded_moving_0,
            port_jackson_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup port_jackson_ferry_sg_not_moving_0 {
        loaded:  [
            port_jackson_ferry_ss_not_loaded_not_moving_0,
            port_jackson_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            port_jackson_ferry_ss_not_loaded_not_moving_0,
            port_jackson_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_graphics_0, current_speed) {
        0: return port_jackson_ferry_sg_not_moving_0;
        return port_jackson_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_graphics_random_0) {
        
            1: return port_jackson_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_graphics, build_year) {
    
        0..5000000:port_jackson_ferry_switch_graphics_random_0;
    
    return port_jackson_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_port_jackson_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [624, 28, 58, 22, -29, -10, ANIM]
}

spriteset(port_jackson_ferry_ss_purchase, "src/graphics/port_jackson_ferry_0.png") {
  spriteset_template_purchase_port_jackson_ferry()
}

spritegroup port_jackson_ferry_sg_purchase {
    loaded:  [
        port_jackson_ferry_ss_purchase,
    ];
    loading: [
        port_jackson_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 145;
        1..25 : 145;
        26..50 : 145;
        51..75 : 145;
        76..100 : 145;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 192;
        1..25 : 192;
        26..50 : 192;
        51..75 : 192;
        76..100 : 192;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: port_jackson_ferry_switch_speed_varies_with_load_amount_0;
    1: port_jackson_ferry_switch_speed_varies_with_load_amount_1;
    2: port_jackson_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 97;
    1: 145;
    2: 192;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 120;
    bitmask(CC_MAIL): return 120;
    return 60;
}
switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    port_jackson_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, port_jackson_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 120;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, port_jackson_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, port_jackson_ferry, 89) {
    property {
        name:                           string(STR_NAME_port_jackson_ferry, string(STR_NAME_SUFFIX_CATAMARAN));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1988,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 120;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          45.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    32;
        running_cost_factor:            81;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          port_jackson_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 port_jackson_ferry_switch_purchase_speed;
        cargo_capacity:                 port_jackson_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        port_jackson_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CATAMARAN_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,120,60));
        cargo_subtype_text:             port_jackson_ferry_switch_cargo_subtype_text;
        default:                        port_jackson_ferry_switch_graphics;
        purchase:                       port_jackson_ferry_sg_purchase;
        create_effect:                  port_jackson_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, port_jackson_ferry, 89) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Port Jackson [Catamaran] -- 




// -- begin Labrador [Utility Vessel] -- 


// graphics

    template spriteset_template_labrador_utility_vessel(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(labrador_utility_vessel_ss_not_loaded_not_moving_0, "src/graphics/labrador_utility_vessel_0.png") {
      spriteset_template_labrador_utility_vessel(10)
    }
    spriteset(labrador_utility_vessel_ss_not_loaded_moving_0, "src/graphics/labrador_utility_vessel_0.png") {
      spriteset_template_labrador_utility_vessel(110)
    }
    spriteset(labrador_utility_vessel_ss_loaded_not_moving_0, "src/graphics/labrador_utility_vessel_0.png") {
      spriteset_template_labrador_utility_vessel(510)
    }
    spriteset(labrador_utility_vessel_ss_loaded_moving_0, "src/graphics/labrador_utility_vessel_0.png") {
      spriteset_template_labrador_utility_vessel(610)
    }

    spritegroup labrador_utility_vessel_sg_moving_0 {
        loaded:  [
            labrador_utility_vessel_ss_not_loaded_moving_0,
            labrador_utility_vessel_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            labrador_utility_vessel_ss_not_loaded_moving_0,
            labrador_utility_vessel_ss_loaded_moving_0,
        ];
    }

    spritegroup labrador_utility_vessel_sg_not_moving_0 {
        loaded:  [
            labrador_utility_vessel_ss_not_loaded_not_moving_0,
            labrador_utility_vessel_ss_loaded_not_moving_0,
        ];
        loading: [
            labrador_utility_vessel_ss_not_loaded_not_moving_0,
            labrador_utility_vessel_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_graphics_0, current_speed) {
        0: return labrador_utility_vessel_sg_not_moving_0;
        return labrador_utility_vessel_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_graphics_random_0) {
        
            1: return labrador_utility_vessel_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_graphics, build_year) {
    
        0..5000000:labrador_utility_vessel_switch_graphics_random_0;
    
    return labrador_utility_vessel_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_labrador_utility_vessel() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [673, 23, 29, 22, -14, -10, ANIM]
}

spriteset(labrador_utility_vessel_ss_purchase, "src/graphics/labrador_utility_vessel_0.png") {
  spriteset_template_purchase_labrador_utility_vessel()
}

spritegroup labrador_utility_vessel_sg_purchase {
    loaded:  [
        labrador_utility_vessel_ss_purchase,
    ];
    loading: [
        labrador_utility_vessel_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 57;
        1..25 : 55;
        26..50 : 54;
        51..75 : 52;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 82;
        26..50 : 80;
        51..75 : 77;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 113;
        1..25 : 109;
        26..50 : 106;
        51..75 : 102;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: labrador_utility_vessel_switch_speed_varies_with_load_amount_0;
    1: labrador_utility_vessel_switch_speed_varies_with_load_amount_1;
    2: labrador_utility_vessel_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 32;
    bitmask(CC_MAIL): return 36;
    return 24;
}
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_cargo_capacity, cargo_type_in_veh) {
    
    labrador_utility_vessel_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 32;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, labrador_utility_vessel_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 8), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, labrador_utility_vessel, 1001) {
    property {
        name:                           string(STR_NAME_labrador_utility_vessel, string(STR_NAME_SUFFIX_UTILITY_VESSEL));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_DIESEL;
        introduction_date:              date(1929,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 32;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    5;
        running_cost_factor:            15;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_PASSENGERS,CC_EXPRESS,CC_ARMOURED,CC_MAIL,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          labrador_utility_vessel_switch_speed_varies_with_load_amount;
        purchase_speed:                 labrador_utility_vessel_switch_purchase_speed;
        cargo_capacity:                 labrador_utility_vessel_switch_cargo_capacity;
        purchase_cargo_capacity:        labrador_utility_vessel_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_GENERAL_PURPOSE_VESSEL), string(STR_BUY_MENU_REFIT_CAPACITIES_UTILITY,36,24));
        cargo_subtype_text:             labrador_utility_vessel_switch_cargo_subtype_text;
        default:                        labrador_utility_vessel_switch_graphics;
        purchase:                       labrador_utility_vessel_sg_purchase;
        create_effect:                  labrador_utility_vessel_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, labrador_utility_vessel, 1001) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Labrador [Utility Vessel] -- 


// -- begin Finisterre [Freighter] -- 


// graphics
template spriteset_template_finisterre_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -15, -38, ANIM]
    [60,        y,          113,        71,          -79, -21, ANIM]
    [186,       y,          138,        48,          -66, -25, ANIM]
    [328,       y,          113,        71,          -38, -22, ANIM]
    [454,       y,          28,         89,          -14, -36, ANIM]
    [494,       y,          113,        71,          -78, -22, ANIM]
    [620,       y,          138,        48,          -68, -25, ANIM]
    [762,       y,          113,        71,          -38, -20, ANIM]
}


    spriteset(finisterre_freighter_ss_not_loaded_not_moving_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(10)
    }
    spriteset(finisterre_freighter_ss_not_loaded_moving_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(110)
    }
    spriteset(finisterre_freighter_ss_loading_0_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(210)
    }
    spriteset(finisterre_freighter_ss_loading_1_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(310)
    }
    spriteset(finisterre_freighter_ss_loading_2_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(410)
    }
    spriteset(finisterre_freighter_ss_loading_3_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(510)
    }
    spriteset(finisterre_freighter_ss_loaded_not_moving_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(610)
    }
    spriteset(finisterre_freighter_ss_loaded_moving_0, "src/graphics/finisterre_freighter_0.png") {
      spriteset_template_finisterre_freighter(710)
    }

    spritegroup finisterre_freighter_sg_moving_0 {
        loaded:  [
            finisterre_freighter_ss_not_loaded_moving_0,
            finisterre_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            finisterre_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup finisterre_freighter_sg_not_moving_0 {
        loaded:  [
            finisterre_freighter_ss_not_loaded_not_moving_0,
            finisterre_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            finisterre_freighter_ss_loading_0_0,
            finisterre_freighter_ss_loading_1_0,
            finisterre_freighter_ss_loading_2_0,
            finisterre_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_graphics_0, current_speed) {
        0: return finisterre_freighter_sg_not_moving_0;
        return finisterre_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_graphics_random_0) {
        
            1: return finisterre_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_graphics, build_year) {
    
        0..5000000:finisterre_freighter_switch_graphics_random_0;
    
    return finisterre_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_finisterre_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [646, 25, 94, 22, -47, -10, ANIM]
}

spriteset(finisterre_freighter_ss_purchase, "src/graphics/finisterre_freighter_0.png") {
  spriteset_template_purchase_finisterre_freighter()
}

spritegroup finisterre_freighter_sg_purchase {
    loaded:  [
        finisterre_freighter_ss_purchase,
    ];
    loading: [
        finisterre_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: finisterre_freighter_switch_speed_varies_with_load_amount_0;
    1: finisterre_freighter_switch_speed_varies_with_load_amount_1;
    2: finisterre_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 280;
}
switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    finisterre_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, finisterre_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 280;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, finisterre_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 8, 0, 24), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, finisterre_freighter, 1110) {
    property {
        name:                           string(STR_NAME_finisterre_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 280;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    26;
        running_cost_factor:            46;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          finisterre_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 finisterre_freighter_switch_purchase_speed;
        cargo_capacity:                 finisterre_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        finisterre_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             finisterre_freighter_switch_cargo_subtype_text;
        default:                        finisterre_freighter_switch_graphics;
        purchase:                       finisterre_freighter_sg_purchase;
        create_effect:                  finisterre_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, finisterre_freighter, 1110) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Finisterre [Freighter] -- 




// -- begin Lantau [Ferry] -- 


// graphics

    template spriteset_template_lantau_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(lantau_ferry_ss_not_loaded_not_moving_0, "src/graphics/lantau_ferry_0.png") {
      spriteset_template_lantau_ferry(10)
    }
    spriteset(lantau_ferry_ss_not_loaded_moving_0, "src/graphics/lantau_ferry_0.png") {
      spriteset_template_lantau_ferry(110)
    }
    spriteset(lantau_ferry_ss_loaded_not_moving_0, "src/graphics/lantau_ferry_0.png") {
      spriteset_template_lantau_ferry(510)
    }
    spriteset(lantau_ferry_ss_loaded_moving_0, "src/graphics/lantau_ferry_0.png") {
      spriteset_template_lantau_ferry(610)
    }

    spritegroup lantau_ferry_sg_moving_0 {
        loaded:  [
            lantau_ferry_ss_not_loaded_moving_0,
            lantau_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            lantau_ferry_ss_not_loaded_moving_0,
            lantau_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup lantau_ferry_sg_not_moving_0 {
        loaded:  [
            lantau_ferry_ss_not_loaded_not_moving_0,
            lantau_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            lantau_ferry_ss_not_loaded_not_moving_0,
            lantau_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, lantau_ferry_switch_graphics_0, current_speed) {
        0: return lantau_ferry_sg_not_moving_0;
        return lantau_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, lantau_ferry_switch_graphics_random_0) {
        
            1: return lantau_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, lantau_ferry_switch_graphics, build_year) {
    
        0..5000000:lantau_ferry_switch_graphics_random_0;
    
    return lantau_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_lantau_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [673, 23, 29, 22, -14, -10, ANIM]
}

spriteset(lantau_ferry_ss_purchase, "src/graphics/lantau_ferry_0.png") {
  spriteset_template_purchase_lantau_ferry()
}

spritegroup lantau_ferry_sg_purchase {
    loaded:  [
        lantau_ferry_ss_purchase,
    ];
    loading: [
        lantau_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, lantau_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 48;
        26..50 : 47;
        51..75 : 45;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lantau_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 72;
        26..50 : 69;
        51..75 : 67;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lantau_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 98;
        1..25 : 95;
        26..50 : 92;
        51..75 : 89;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, lantau_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: lantau_ferry_switch_speed_varies_with_load_amount_0;
    1: lantau_ferry_switch_speed_varies_with_load_amount_1;
    2: lantau_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, lantau_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, lantau_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 54;
    bitmask(CC_MAIL): return 54;
    return 27;
}
switch (FEAT_SHIPS, SELF, lantau_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    lantau_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, lantau_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, lantau_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 54;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, lantau_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, lantau_ferry, 2001) {
    property {
        name:                           string(STR_NAME_lantau_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 54;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    2;
        running_cost_factor:            10;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          lantau_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 lantau_ferry_switch_purchase_speed;
        cargo_capacity:                 lantau_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        lantau_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,54,27));
        cargo_subtype_text:             lantau_ferry_switch_cargo_subtype_text;
        default:                        lantau_ferry_switch_graphics;
        purchase:                       lantau_ferry_sg_purchase;
        create_effect:                  lantau_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, lantau_ferry, 2001) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Lantau [Ferry] -- 




// -- begin McClure [Livestock Ship] -- 


// graphics

    template spriteset_template_mcclure_livestock_ship(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -42, ANIM]
        [60,        y,          113,        66,          -82, -19, ANIM]
        [186,       y,          138,        48,          -66, -29, ANIM]
        [328,       y,          113,        66,          -28, -19, ANIM]
        [454,       y,          28,   89,          -14, -42, ANIM]
        [494,       y,          113,        66,          -80, -20, ANIM]
        [620,       y,          138,        48,          -66, -29, ANIM]
        [762,       y,          113,        66,          -26, -18, ANIM]
    }



    spriteset(mcclure_livestock_ship_ss_not_loaded_not_moving_0, "src/graphics/mcclure_livestock_ship_0.png") {
      spriteset_template_mcclure_livestock_ship(10)
    }
    spriteset(mcclure_livestock_ship_ss_not_loaded_moving_0, "src/graphics/mcclure_livestock_ship_0.png") {
      spriteset_template_mcclure_livestock_ship(110)
    }
    spriteset(mcclure_livestock_ship_ss_loaded_not_moving_0, "src/graphics/mcclure_livestock_ship_0.png") {
      spriteset_template_mcclure_livestock_ship(510)
    }
    spriteset(mcclure_livestock_ship_ss_loaded_moving_0, "src/graphics/mcclure_livestock_ship_0.png") {
      spriteset_template_mcclure_livestock_ship(610)
    }

    spritegroup mcclure_livestock_ship_sg_moving_0 {
        loaded:  [
            mcclure_livestock_ship_ss_not_loaded_moving_0,
            mcclure_livestock_ship_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            mcclure_livestock_ship_ss_not_loaded_moving_0,
            mcclure_livestock_ship_ss_loaded_moving_0,
        ];
    }

    spritegroup mcclure_livestock_ship_sg_not_moving_0 {
        loaded:  [
            mcclure_livestock_ship_ss_not_loaded_not_moving_0,
            mcclure_livestock_ship_ss_loaded_not_moving_0,
        ];
        loading: [
            mcclure_livestock_ship_ss_not_loaded_not_moving_0,
            mcclure_livestock_ship_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_graphics_0, current_speed) {
        0: return mcclure_livestock_ship_sg_not_moving_0;
        return mcclure_livestock_ship_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_graphics_random_0) {
        
            1: return mcclure_livestock_ship_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_graphics, build_year) {
    
        0..5000000:mcclure_livestock_ship_switch_graphics_random_0;
    
    return mcclure_livestock_ship_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_mcclure_livestock_ship() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [640, 28, 96, 22, -48, -10, ANIM]
}

spriteset(mcclure_livestock_ship_ss_purchase, "src/graphics/mcclure_livestock_ship_0.png") {
  spriteset_template_purchase_mcclure_livestock_ship()
}

spritegroup mcclure_livestock_ship_sg_purchase {
    loaded:  [
        mcclure_livestock_ship_ss_purchase,
    ];
    loading: [
        mcclure_livestock_ship_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: mcclure_livestock_ship_switch_speed_varies_with_load_amount_0;
    1: mcclure_livestock_ship_switch_speed_varies_with_load_amount_1;
    2: mcclure_livestock_ship_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_cargo_capacity, cargo_subtype) {
    0: return 200;
    1: return 400;
    2: return 800;
    return 200;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 200, string(STR_UNIT_ITEMS));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 400, string(STR_UNIT_ITEMS));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 800, string(STR_UNIT_ITEMS));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 200;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, mcclure_livestock_ship_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, -2, 0, 28), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, mcclure_livestock_ship, 1230) {
    property {
        name:                           string(STR_NAME_mcclure_livestock_ship, string(STR_NAME_SUFFIX_LIVESTOCK_SHIP));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1937,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 200;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.65;
        cost_factor:                    58;
        running_cost_factor:            117;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [LVST];
        cargo_disallow_refit:           [];
        default_cargo_type:             LVST;
        loading_speed:                  20;
        cargo_age_period:               1480;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          mcclure_livestock_ship_switch_speed_varies_with_load_amount;
        purchase_speed:                 mcclure_livestock_ship_switch_purchase_speed;
        cargo_capacity:                 mcclure_livestock_ship_switch_cargo_capacity;
        purchase_cargo_capacity:        mcclure_livestock_ship_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LIVESTOCK_SHIP), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,200,400,800,string(STR_QUANTITY_LIVESTOCK)));
        cargo_subtype_text:             mcclure_livestock_ship_switch_cargo_subtype_text;
        default:                        mcclure_livestock_ship_switch_graphics;
        purchase:                       mcclure_livestock_ship_sg_purchase;
        create_effect:                  mcclure_livestock_ship_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, mcclure_livestock_ship, 1230) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end McClure [Livestock Ship] -- 


// -- begin Eddystone [Tanker] -- 


// graphics
template spriteset_template_eddystone_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        66,          -78, -21, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        66,          -30, -21, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        66,          -78, -24, ANIM]
    [620,       y,          138,        48,          -68, -21, ANIM]
    [762,       y,          113,        66,          -32, -21, ANIM]
}

spriteset(eddystone_tanker_ss_not_loaded_not_moving, "src/graphics/eddystone_tanker_0.png") {
  spriteset_template_eddystone_tanker(10)
}
spriteset(eddystone_tanker_ss_not_loaded_moving, "src/graphics/eddystone_tanker_0.png") {
  spriteset_template_eddystone_tanker(110)
}
spriteset(eddystone_tanker_ss_loaded_not_moving, "src/graphics/eddystone_tanker_0.png") {
  spriteset_template_eddystone_tanker(210)
}
spriteset(eddystone_tanker_ss_loaded_moving, "src/graphics/eddystone_tanker_0.png") {
  spriteset_template_eddystone_tanker(310)
}

spritegroup eddystone_tanker_sg_moving {
    loaded:  [
        eddystone_tanker_ss_not_loaded_moving,
        eddystone_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        eddystone_tanker_ss_loaded_moving,
    ];
}

spritegroup eddystone_tanker_sg_not_moving {
    loaded:  [
        eddystone_tanker_ss_not_loaded_not_moving,
        eddystone_tanker_ss_loaded_not_moving,
    ];
    loading: [
        eddystone_tanker_ss_not_loaded_not_moving,
        eddystone_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_graphics, current_speed) {
    0: return eddystone_tanker_sg_not_moving;
    return eddystone_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_eddystone_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [663, 21, 51, 22, -25, -10]
}

spriteset(eddystone_tanker_ss_purchase, "src/graphics/eddystone_tanker_0.png") {
  spriteset_template_purchase_eddystone_tanker()
}

spritegroup eddystone_tanker_sg_purchase {
    loaded:  [
        eddystone_tanker_ss_purchase,
    ];
    loading: [
        eddystone_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: eddystone_tanker_switch_speed_varies_with_load_amount_0;
    1: eddystone_tanker_switch_speed_varies_with_load_amount_1;
    2: eddystone_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 110;
}
switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    eddystone_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, eddystone_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 110;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, eddystone_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, eddystone_tanker, 1245) {
    property {
        name:                           string(STR_NAME_eddystone_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1940,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 110;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    12;
        running_cost_factor:            34;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          eddystone_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 eddystone_tanker_switch_purchase_speed;
        cargo_capacity:                 eddystone_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        eddystone_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_COASTAL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             eddystone_tanker_switch_cargo_subtype_text;
        default:                        eddystone_tanker_switch_graphics;
        purchase:                       eddystone_tanker_sg_purchase;
        create_effect:                  eddystone_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, eddystone_tanker, 1245) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Eddystone [Tanker] -- 


// -- begin Marstein [Freighter] -- 


// graphics
template spriteset_template_marstein_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -80, -24, ANIM]
    [186,       y,          138,        48,          -66, -21, ANIM]
    [328,       y,          113,        71,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -78, -26, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        71,          -32, -23, ANIM]
}


    spriteset(marstein_freighter_ss_not_loaded_not_moving_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(10)
    }
    spriteset(marstein_freighter_ss_not_loaded_moving_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(110)
    }
    spriteset(marstein_freighter_ss_loading_0_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(210)
    }
    spriteset(marstein_freighter_ss_loading_1_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(310)
    }
    spriteset(marstein_freighter_ss_loading_2_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(410)
    }
    spriteset(marstein_freighter_ss_loading_3_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(510)
    }
    spriteset(marstein_freighter_ss_loaded_not_moving_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(610)
    }
    spriteset(marstein_freighter_ss_loaded_moving_0, "src/graphics/marstein_freighter_0.png") {
      spriteset_template_marstein_freighter(710)
    }

    spritegroup marstein_freighter_sg_moving_0 {
        loaded:  [
            marstein_freighter_ss_not_loaded_moving_0,
            marstein_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            marstein_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup marstein_freighter_sg_not_moving_0 {
        loaded:  [
            marstein_freighter_ss_not_loaded_not_moving_0,
            marstein_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            marstein_freighter_ss_loading_0_0,
            marstein_freighter_ss_loading_1_0,
            marstein_freighter_ss_loading_2_0,
            marstein_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, marstein_freighter_switch_graphics_0, current_speed) {
        0: return marstein_freighter_sg_not_moving_0;
        return marstein_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, marstein_freighter_switch_graphics_random_0) {
        
            1: return marstein_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, marstein_freighter_switch_graphics, build_year) {
    
        0..5000000:marstein_freighter_switch_graphics_random_0;
    
    return marstein_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_marstein_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10, ANIM]
}

spriteset(marstein_freighter_ss_purchase, "src/graphics/marstein_freighter_0.png") {
  spriteset_template_purchase_marstein_freighter()
}

spritegroup marstein_freighter_sg_purchase {
    loaded:  [
        marstein_freighter_ss_purchase,
    ];
    loading: [
        marstein_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, marstein_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, marstein_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, marstein_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, marstein_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: marstein_freighter_switch_speed_varies_with_load_amount_0;
    1: marstein_freighter_switch_speed_varies_with_load_amount_1;
    2: marstein_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, marstein_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, marstein_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 270;
}
switch (FEAT_SHIPS, SELF, marstein_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    marstein_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, marstein_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, marstein_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 270;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, marstein_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 8, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, marstein_freighter, 1170) {
    property {
        name:                           string(STR_NAME_marstein_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1949,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 270;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    22;
        running_cost_factor:            50;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          marstein_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 marstein_freighter_switch_purchase_speed;
        cargo_capacity:                 marstein_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        marstein_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FREIGHTER), string(STR_EMPTY));
        cargo_subtype_text:             marstein_freighter_switch_cargo_subtype_text;
        default:                        marstein_freighter_switch_graphics;
        purchase:                       marstein_freighter_sg_purchase;
        create_effect:                  marstein_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, marstein_freighter, 1170) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Marstein [Freighter] -- 


// -- begin Volgoneft 270 [Tanker Barge] -- 


// graphics
template spriteset_template_volgoneft_two_seventy_tanker_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        66,          -84, -25, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        66,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        66,          -83, -24, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        66,          -32, -23, ANIM]
}

spriteset(volgoneft_two_seventy_tanker_barge_ss_not_loaded_not_moving, "src/graphics/volgoneft_two_seventy_tanker_barge_0.png") {
  spriteset_template_volgoneft_two_seventy_tanker_barge(10)
}
spriteset(volgoneft_two_seventy_tanker_barge_ss_not_loaded_moving, "src/graphics/volgoneft_two_seventy_tanker_barge_0.png") {
  spriteset_template_volgoneft_two_seventy_tanker_barge(110)
}
spriteset(volgoneft_two_seventy_tanker_barge_ss_loaded_not_moving, "src/graphics/volgoneft_two_seventy_tanker_barge_0.png") {
  spriteset_template_volgoneft_two_seventy_tanker_barge(210)
}
spriteset(volgoneft_two_seventy_tanker_barge_ss_loaded_moving, "src/graphics/volgoneft_two_seventy_tanker_barge_0.png") {
  spriteset_template_volgoneft_two_seventy_tanker_barge(310)
}

spritegroup volgoneft_two_seventy_tanker_barge_sg_moving {
    loaded:  [
        volgoneft_two_seventy_tanker_barge_ss_not_loaded_moving,
        volgoneft_two_seventy_tanker_barge_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        volgoneft_two_seventy_tanker_barge_ss_loaded_moving,
    ];
}

spritegroup volgoneft_two_seventy_tanker_barge_sg_not_moving {
    loaded:  [
        volgoneft_two_seventy_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_two_seventy_tanker_barge_ss_loaded_not_moving,
    ];
    loading: [
        volgoneft_two_seventy_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_two_seventy_tanker_barge_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_graphics, current_speed) {
    0: return volgoneft_two_seventy_tanker_barge_sg_not_moving;
    return volgoneft_two_seventy_tanker_barge_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_volgoneft_two_seventy_tanker_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10]
}

spriteset(volgoneft_two_seventy_tanker_barge_ss_purchase, "src/graphics/volgoneft_two_seventy_tanker_barge_0.png") {
  spriteset_template_purchase_volgoneft_two_seventy_tanker_barge()
}

spritegroup volgoneft_two_seventy_tanker_barge_sg_purchase {
    loaded:  [
        volgoneft_two_seventy_tanker_barge_ss_purchase,
    ];
    loading: [
        volgoneft_two_seventy_tanker_barge_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_0;
    1: volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_1;
    2: volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 270;
}
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    volgoneft_two_seventy_tanker_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 270;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, volgoneft_two_seventy_tanker_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 6, 0, 13), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, volgoneft_two_seventy_tanker_barge, 2250) {
    property {
        name:                           string(STR_NAME_volgoneft_two_seventy_tanker_barge, string(STR_NAME_SUFFIX_TANKER_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1870,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 270;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    21;
        running_cost_factor:            50;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          volgoneft_two_seventy_tanker_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 volgoneft_two_seventy_tanker_barge_switch_purchase_speed;
        cargo_capacity:                 volgoneft_two_seventy_tanker_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        volgoneft_two_seventy_tanker_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             volgoneft_two_seventy_tanker_barge_switch_cargo_subtype_text;
        default:                        volgoneft_two_seventy_tanker_barge_switch_graphics;
        purchase:                       volgoneft_two_seventy_tanker_barge_sg_purchase;
        create_effect:                  volgoneft_two_seventy_tanker_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, volgoneft_two_seventy_tanker_barge, 2250) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Volgoneft 270 [Tanker Barge] -- 




// -- begin Great White [Ferry] -- 


// graphics

    template spriteset_template_great_white_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -47, ANIM]
        [60,        y,          113,        66,          -73, -22, ANIM]
        [186,       y,          138,        48,          -57, -29, ANIM]
        [328,       y,          113,        66,          -20, -22, ANIM]
        [454,       y,          28,   89,          -14, -47, ANIM]
        [494,       y,          113,        66,          -73, -22, ANIM]
        [620,       y,          138,        48,          -57, -29, ANIM]
        [762,       y,          113,        66,          -20, -22, ANIM]
    }



    spriteset(great_white_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/great_white_vehicle_ferry_0.png") {
      spriteset_template_great_white_vehicle_ferry(10)
    }
    spriteset(great_white_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/great_white_vehicle_ferry_0.png") {
      spriteset_template_great_white_vehicle_ferry(110)
    }
    spriteset(great_white_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/great_white_vehicle_ferry_0.png") {
      spriteset_template_great_white_vehicle_ferry(510)
    }
    spriteset(great_white_vehicle_ferry_ss_loaded_moving_0, "src/graphics/great_white_vehicle_ferry_0.png") {
      spriteset_template_great_white_vehicle_ferry(610)
    }

    spritegroup great_white_vehicle_ferry_sg_moving_0 {
        loaded:  [
            great_white_vehicle_ferry_ss_not_loaded_moving_0,
            great_white_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            great_white_vehicle_ferry_ss_not_loaded_moving_0,
            great_white_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup great_white_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            great_white_vehicle_ferry_ss_not_loaded_not_moving_0,
            great_white_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            great_white_vehicle_ferry_ss_not_loaded_not_moving_0,
            great_white_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return great_white_vehicle_ferry_sg_not_moving_0;
        return great_white_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_graphics_random_0) {
        
            1: return great_white_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:great_white_vehicle_ferry_switch_graphics_random_0;
    
    return great_white_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_great_white_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(great_white_vehicle_ferry_ss_purchase, "src/graphics/great_white_vehicle_ferry_0.png") {
  spriteset_template_purchase_great_white_vehicle_ferry()
}

spritegroup great_white_vehicle_ferry_sg_purchase {
    loaded:  [
        great_white_vehicle_ferry_ss_purchase,
    ];
    loading: [
        great_white_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 65;
        1..25 : 65;
        26..50 : 65;
        51..75 : 65;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 128;
        1..25 : 128;
        26..50 : 128;
        51..75 : 128;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: great_white_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: great_white_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: great_white_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 1250;
    bitmask(CC_MAIL): return 1250;
    return 650;
}
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    great_white_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1250;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, great_white_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, great_white_vehicle_ferry, 2031) {
    property {
        name:                           string(STR_NAME_great_white_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1990,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1250;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    105;
        running_cost_factor:            108;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          great_white_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 great_white_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 great_white_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        great_white_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,1250,650));
        cargo_subtype_text:             great_white_vehicle_ferry_switch_cargo_subtype_text;
        default:                        great_white_vehicle_ferry_switch_graphics;
        purchase:                       great_white_vehicle_ferry_sg_purchase;
        create_effect:                  great_white_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, great_white_vehicle_ferry, 2031) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Great White [Ferry] -- 




// -- begin Stornoway [Ferry] -- 


// graphics

    template spriteset_template_stornoway_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -41, ANIM]
        [60,        y,          113,        66,          -67, -25, ANIM]
        [186,       y,          138,        48,          -59, -29, ANIM]
        [328,       y,          113,        66,          -15, -26, ANIM]
        [454,       y,          28,   89,          -14, -45, ANIM]
        [494,       y,          113,        66,          -67, -26, ANIM]
        [620,       y,          138,        48,          -59, -29, ANIM]
        [762,       y,          113,        66,          -15, -25, ANIM]
    }



    spriteset(stornoway_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/stornoway_vehicle_ferry_0.png") {
      spriteset_template_stornoway_vehicle_ferry(10)
    }
    spriteset(stornoway_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/stornoway_vehicle_ferry_0.png") {
      spriteset_template_stornoway_vehicle_ferry(110)
    }
    spriteset(stornoway_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/stornoway_vehicle_ferry_0.png") {
      spriteset_template_stornoway_vehicle_ferry(510)
    }
    spriteset(stornoway_vehicle_ferry_ss_loaded_moving_0, "src/graphics/stornoway_vehicle_ferry_0.png") {
      spriteset_template_stornoway_vehicle_ferry(610)
    }

    spritegroup stornoway_vehicle_ferry_sg_moving_0 {
        loaded:  [
            stornoway_vehicle_ferry_ss_not_loaded_moving_0,
            stornoway_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            stornoway_vehicle_ferry_ss_not_loaded_moving_0,
            stornoway_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup stornoway_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            stornoway_vehicle_ferry_ss_not_loaded_not_moving_0,
            stornoway_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            stornoway_vehicle_ferry_ss_not_loaded_not_moving_0,
            stornoway_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return stornoway_vehicle_ferry_sg_not_moving_0;
        return stornoway_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_graphics_random_0) {
        
            1: return stornoway_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:stornoway_vehicle_ferry_switch_graphics_random_0;
    
    return stornoway_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_stornoway_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 96, 22, -48, -10, ANIM]
}

spriteset(stornoway_vehicle_ferry_ss_purchase, "src/graphics/stornoway_vehicle_ferry_0.png") {
  spriteset_template_purchase_stornoway_vehicle_ferry()
}

spritegroup stornoway_vehicle_ferry_sg_purchase {
    loaded:  [
        stornoway_vehicle_ferry_ss_purchase,
    ];
    loading: [
        stornoway_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 50;
        26..50 : 50;
        51..75 : 50;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 74;
        26..50 : 74;
        51..75 : 74;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 98;
        1..25 : 98;
        26..50 : 98;
        51..75 : 98;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: stornoway_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 600;
    bitmask(CC_MAIL): return 600;
    return 300;
}
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    stornoway_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 600;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, stornoway_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, stornoway_vehicle_ferry, 79) {
    property {
        name:                           string(STR_NAME_stornoway_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1956,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 600;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    47;
        running_cost_factor:            173;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          stornoway_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 stornoway_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 stornoway_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        stornoway_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,600,300));
        cargo_subtype_text:             stornoway_vehicle_ferry_switch_cargo_subtype_text;
        default:                        stornoway_vehicle_ferry_switch_graphics;
        purchase:                       stornoway_vehicle_ferry_sg_purchase;
        create_effect:                  stornoway_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, stornoway_vehicle_ferry, 79) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Stornoway [Ferry] -- 


// -- begin Oran [Freighter] -- 


// graphics
template spriteset_template_oran_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -46, ANIM]
    [60,        y,          113,        71,          -61, -30, ANIM]
    [186,       y,          138,        48,          -50, -29, ANIM]
    [328,       y,          113,        71,          -10, -29, ANIM]
    [454,       y,          28,         89,          -14, -58, ANIM]
    [494,       y,          113,        71,          -60, -30, ANIM]
    [620,       y,          138,        48,          -50, -29, ANIM]
    [762,       y,          113,        71,          -6, -23, ANIM]
}


    spriteset(oran_freighter_ss_not_loaded_not_moving_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(10)
    }
    spriteset(oran_freighter_ss_not_loaded_moving_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(110)
    }
    spriteset(oran_freighter_ss_loading_0_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(210)
    }
    spriteset(oran_freighter_ss_loading_1_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(310)
    }
    spriteset(oran_freighter_ss_loading_2_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(410)
    }
    spriteset(oran_freighter_ss_loading_3_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(510)
    }
    spriteset(oran_freighter_ss_loaded_not_moving_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(610)
    }
    spriteset(oran_freighter_ss_loaded_moving_0, "src/graphics/oran_freighter_0.png") {
      spriteset_template_oran_freighter(710)
    }

    spritegroup oran_freighter_sg_moving_0 {
        loaded:  [
            oran_freighter_ss_not_loaded_moving_0,
            oran_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            oran_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup oran_freighter_sg_not_moving_0 {
        loaded:  [
            oran_freighter_ss_not_loaded_not_moving_0,
            oran_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            oran_freighter_ss_loading_0_0,
            oran_freighter_ss_loading_1_0,
            oran_freighter_ss_loading_2_0,
            oran_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, oran_freighter_switch_graphics_0, current_speed) {
        0: return oran_freighter_sg_not_moving_0;
        return oran_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, oran_freighter_switch_graphics_random_0) {
        
            1: return oran_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, oran_freighter_switch_graphics, build_year) {
    
        0..5000000:oran_freighter_switch_graphics_random_0;
    
    return oran_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_oran_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 115, 22, -57, -10, ANIM]
}

spriteset(oran_freighter_ss_purchase, "src/graphics/oran_freighter_0.png") {
  spriteset_template_purchase_oran_freighter()
}

spritegroup oran_freighter_sg_purchase {
    loaded:  [
        oran_freighter_ss_purchase,
    ];
    loading: [
        oran_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, oran_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, oran_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, oran_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, oran_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: oran_freighter_switch_speed_varies_with_load_amount_0;
    1: oran_freighter_switch_speed_varies_with_load_amount_1;
    2: oran_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, oran_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, oran_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 720;
}
switch (FEAT_SHIPS, SELF, oran_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    oran_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, oran_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, oran_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 720;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, oran_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 10, 0, 21), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, oran_freighter, 1126) {
    property {
        name:                           string(STR_NAME_oran_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1950,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 720;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    46;
        running_cost_factor:            171;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          oran_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 oran_freighter_switch_purchase_speed;
        cargo_capacity:                 oran_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        oran_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             oran_freighter_switch_cargo_subtype_text;
        default:                        oran_freighter_switch_graphics;
        purchase:                       oran_freighter_sg_purchase;
        create_effect:                  oran_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, oran_freighter, 1126) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Oran [Freighter] -- 




// -- begin Kwangtung [Trawler] -- 


// graphics

    template spriteset_template_kwangtung_trawler(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(kwangtung_trawler_ss_not_loaded_not_moving_0, "src/graphics/kwangtung_trawler_0.png") {
      spriteset_template_kwangtung_trawler(10)
    }
    spriteset(kwangtung_trawler_ss_not_loaded_moving_0, "src/graphics/kwangtung_trawler_0.png") {
      spriteset_template_kwangtung_trawler(110)
    }
    spriteset(kwangtung_trawler_ss_loaded_not_moving_0, "src/graphics/kwangtung_trawler_0.png") {
      spriteset_template_kwangtung_trawler(510)
    }
    spriteset(kwangtung_trawler_ss_loaded_moving_0, "src/graphics/kwangtung_trawler_0.png") {
      spriteset_template_kwangtung_trawler(610)
    }

    spritegroup kwangtung_trawler_sg_moving_0 {
        loaded:  [
            kwangtung_trawler_ss_not_loaded_moving_0,
            kwangtung_trawler_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            kwangtung_trawler_ss_not_loaded_moving_0,
            kwangtung_trawler_ss_loaded_moving_0,
        ];
    }

    spritegroup kwangtung_trawler_sg_not_moving_0 {
        loaded:  [
            kwangtung_trawler_ss_not_loaded_not_moving_0,
            kwangtung_trawler_ss_loaded_not_moving_0,
        ];
        loading: [
            kwangtung_trawler_ss_not_loaded_not_moving_0,
            kwangtung_trawler_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_graphics_0, current_speed) {
        0: return kwangtung_trawler_sg_not_moving_0;
        return kwangtung_trawler_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_graphics_random_0) {
        
            1: return kwangtung_trawler_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_graphics, build_year) {
    
        0..5000000:kwangtung_trawler_switch_graphics_random_0;
    
    return kwangtung_trawler_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_kwangtung_trawler() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [664, 21, 49, 22, -24, -10, ANIM]
}

spriteset(kwangtung_trawler_ss_purchase, "src/graphics/kwangtung_trawler_0.png") {
  spriteset_template_purchase_kwangtung_trawler()
}

spritegroup kwangtung_trawler_sg_purchase {
    loaded:  [
        kwangtung_trawler_ss_purchase,
    ];
    loading: [
        kwangtung_trawler_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 72;
        26..50 : 70;
        51..75 : 67;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 111;
        1..25 : 107;
        26..50 : 104;
        51..75 : 100;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 147;
        1..25 : 143;
        26..50 : 138;
        51..75 : 133;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: kwangtung_trawler_switch_speed_varies_with_load_amount_0;
    1: kwangtung_trawler_switch_speed_varies_with_load_amount_1;
    2: kwangtung_trawler_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 65;
    bitmask(CC_MAIL): return 80;
    return 52;
}
switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_cargo_capacity, cargo_type_in_veh) {
    FISH: return 160;
    kwangtung_trawler_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, kwangtung_trawler_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
        FISH: return 160;
        PASS: return 65;
    
    return 160;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, kwangtung_trawler_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 2, 16), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, -2, 16), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, kwangtung_trawler, 2050) {
    property {
        name:                           string(STR_NAME_kwangtung_trawler, string(STR_NAME_SUFFIX_TRAWLER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1972,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 160;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    11;
        running_cost_factor:            22;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FISH,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [];
        default_cargo_type:             FISH;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          kwangtung_trawler_switch_speed_varies_with_load_amount;
        purchase_speed:                 kwangtung_trawler_switch_purchase_speed;
        cargo_capacity:                 kwangtung_trawler_switch_cargo_capacity;
        purchase_cargo_capacity:        kwangtung_trawler_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_TRAWLER), string(STR_BUY_MENU_REFIT_CAPACITIES_TRAWLER,65,80,160,52));
        cargo_subtype_text:             kwangtung_trawler_switch_cargo_subtype_text;
        default:                        kwangtung_trawler_switch_graphics;
        purchase:                       kwangtung_trawler_sg_purchase;
        create_effect:                  kwangtung_trawler_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, kwangtung_trawler, 2050) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Kwangtung [Trawler] -- 


// -- begin Tigershark [Hydrofoil] -- 


// graphics

template spriteset_template_tigershark_hydrofoil(y, y_offs_adjust) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -59 + y_offs_adjust, ANIM]
    [60,        y,          113,        66,          -58, -32 + y_offs_adjust, ANIM]
    [186,       y,          138,        48,          -36, -31 + y_offs_adjust, ANIM]
    [328,       y,          113,        66,          -17, -32 + y_offs_adjust, ANIM]
    [454,       y,          28,         89,          -14, -58 + y_offs_adjust, ANIM]
    [494,       y,          113,        66,          -55, -26 + y_offs_adjust, ANIM]
    [620,       y,          138,        48,          -39, -29 + y_offs_adjust, ANIM]
    [762,       y,          113,        66,          0, -24 + y_offs_adjust, ANIM]
}

spriteset(tigershark_hydrofoil_ss_speed_1, "src/graphics/tigershark_hydrofoil_0.png") {
  spriteset_template_tigershark_hydrofoil(10, 0)
}
spriteset(tigershark_hydrofoil_ss_speed_2, "src/graphics/tigershark_hydrofoil_0.png") {
  spriteset_template_tigershark_hydrofoil(110, -1)
}
spriteset(tigershark_hydrofoil_ss_speed_3, "src/graphics/tigershark_hydrofoil_0.png") {
  spriteset_template_tigershark_hydrofoil(210, -2)
}
spriteset(tigershark_hydrofoil_ss_speed_4, "src/graphics/tigershark_hydrofoil_0.png") {
  spriteset_template_tigershark_hydrofoil(310, -3)
}

switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_graphics, current_speed) {
    0: return tigershark_hydrofoil_ss_speed_1;
    1..5: tigershark_hydrofoil_ss_speed_2;
    6..11: tigershark_hydrofoil_ss_speed_3;
    return tigershark_hydrofoil_ss_speed_4;
}

// buy menu graphics

template spriteset_template_purchase_tigershark_hydrofoil() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [625, 28, 64, 22, -32, -10]
}

spriteset(tigershark_hydrofoil_ss_purchase, "src/graphics/tigershark_hydrofoil_0.png") {
  spriteset_template_purchase_tigershark_hydrofoil()
}

spritegroup tigershark_hydrofoil_sg_purchase {
    loaded:  [
        tigershark_hydrofoil_ss_purchase,
    ];
    loading: [
        tigershark_hydrofoil_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 145;
        1..25 : 145;
        26..50 : 145;
        51..75 : 145;
        76..100 : 145;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 192;
        1..25 : 192;
        26..50 : 192;
        51..75 : 192;
        76..100 : 192;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: tigershark_hydrofoil_switch_speed_varies_with_load_amount_0;
    1: tigershark_hydrofoil_switch_speed_varies_with_load_amount_1;
    2: tigershark_hydrofoil_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_purchase_speed, param_adjust_ship_speed) {
    0: 97;
    1: 145;
    2: 192;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 100;
    bitmask(CC_MAIL): return 60;
    return 45;
}
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_cargo_capacity, cargo_type_in_veh) {
    
    tigershark_hydrofoil_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 100;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, tigershark_hydrofoil_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, tigershark_hydrofoil, 2040) {
    property {
        name:                           string(STR_NAME_tigershark_hydrofoil, string(STR_NAME_SUFFIX_HYDROFOIL));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1957,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 100;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          45.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    28;
        running_cost_factor:            45;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          tigershark_hydrofoil_switch_speed_varies_with_load_amount;
        purchase_speed:                 tigershark_hydrofoil_switch_purchase_speed;
        cargo_capacity:                 tigershark_hydrofoil_switch_cargo_capacity;
        purchase_cargo_capacity:        tigershark_hydrofoil_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_HYDROFOIL_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,60,45));
        cargo_subtype_text:             tigershark_hydrofoil_switch_cargo_subtype_text;
        default:                        tigershark_hydrofoil_switch_graphics;
        purchase:                       tigershark_hydrofoil_sg_purchase;
        create_effect:                  tigershark_hydrofoil_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, tigershark_hydrofoil, 2040) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Tigershark [Hydrofoil] -- 




// -- begin Hammerhead [Ferry] -- 


// graphics

    template spriteset_template_hammerhead_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -47, ANIM]
        [60,        y,          113,        66,          -73, -22, ANIM]
        [186,       y,          138,        48,          -57, -29, ANIM]
        [328,       y,          113,        66,          -20, -22, ANIM]
        [454,       y,          28,   89,          -14, -47, ANIM]
        [494,       y,          113,        66,          -73, -22, ANIM]
        [620,       y,          138,        48,          -57, -29, ANIM]
        [762,       y,          113,        66,          -20, -22, ANIM]
    }



    spriteset(hammerhead_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/hammerhead_vehicle_ferry_0.png") {
      spriteset_template_hammerhead_vehicle_ferry(10)
    }
    spriteset(hammerhead_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/hammerhead_vehicle_ferry_0.png") {
      spriteset_template_hammerhead_vehicle_ferry(110)
    }
    spriteset(hammerhead_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/hammerhead_vehicle_ferry_0.png") {
      spriteset_template_hammerhead_vehicle_ferry(510)
    }
    spriteset(hammerhead_vehicle_ferry_ss_loaded_moving_0, "src/graphics/hammerhead_vehicle_ferry_0.png") {
      spriteset_template_hammerhead_vehicle_ferry(610)
    }

    spritegroup hammerhead_vehicle_ferry_sg_moving_0 {
        loaded:  [
            hammerhead_vehicle_ferry_ss_not_loaded_moving_0,
            hammerhead_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            hammerhead_vehicle_ferry_ss_not_loaded_moving_0,
            hammerhead_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup hammerhead_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            hammerhead_vehicle_ferry_ss_not_loaded_not_moving_0,
            hammerhead_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            hammerhead_vehicle_ferry_ss_not_loaded_not_moving_0,
            hammerhead_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return hammerhead_vehicle_ferry_sg_not_moving_0;
        return hammerhead_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_graphics_random_0) {
        
            1: return hammerhead_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:hammerhead_vehicle_ferry_switch_graphics_random_0;
    
    return hammerhead_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_hammerhead_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 116, 22, -58, -10, ANIM]
}

spriteset(hammerhead_vehicle_ferry_ss_purchase, "src/graphics/hammerhead_vehicle_ferry_0.png") {
  spriteset_template_purchase_hammerhead_vehicle_ferry()
}

spritegroup hammerhead_vehicle_ferry_sg_purchase {
    loaded:  [
        hammerhead_vehicle_ferry_ss_purchase,
    ];
    loading: [
        hammerhead_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 65;
        1..25 : 65;
        26..50 : 65;
        51..75 : 65;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 128;
        1..25 : 128;
        26..50 : 128;
        51..75 : 128;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 1000;
    bitmask(CC_MAIL): return 600;
    return 450;
}
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    hammerhead_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1000;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, hammerhead_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, hammerhead_vehicle_ferry, 2030) {
    property {
        name:                           string(STR_NAME_hammerhead_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1973,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1000;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    85;
        running_cost_factor:            92;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          hammerhead_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 hammerhead_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 hammerhead_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        hammerhead_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,600,450));
        cargo_subtype_text:             hammerhead_vehicle_ferry_switch_cargo_subtype_text;
        default:                        hammerhead_vehicle_ferry_switch_graphics;
        purchase:                       hammerhead_vehicle_ferry_sg_purchase;
        create_effect:                  hammerhead_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, hammerhead_vehicle_ferry, 2030) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Hammerhead [Ferry] -- 




// -- begin Hitsuji [Livestock Ship] -- 


// graphics

    template spriteset_template_hitsuji_livestock_ship(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -41, ANIM]
        [60,        y,          113,        66,          -74, -22, ANIM]
        [186,       y,          138,        48,          -65, -29, ANIM]
        [328,       y,          113,        66,          -21, -22, ANIM]
        [454,       y,          28,   89,          -14, -50, ANIM]
        [494,       y,          113,        66,          -75, -22, ANIM]
        [620,       y,          138,        48,          -65, -29, ANIM]
        [762,       y,          113,        66,          -20, -22, ANIM]
    }



    spriteset(hitsuji_livestock_ship_ss_not_loaded_not_moving_0, "src/graphics/hitsuji_livestock_ship_0.png") {
      spriteset_template_hitsuji_livestock_ship(10)
    }
    spriteset(hitsuji_livestock_ship_ss_not_loaded_moving_0, "src/graphics/hitsuji_livestock_ship_0.png") {
      spriteset_template_hitsuji_livestock_ship(110)
    }
    spriteset(hitsuji_livestock_ship_ss_loaded_not_moving_0, "src/graphics/hitsuji_livestock_ship_0.png") {
      spriteset_template_hitsuji_livestock_ship(510)
    }
    spriteset(hitsuji_livestock_ship_ss_loaded_moving_0, "src/graphics/hitsuji_livestock_ship_0.png") {
      spriteset_template_hitsuji_livestock_ship(610)
    }

    spritegroup hitsuji_livestock_ship_sg_moving_0 {
        loaded:  [
            hitsuji_livestock_ship_ss_not_loaded_moving_0,
            hitsuji_livestock_ship_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            hitsuji_livestock_ship_ss_not_loaded_moving_0,
            hitsuji_livestock_ship_ss_loaded_moving_0,
        ];
    }

    spritegroup hitsuji_livestock_ship_sg_not_moving_0 {
        loaded:  [
            hitsuji_livestock_ship_ss_not_loaded_not_moving_0,
            hitsuji_livestock_ship_ss_loaded_not_moving_0,
        ];
        loading: [
            hitsuji_livestock_ship_ss_not_loaded_not_moving_0,
            hitsuji_livestock_ship_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_graphics_0, current_speed) {
        0: return hitsuji_livestock_ship_sg_not_moving_0;
        return hitsuji_livestock_ship_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_graphics_random_0) {
        
            1: return hitsuji_livestock_ship_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_graphics, build_year) {
    
        0..5000000:hitsuji_livestock_ship_switch_graphics_random_0;
    
    return hitsuji_livestock_ship_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_hitsuji_livestock_ship() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(hitsuji_livestock_ship_ss_purchase, "src/graphics/hitsuji_livestock_ship_0.png") {
  spriteset_template_purchase_hitsuji_livestock_ship()
}

spritegroup hitsuji_livestock_ship_sg_purchase {
    loaded:  [
        hitsuji_livestock_ship_ss_purchase,
    ];
    loading: [
        hitsuji_livestock_ship_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: hitsuji_livestock_ship_switch_speed_varies_with_load_amount_0;
    1: hitsuji_livestock_ship_switch_speed_varies_with_load_amount_1;
    2: hitsuji_livestock_ship_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_cargo_capacity, cargo_subtype) {
    0: return 350;
    1: return 700;
    2: return 1400;
    return 350;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 350, string(STR_UNIT_ITEMS));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 700, string(STR_UNIT_ITEMS));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 1400, string(STR_UNIT_ITEMS));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 350;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, hitsuji_livestock_ship_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, 2, 23), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, -2, 23), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, hitsuji_livestock_ship, 1231) {
    property {
        name:                           string(STR_NAME_hitsuji_livestock_ship, string(STR_NAME_SUFFIX_LIVESTOCK_SHIP));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1969,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 350;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.65;
        cost_factor:                    63;
        running_cost_factor:            117;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [LVST];
        cargo_disallow_refit:           [];
        default_cargo_type:             LVST;
        loading_speed:                  20;
        cargo_age_period:               1480;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          hitsuji_livestock_ship_switch_speed_varies_with_load_amount;
        purchase_speed:                 hitsuji_livestock_ship_switch_purchase_speed;
        cargo_capacity:                 hitsuji_livestock_ship_switch_cargo_capacity;
        purchase_cargo_capacity:        hitsuji_livestock_ship_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LIVESTOCK_SHIP), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,350,700,1400,string(STR_QUANTITY_LIVESTOCK)));
        cargo_subtype_text:             hitsuji_livestock_ship_switch_cargo_subtype_text;
        default:                        hitsuji_livestock_ship_switch_graphics;
        purchase:                       hitsuji_livestock_ship_sg_purchase;
        create_effect:                  hitsuji_livestock_ship_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, hitsuji_livestock_ship, 1231) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Hitsuji [Livestock Ship] -- 


// -- begin Whetstone [Tanker] -- 


// graphics
template spriteset_template_whetstone_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        66,          -80, -24, ANIM]
    [186,       y,          138,        48,          -66, -21, ANIM]
    [328,       y,          113,        66,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        66,          -78, -26, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        66,          -32, -23, ANIM]
}

spriteset(whetstone_tanker_ss_not_loaded_not_moving, "src/graphics/whetstone_tanker_0.png") {
  spriteset_template_whetstone_tanker(10)
}
spriteset(whetstone_tanker_ss_not_loaded_moving, "src/graphics/whetstone_tanker_0.png") {
  spriteset_template_whetstone_tanker(110)
}
spriteset(whetstone_tanker_ss_loaded_not_moving, "src/graphics/whetstone_tanker_0.png") {
  spriteset_template_whetstone_tanker(210)
}
spriteset(whetstone_tanker_ss_loaded_moving, "src/graphics/whetstone_tanker_0.png") {
  spriteset_template_whetstone_tanker(310)
}

spritegroup whetstone_tanker_sg_moving {
    loaded:  [
        whetstone_tanker_ss_not_loaded_moving,
        whetstone_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        whetstone_tanker_ss_loaded_moving,
    ];
}

spritegroup whetstone_tanker_sg_not_moving {
    loaded:  [
        whetstone_tanker_ss_not_loaded_not_moving,
        whetstone_tanker_ss_loaded_not_moving,
    ];
    loading: [
        whetstone_tanker_ss_not_loaded_not_moving,
        whetstone_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_graphics, current_speed) {
    0: return whetstone_tanker_sg_not_moving;
    return whetstone_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_whetstone_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10]
}

spriteset(whetstone_tanker_ss_purchase, "src/graphics/whetstone_tanker_0.png") {
  spriteset_template_purchase_whetstone_tanker()
}

spritegroup whetstone_tanker_sg_purchase {
    loaded:  [
        whetstone_tanker_ss_purchase,
    ];
    loading: [
        whetstone_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: whetstone_tanker_switch_speed_varies_with_load_amount_0;
    1: whetstone_tanker_switch_speed_varies_with_load_amount_1;
    2: whetstone_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 330;
}
switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    whetstone_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, whetstone_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 330;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, whetstone_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 8, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, whetstone_tanker, 1250) {
    property {
        name:                           string(STR_NAME_whetstone_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1946,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 330;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    28;
        running_cost_factor:            74;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          whetstone_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 whetstone_tanker_switch_purchase_speed;
        cargo_capacity:                 whetstone_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        whetstone_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_COASTAL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             whetstone_tanker_switch_cargo_subtype_text;
        default:                        whetstone_tanker_switch_graphics;
        purchase:                       whetstone_tanker_sg_purchase;
        create_effect:                  whetstone_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, whetstone_tanker, 1250) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Whetstone [Tanker] -- 


// -- begin Volgoneft 320 [Tanker Barge] -- 


// graphics
template spriteset_template_volgoneft_three_twenty_tanker_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        66,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        66,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        66,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        66,          -9, -28, ANIM]
}

spriteset(volgoneft_three_twenty_tanker_barge_ss_not_loaded_not_moving, "src/graphics/volgoneft_three_twenty_tanker_barge_0.png") {
  spriteset_template_volgoneft_three_twenty_tanker_barge(10)
}
spriteset(volgoneft_three_twenty_tanker_barge_ss_not_loaded_moving, "src/graphics/volgoneft_three_twenty_tanker_barge_0.png") {
  spriteset_template_volgoneft_three_twenty_tanker_barge(110)
}
spriteset(volgoneft_three_twenty_tanker_barge_ss_loaded_not_moving, "src/graphics/volgoneft_three_twenty_tanker_barge_0.png") {
  spriteset_template_volgoneft_three_twenty_tanker_barge(210)
}
spriteset(volgoneft_three_twenty_tanker_barge_ss_loaded_moving, "src/graphics/volgoneft_three_twenty_tanker_barge_0.png") {
  spriteset_template_volgoneft_three_twenty_tanker_barge(310)
}

spritegroup volgoneft_three_twenty_tanker_barge_sg_moving {
    loaded:  [
        volgoneft_three_twenty_tanker_barge_ss_not_loaded_moving,
        volgoneft_three_twenty_tanker_barge_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        volgoneft_three_twenty_tanker_barge_ss_loaded_moving,
    ];
}

spritegroup volgoneft_three_twenty_tanker_barge_sg_not_moving {
    loaded:  [
        volgoneft_three_twenty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_three_twenty_tanker_barge_ss_loaded_not_moving,
    ];
    loading: [
        volgoneft_three_twenty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_three_twenty_tanker_barge_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_graphics, current_speed) {
    0: return volgoneft_three_twenty_tanker_barge_sg_not_moving;
    return volgoneft_three_twenty_tanker_barge_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_volgoneft_three_twenty_tanker_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 21, 94, 22, -47, -10]
}

spriteset(volgoneft_three_twenty_tanker_barge_ss_purchase, "src/graphics/volgoneft_three_twenty_tanker_barge_0.png") {
  spriteset_template_purchase_volgoneft_three_twenty_tanker_barge()
}

spritegroup volgoneft_three_twenty_tanker_barge_sg_purchase {
    loaded:  [
        volgoneft_three_twenty_tanker_barge_ss_purchase,
    ];
    loading: [
        volgoneft_three_twenty_tanker_barge_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 49;
        26..50 : 48;
        51..75 : 47;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 73;
        26..50 : 71;
        51..75 : 69;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 99;
        1..25 : 97;
        26..50 : 94;
        51..75 : 92;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_0;
    1: volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_1;
    2: volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 320;
}
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    volgoneft_three_twenty_tanker_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 320;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, volgoneft_three_twenty_tanker_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 6, 0, 13), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, volgoneft_three_twenty_tanker_barge, 2251) {
    property {
        name:                           string(STR_NAME_volgoneft_three_twenty_tanker_barge, string(STR_NAME_SUFFIX_TANKER_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1922,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 320;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    21;
        running_cost_factor:            98;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          volgoneft_three_twenty_tanker_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 volgoneft_three_twenty_tanker_barge_switch_purchase_speed;
        cargo_capacity:                 volgoneft_three_twenty_tanker_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        volgoneft_three_twenty_tanker_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             volgoneft_three_twenty_tanker_barge_switch_cargo_subtype_text;
        default:                        volgoneft_three_twenty_tanker_barge_switch_graphics;
        purchase:                       volgoneft_three_twenty_tanker_barge_sg_purchase;
        create_effect:                  volgoneft_three_twenty_tanker_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, volgoneft_three_twenty_tanker_barge, 2251) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Volgoneft 320 [Tanker Barge] -- 


// -- begin Santorini [Freighter] -- 


// graphics
template spriteset_template_santorini_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(santorini_freighter_ss_not_loaded_not_moving_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(10)
    }
    spriteset(santorini_freighter_ss_not_loaded_moving_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(110)
    }
    spriteset(santorini_freighter_ss_loading_0_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(210)
    }
    spriteset(santorini_freighter_ss_loading_1_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(310)
    }
    spriteset(santorini_freighter_ss_loading_2_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(410)
    }
    spriteset(santorini_freighter_ss_loading_3_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(510)
    }
    spriteset(santorini_freighter_ss_loaded_not_moving_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(610)
    }
    spriteset(santorini_freighter_ss_loaded_moving_0, "src/graphics/santorini_freighter_0.png") {
      spriteset_template_santorini_freighter(710)
    }

    spritegroup santorini_freighter_sg_moving_0 {
        loaded:  [
            santorini_freighter_ss_not_loaded_moving_0,
            santorini_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            santorini_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup santorini_freighter_sg_not_moving_0 {
        loaded:  [
            santorini_freighter_ss_not_loaded_not_moving_0,
            santorini_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            santorini_freighter_ss_loading_0_0,
            santorini_freighter_ss_loading_1_0,
            santorini_freighter_ss_loading_2_0,
            santorini_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, santorini_freighter_switch_graphics_0, current_speed) {
        0: return santorini_freighter_sg_not_moving_0;
        return santorini_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, santorini_freighter_switch_graphics_random_0) {
        
            1: return santorini_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, santorini_freighter_switch_graphics, build_year) {
    
        0..5000000:santorini_freighter_switch_graphics_random_0;
    
    return santorini_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_santorini_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(santorini_freighter_ss_purchase, "src/graphics/santorini_freighter_0.png") {
  spriteset_template_purchase_santorini_freighter()
}

spritegroup santorini_freighter_sg_purchase {
    loaded:  [
        santorini_freighter_ss_purchase,
    ];
    loading: [
        santorini_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, santorini_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, santorini_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, santorini_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, santorini_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: santorini_freighter_switch_speed_varies_with_load_amount_0;
    1: santorini_freighter_switch_speed_varies_with_load_amount_1;
    2: santorini_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, santorini_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, santorini_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1440;
}
switch (FEAT_SHIPS, SELF, santorini_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    santorini_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, santorini_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, santorini_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1440;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, santorini_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, santorini_freighter, 1440) {
    property {
        name:                           string(STR_NAME_santorini_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1958,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1440;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    85;
        running_cost_factor:            245;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          santorini_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 santorini_freighter_switch_purchase_speed;
        cargo_capacity:                 santorini_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        santorini_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             santorini_freighter_switch_cargo_subtype_text;
        default:                        santorini_freighter_switch_graphics;
        purchase:                       santorini_freighter_sg_purchase;
        create_effect:                  santorini_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, santorini_freighter, 1440) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Santorini [Freighter] -- 


// -- begin Lutschine [Freight Barge] -- 


// graphics
template spriteset_template_lutschine_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        71,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        71,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        71,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        71,          -9, -28, ANIM]
}


    spriteset(lutschine_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(10)
    }
    spriteset(lutschine_freight_barge_ss_not_loaded_moving_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(110)
    }
    spriteset(lutschine_freight_barge_ss_loading_0_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(210)
    }
    spriteset(lutschine_freight_barge_ss_loading_1_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(310)
    }
    spriteset(lutschine_freight_barge_ss_loading_2_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(410)
    }
    spriteset(lutschine_freight_barge_ss_loading_3_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(510)
    }
    spriteset(lutschine_freight_barge_ss_loaded_not_moving_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(610)
    }
    spriteset(lutschine_freight_barge_ss_loaded_moving_0, "src/graphics/lutschine_freight_barge_0.png") {
      spriteset_template_lutschine_freight_barge(710)
    }

    spritegroup lutschine_freight_barge_sg_moving_0 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_moving_0,
            lutschine_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            lutschine_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup lutschine_freight_barge_sg_not_moving_0 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_not_moving_0,
            lutschine_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            lutschine_freight_barge_ss_loading_0_0,
            lutschine_freight_barge_ss_loading_1_0,
            lutschine_freight_barge_ss_loading_2_0,
            lutschine_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_0, current_speed) {
        0: return lutschine_freight_barge_sg_not_moving_0;
        return lutschine_freight_barge_sg_moving_0;
    }

    spriteset(lutschine_freight_barge_ss_not_loaded_not_moving_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(10)
    }
    spriteset(lutschine_freight_barge_ss_not_loaded_moving_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(110)
    }
    spriteset(lutschine_freight_barge_ss_loading_0_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(210)
    }
    spriteset(lutschine_freight_barge_ss_loading_1_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(310)
    }
    spriteset(lutschine_freight_barge_ss_loading_2_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(410)
    }
    spriteset(lutschine_freight_barge_ss_loading_3_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(510)
    }
    spriteset(lutschine_freight_barge_ss_loaded_not_moving_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(610)
    }
    spriteset(lutschine_freight_barge_ss_loaded_moving_1, "src/graphics/lutschine_freight_barge_1.png") {
      spriteset_template_lutschine_freight_barge(710)
    }

    spritegroup lutschine_freight_barge_sg_moving_1 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_moving_1,
            lutschine_freight_barge_ss_loaded_moving_1,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            lutschine_freight_barge_ss_loaded_moving_1,
        ];
    }

    spritegroup lutschine_freight_barge_sg_not_moving_1 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_not_moving_1,
            lutschine_freight_barge_ss_loaded_not_moving_1,
        ];
        loading: [
            lutschine_freight_barge_ss_loading_0_1,
            lutschine_freight_barge_ss_loading_1_1,
            lutschine_freight_barge_ss_loading_2_1,
            lutschine_freight_barge_ss_loading_3_1,
        ];
    }

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_1, current_speed) {
        0: return lutschine_freight_barge_sg_not_moving_1;
        return lutschine_freight_barge_sg_moving_1;
    }

    spriteset(lutschine_freight_barge_ss_not_loaded_not_moving_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(10)
    }
    spriteset(lutschine_freight_barge_ss_not_loaded_moving_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(110)
    }
    spriteset(lutschine_freight_barge_ss_loading_0_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(210)
    }
    spriteset(lutschine_freight_barge_ss_loading_1_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(310)
    }
    spriteset(lutschine_freight_barge_ss_loading_2_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(410)
    }
    spriteset(lutschine_freight_barge_ss_loading_3_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(510)
    }
    spriteset(lutschine_freight_barge_ss_loaded_not_moving_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(610)
    }
    spriteset(lutschine_freight_barge_ss_loaded_moving_2, "src/graphics/lutschine_freight_barge_2.png") {
      spriteset_template_lutschine_freight_barge(710)
    }

    spritegroup lutschine_freight_barge_sg_moving_2 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_moving_2,
            lutschine_freight_barge_ss_loaded_moving_2,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            lutschine_freight_barge_ss_loaded_moving_2,
        ];
    }

    spritegroup lutschine_freight_barge_sg_not_moving_2 {
        loaded:  [
            lutschine_freight_barge_ss_not_loaded_not_moving_2,
            lutschine_freight_barge_ss_loaded_not_moving_2,
        ];
        loading: [
            lutschine_freight_barge_ss_loading_0_2,
            lutschine_freight_barge_ss_loading_1_2,
            lutschine_freight_barge_ss_loading_2_2,
            lutschine_freight_barge_ss_loading_3_2,
        ];
    }

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_2, current_speed) {
        0: return lutschine_freight_barge_sg_not_moving_2;
        return lutschine_freight_barge_sg_moving_2;
    }



    random_switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_random_0) {
        
            1: return lutschine_freight_barge_switch_graphics_0;
        
    }

    random_switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_random_1950) {
        
            1: return lutschine_freight_barge_switch_graphics_0;
        
            1: return lutschine_freight_barge_switch_graphics_1;
        
    }

    random_switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics_random_1960) {
        
            1: return lutschine_freight_barge_switch_graphics_1;
        
            1: return lutschine_freight_barge_switch_graphics_2;
        
    }



switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_graphics, build_year) {
    
        0..1949:lutschine_freight_barge_switch_graphics_random_0;
    
        1950..1959:lutschine_freight_barge_switch_graphics_random_1950;
    
        1960..5000000:lutschine_freight_barge_switch_graphics_random_1960;
    
    return lutschine_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_lutschine_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 21, 94, 22, -47, -10, ANIM]
}

spriteset(lutschine_freight_barge_ss_purchase, "src/graphics/lutschine_freight_barge_0.png") {
  spriteset_template_purchase_lutschine_freight_barge()
}

spritegroup lutschine_freight_barge_sg_purchase {
    loaded:  [
        lutschine_freight_barge_ss_purchase,
    ];
    loading: [
        lutschine_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 49;
        26..50 : 48;
        51..75 : 47;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 73;
        26..50 : 71;
        51..75 : 69;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 99;
        1..25 : 97;
        26..50 : 94;
        51..75 : 92;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: lutschine_freight_barge_switch_speed_varies_with_load_amount_0;
    1: lutschine_freight_barge_switch_speed_varies_with_load_amount_1;
    2: lutschine_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 295;
}
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    lutschine_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 295;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, lutschine_freight_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 6, 0, 13), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, lutschine_freight_barge, 2135) {
    property {
        name:                           string(STR_NAME_lutschine_freight_barge, string(STR_NAME_SUFFIX_FREIGHT_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1910,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 295;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    20;
        running_cost_factor:            61;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          lutschine_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 lutschine_freight_barge_switch_purchase_speed;
        cargo_capacity:                 lutschine_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        lutschine_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             lutschine_freight_barge_switch_cargo_subtype_text;
        default:                        lutschine_freight_barge_switch_graphics;
        purchase:                       lutschine_freight_barge_sg_purchase;
        create_effect:                  lutschine_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, lutschine_freight_barge, 2135) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Lutschine [Freight Barge] -- 


// -- begin Altamira [Freighter] -- 


// graphics
template spriteset_template_altamira_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -15, -38, ANIM]
    [60,        y,          113,        71,          -79, -21, ANIM]
    [186,       y,          138,        48,          -66, -25, ANIM]
    [328,       y,          113,        71,          -38, -22, ANIM]
    [454,       y,          28,         89,          -14, -36, ANIM]
    [494,       y,          113,        71,          -78, -22, ANIM]
    [620,       y,          138,        48,          -68, -25, ANIM]
    [762,       y,          113,        71,          -38, -20, ANIM]
}


    spriteset(altamira_freighter_ss_not_loaded_not_moving_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(10)
    }
    spriteset(altamira_freighter_ss_not_loaded_moving_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(110)
    }
    spriteset(altamira_freighter_ss_loading_0_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(210)
    }
    spriteset(altamira_freighter_ss_loading_1_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(310)
    }
    spriteset(altamira_freighter_ss_loading_2_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(410)
    }
    spriteset(altamira_freighter_ss_loading_3_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(510)
    }
    spriteset(altamira_freighter_ss_loaded_not_moving_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(610)
    }
    spriteset(altamira_freighter_ss_loaded_moving_0, "src/graphics/altamira_freighter_0.png") {
      spriteset_template_altamira_freighter(710)
    }

    spritegroup altamira_freighter_sg_moving_0 {
        loaded:  [
            altamira_freighter_ss_not_loaded_moving_0,
            altamira_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            altamira_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup altamira_freighter_sg_not_moving_0 {
        loaded:  [
            altamira_freighter_ss_not_loaded_not_moving_0,
            altamira_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            altamira_freighter_ss_loading_0_0,
            altamira_freighter_ss_loading_1_0,
            altamira_freighter_ss_loading_2_0,
            altamira_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, altamira_freighter_switch_graphics_0, current_speed) {
        0: return altamira_freighter_sg_not_moving_0;
        return altamira_freighter_sg_moving_0;
    }

    spriteset(altamira_freighter_ss_not_loaded_not_moving_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(10)
    }
    spriteset(altamira_freighter_ss_not_loaded_moving_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(110)
    }
    spriteset(altamira_freighter_ss_loading_0_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(210)
    }
    spriteset(altamira_freighter_ss_loading_1_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(310)
    }
    spriteset(altamira_freighter_ss_loading_2_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(410)
    }
    spriteset(altamira_freighter_ss_loading_3_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(510)
    }
    spriteset(altamira_freighter_ss_loaded_not_moving_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(610)
    }
    spriteset(altamira_freighter_ss_loaded_moving_1, "src/graphics/altamira_freighter_1.png") {
      spriteset_template_altamira_freighter(710)
    }

    spritegroup altamira_freighter_sg_moving_1 {
        loaded:  [
            altamira_freighter_ss_not_loaded_moving_1,
            altamira_freighter_ss_loaded_moving_1,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            altamira_freighter_ss_loaded_moving_1,
        ];
    }

    spritegroup altamira_freighter_sg_not_moving_1 {
        loaded:  [
            altamira_freighter_ss_not_loaded_not_moving_1,
            altamira_freighter_ss_loaded_not_moving_1,
        ];
        loading: [
            altamira_freighter_ss_loading_0_1,
            altamira_freighter_ss_loading_1_1,
            altamira_freighter_ss_loading_2_1,
            altamira_freighter_ss_loading_3_1,
        ];
    }

    switch (FEAT_SHIPS, SELF, altamira_freighter_switch_graphics_1, current_speed) {
        0: return altamira_freighter_sg_not_moving_1;
        return altamira_freighter_sg_moving_1;
    }



    random_switch (FEAT_SHIPS, SELF, altamira_freighter_switch_graphics_random_0) {
        
            1: return altamira_freighter_switch_graphics_0;
        
            1: return altamira_freighter_switch_graphics_1;
        
    }



switch (FEAT_SHIPS, SELF, altamira_freighter_switch_graphics, build_year) {
    
        0..5000000:altamira_freighter_switch_graphics_random_0;
    
    return altamira_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_altamira_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [646, 25, 94, 22, -47, -10, ANIM]
}

spriteset(altamira_freighter_ss_purchase, "src/graphics/altamira_freighter_0.png") {
  spriteset_template_purchase_altamira_freighter()
}

spritegroup altamira_freighter_sg_purchase {
    loaded:  [
        altamira_freighter_ss_purchase,
    ];
    loading: [
        altamira_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, altamira_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 48;
        1..25 : 47;
        26..50 : 46;
        51..75 : 44;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, altamira_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 69;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, altamira_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 94;
        1..25 : 92;
        26..50 : 90;
        51..75 : 88;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, altamira_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: altamira_freighter_switch_speed_varies_with_load_amount_0;
    1: altamira_freighter_switch_speed_varies_with_load_amount_1;
    2: altamira_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, altamira_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, altamira_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 360;
}
switch (FEAT_SHIPS, SELF, altamira_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    altamira_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, altamira_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, altamira_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 360;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, altamira_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 8, 0, 24), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, altamira_freighter, 1111) {
    property {
        name:                           string(STR_NAME_altamira_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1890,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 360;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    28;
        running_cost_factor:            54;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          altamira_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 altamira_freighter_switch_purchase_speed;
        cargo_capacity:                 altamira_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        altamira_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             altamira_freighter_switch_cargo_subtype_text;
        default:                        altamira_freighter_switch_graphics;
        purchase:                       altamira_freighter_sg_purchase;
        create_effect:                  altamira_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, altamira_freighter, 1111) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Altamira [Freighter] -- 


// -- begin Constance [Freight Barge] -- 


// graphics
template spriteset_template_constance_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -84, -25, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        71,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -83, -24, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        71,          -32, -23, ANIM]
}


    spriteset(constance_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(10)
    }
    spriteset(constance_freight_barge_ss_not_loaded_moving_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(110)
    }
    spriteset(constance_freight_barge_ss_loading_0_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(210)
    }
    spriteset(constance_freight_barge_ss_loading_1_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(310)
    }
    spriteset(constance_freight_barge_ss_loading_2_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(410)
    }
    spriteset(constance_freight_barge_ss_loading_3_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(510)
    }
    spriteset(constance_freight_barge_ss_loaded_not_moving_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(610)
    }
    spriteset(constance_freight_barge_ss_loaded_moving_0, "src/graphics/constance_freight_barge_0.png") {
      spriteset_template_constance_freight_barge(710)
    }

    spritegroup constance_freight_barge_sg_moving_0 {
        loaded:  [
            constance_freight_barge_ss_not_loaded_moving_0,
            constance_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            constance_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup constance_freight_barge_sg_not_moving_0 {
        loaded:  [
            constance_freight_barge_ss_not_loaded_not_moving_0,
            constance_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            constance_freight_barge_ss_loading_0_0,
            constance_freight_barge_ss_loading_1_0,
            constance_freight_barge_ss_loading_2_0,
            constance_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_graphics_0, current_speed) {
        0: return constance_freight_barge_sg_not_moving_0;
        return constance_freight_barge_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_graphics_random_0) {
        
            1: return constance_freight_barge_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_graphics, build_year) {
    
        0..5000000:constance_freight_barge_switch_graphics_random_0;
    
    return constance_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_constance_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10, ANIM]
}

spriteset(constance_freight_barge_ss_purchase, "src/graphics/constance_freight_barge_0.png") {
  spriteset_template_purchase_constance_freight_barge()
}

spritegroup constance_freight_barge_sg_purchase {
    loaded:  [
        constance_freight_barge_ss_purchase,
    ];
    loading: [
        constance_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: constance_freight_barge_switch_speed_varies_with_load_amount_0;
    1: constance_freight_barge_switch_speed_varies_with_load_amount_1;
    2: constance_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 240;
}
switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    constance_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, constance_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 240;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, constance_freight_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 6, 0, 13), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, constance_freight_barge, 2120) {
    property {
        name:                           string(STR_NAME_constance_freight_barge, string(STR_NAME_SUFFIX_FREIGHT_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 240;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    12;
        running_cost_factor:            43;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          constance_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 constance_freight_barge_switch_purchase_speed;
        cargo_capacity:                 constance_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        constance_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             constance_freight_barge_switch_cargo_subtype_text;
        default:                        constance_freight_barge_switch_graphics;
        purchase:                       constance_freight_barge_sg_purchase;
        create_effect:                  constance_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, constance_freight_barge, 2120) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Constance [Freight Barge] -- 




// -- begin Maddalena [Ferry] -- 


// graphics

    template spriteset_template_maddalena_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -41, ANIM]
        [60,        y,          113,        66,          -67, -25, ANIM]
        [186,       y,          138,        48,          -59, -29, ANIM]
        [328,       y,          113,        66,          -15, -26, ANIM]
        [454,       y,          28,   89,          -14, -45, ANIM]
        [494,       y,          113,        66,          -67, -26, ANIM]
        [620,       y,          138,        48,          -59, -29, ANIM]
        [762,       y,          113,        66,          -15, -25, ANIM]
    }



    spriteset(maddalena_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/maddalena_vehicle_ferry_0.png") {
      spriteset_template_maddalena_vehicle_ferry(10)
    }
    spriteset(maddalena_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/maddalena_vehicle_ferry_0.png") {
      spriteset_template_maddalena_vehicle_ferry(110)
    }
    spriteset(maddalena_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/maddalena_vehicle_ferry_0.png") {
      spriteset_template_maddalena_vehicle_ferry(510)
    }
    spriteset(maddalena_vehicle_ferry_ss_loaded_moving_0, "src/graphics/maddalena_vehicle_ferry_0.png") {
      spriteset_template_maddalena_vehicle_ferry(610)
    }

    spritegroup maddalena_vehicle_ferry_sg_moving_0 {
        loaded:  [
            maddalena_vehicle_ferry_ss_not_loaded_moving_0,
            maddalena_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            maddalena_vehicle_ferry_ss_not_loaded_moving_0,
            maddalena_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup maddalena_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            maddalena_vehicle_ferry_ss_not_loaded_not_moving_0,
            maddalena_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            maddalena_vehicle_ferry_ss_not_loaded_not_moving_0,
            maddalena_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return maddalena_vehicle_ferry_sg_not_moving_0;
        return maddalena_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_graphics_random_0) {
        
            1: return maddalena_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:maddalena_vehicle_ferry_switch_graphics_random_0;
    
    return maddalena_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_maddalena_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 117, 22, -58, -10, ANIM]
}

spriteset(maddalena_vehicle_ferry_ss_purchase, "src/graphics/maddalena_vehicle_ferry_0.png") {
  spriteset_template_purchase_maddalena_vehicle_ferry()
}

spritegroup maddalena_vehicle_ferry_sg_purchase {
    loaded:  [
        maddalena_vehicle_ferry_ss_purchase,
    ];
    loading: [
        maddalena_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 50;
        26..50 : 50;
        51..75 : 50;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 74;
        26..50 : 74;
        51..75 : 74;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 98;
        1..25 : 98;
        26..50 : 98;
        51..75 : 98;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: maddalena_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 860;
    bitmask(CC_MAIL): return 860;
    return 470;
}
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    maddalena_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 860;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, maddalena_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, maddalena_vehicle_ferry, 80) {
    property {
        name:                           string(STR_NAME_maddalena_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1959,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 860;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    63;
        running_cost_factor:            193;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          maddalena_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 maddalena_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 maddalena_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        maddalena_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,860,470));
        cargo_subtype_text:             maddalena_vehicle_ferry_switch_cargo_subtype_text;
        default:                        maddalena_vehicle_ferry_switch_graphics;
        purchase:                       maddalena_vehicle_ferry_sg_purchase;
        create_effect:                  maddalena_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, maddalena_vehicle_ferry, 80) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Maddalena [Ferry] -- 




// -- begin Provincetown [Ferry] -- 


// graphics

    template spriteset_template_provincetown_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(provincetown_ferry_ss_not_loaded_not_moving_0, "src/graphics/provincetown_ferry_0.png") {
      spriteset_template_provincetown_ferry(10)
    }
    spriteset(provincetown_ferry_ss_not_loaded_moving_0, "src/graphics/provincetown_ferry_0.png") {
      spriteset_template_provincetown_ferry(110)
    }
    spriteset(provincetown_ferry_ss_loaded_not_moving_0, "src/graphics/provincetown_ferry_0.png") {
      spriteset_template_provincetown_ferry(510)
    }
    spriteset(provincetown_ferry_ss_loaded_moving_0, "src/graphics/provincetown_ferry_0.png") {
      spriteset_template_provincetown_ferry(610)
    }

    spritegroup provincetown_ferry_sg_moving_0 {
        loaded:  [
            provincetown_ferry_ss_not_loaded_moving_0,
            provincetown_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            provincetown_ferry_ss_not_loaded_moving_0,
            provincetown_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup provincetown_ferry_sg_not_moving_0 {
        loaded:  [
            provincetown_ferry_ss_not_loaded_not_moving_0,
            provincetown_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            provincetown_ferry_ss_not_loaded_not_moving_0,
            provincetown_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_graphics_0, current_speed) {
        0: return provincetown_ferry_sg_not_moving_0;
        return provincetown_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_graphics_random_0) {
        
            1: return provincetown_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_graphics, build_year) {
    
        0..5000000:provincetown_ferry_switch_graphics_random_0;
    
    return provincetown_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_provincetown_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [669, 21, 40, 22, -20, -10, ANIM]
}

spriteset(provincetown_ferry_ss_purchase, "src/graphics/provincetown_ferry_0.png") {
  spriteset_template_purchase_provincetown_ferry()
}

spritegroup provincetown_ferry_sg_purchase {
    loaded:  [
        provincetown_ferry_ss_purchase,
    ];
    loading: [
        provincetown_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 43;
        26..50 : 43;
        51..75 : 43;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 65;
        1..25 : 65;
        26..50 : 65;
        51..75 : 65;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 86;
        1..25 : 86;
        26..50 : 86;
        51..75 : 86;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: provincetown_ferry_switch_speed_varies_with_load_amount_0;
    1: provincetown_ferry_switch_speed_varies_with_load_amount_1;
    2: provincetown_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 100;
    bitmask(CC_MAIL): return 80;
    return 25;
}
switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    provincetown_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, provincetown_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 100;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, provincetown_ferry_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 2, 0, 16), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, provincetown_ferry, 1010) {
    property {
        name:                           string(STR_NAME_provincetown_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1890,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 100;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    14;
        running_cost_factor:            34;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          provincetown_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 provincetown_ferry_switch_purchase_speed;
        cargo_capacity:                 provincetown_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        provincetown_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,80,25));
        cargo_subtype_text:             provincetown_ferry_switch_cargo_subtype_text;
        default:                        provincetown_ferry_switch_graphics;
        purchase:                       provincetown_ferry_sg_purchase;
        create_effect:                  provincetown_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, provincetown_ferry, 1010) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Provincetown [Ferry] -- 




// -- begin Connor Freight [Ferry] -- 


// graphics

    template spriteset_template_connor_freight_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -41, ANIM]
        [60,        y,          113,        66,          -74, -22, ANIM]
        [186,       y,          138,        48,          -65, -29, ANIM]
        [328,       y,          113,        66,          -21, -22, ANIM]
        [454,       y,          28,   89,          -14, -50, ANIM]
        [494,       y,          113,        66,          -75, -22, ANIM]
        [620,       y,          138,        48,          -65, -29, ANIM]
        [762,       y,          113,        66,          -20, -22, ANIM]
    }



    spriteset(connor_freight_ferry_ss_not_loaded_not_moving_0, "src/graphics/connor_freight_ferry_0.png") {
      spriteset_template_connor_freight_ferry(10)
    }
    spriteset(connor_freight_ferry_ss_not_loaded_moving_0, "src/graphics/connor_freight_ferry_0.png") {
      spriteset_template_connor_freight_ferry(110)
    }
    spriteset(connor_freight_ferry_ss_loaded_not_moving_0, "src/graphics/connor_freight_ferry_0.png") {
      spriteset_template_connor_freight_ferry(510)
    }
    spriteset(connor_freight_ferry_ss_loaded_moving_0, "src/graphics/connor_freight_ferry_0.png") {
      spriteset_template_connor_freight_ferry(610)
    }

    spritegroup connor_freight_ferry_sg_moving_0 {
        loaded:  [
            connor_freight_ferry_ss_not_loaded_moving_0,
            connor_freight_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            connor_freight_ferry_ss_not_loaded_moving_0,
            connor_freight_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup connor_freight_ferry_sg_not_moving_0 {
        loaded:  [
            connor_freight_ferry_ss_not_loaded_not_moving_0,
            connor_freight_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            connor_freight_ferry_ss_not_loaded_not_moving_0,
            connor_freight_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_graphics_0, current_speed) {
        0: return connor_freight_ferry_sg_not_moving_0;
        return connor_freight_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_graphics_random_0) {
        
            1: return connor_freight_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_graphics, build_year) {
    
        0..5000000:connor_freight_ferry_switch_graphics_random_0;
    
    return connor_freight_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_connor_freight_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 128, 22, -64, -10, ANIM]
}

spriteset(connor_freight_ferry_ss_purchase, "src/graphics/connor_freight_ferry_0.png") {
  spriteset_template_purchase_connor_freight_ferry()
}

spritegroup connor_freight_ferry_sg_purchase {
    loaded:  [
        connor_freight_ferry_ss_purchase,
    ];
    loading: [
        connor_freight_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 65;
        1..25 : 65;
        26..50 : 65;
        51..75 : 65;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 128;
        1..25 : 128;
        26..50 : 128;
        51..75 : 128;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: connor_freight_ferry_switch_speed_varies_with_load_amount_0;
    1: connor_freight_ferry_switch_speed_varies_with_load_amount_1;
    2: connor_freight_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 320;
    bitmask(CC_MAIL): return 1280;
    return 640;
}
switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    connor_freight_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, connor_freight_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 320;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, connor_freight_ferry_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, 2, 23), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, -2, 23), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, connor_freight_ferry, 1032) {
    property {
        name:                           string(STR_NAME_connor_freight_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1960,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 320;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    65;
        running_cost_factor:            193;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          connor_freight_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 connor_freight_ferry_switch_purchase_speed;
        cargo_capacity:                 connor_freight_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        connor_freight_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_FAST_PACKET_STEAMER), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,1280,640));
        cargo_subtype_text:             connor_freight_ferry_switch_cargo_subtype_text;
        default:                        connor_freight_ferry_switch_graphics;
        purchase:                       connor_freight_ferry_sg_purchase;
        create_effect:                  connor_freight_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, connor_freight_ferry, 1032) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Connor Freight [Ferry] -- 


// -- begin Ohshima Freight [Hovercraft] -- 


// graphics
template spriteset_template_ohshima_freight_hovercraft(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y,                       flags]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -82, -24, ANIM]
    [186,       y,          138,        48,          -69, -21, ANIM]
    [328,       y,          113,        71,          -29, -24, ANIM]
    [454,       y,          28,         89,          -14, -42, ANIM]
    [494,       y,          113,        71,          -80, -26, ANIM]
    [620,       y,          138,        48,          -68, -21, ANIM]
    [762,       y,          113,        71,          -29, -24, ANIM]
}

spriteset(ohshima_freight_hovercraft_ss_empty_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(10)
}
spriteset(ohshima_freight_hovercraft_ss_empty_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(110)
}
spriteset(ohshima_freight_hovercraft_ss_loading_0_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(210)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_1_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(310)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_1_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(410)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_2_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(510)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_2_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(610)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_3_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(710)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_3_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(810)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_4_not_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(910)
}
spriteset(ohshima_freight_hovercraft_ss_loaded_4_moving, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_ohshima_freight_hovercraft(1010)
}

spritegroup ohshima_freight_hovercraft_sg_moving {
    loaded:  [
        ohshima_freight_hovercraft_ss_empty_moving,
        ohshima_freight_hovercraft_ss_loaded_1_moving,
        ohshima_freight_hovercraft_ss_loaded_2_moving,
        ohshima_freight_hovercraft_ss_loaded_3_moving,
        ohshima_freight_hovercraft_ss_loaded_4_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        ohshima_freight_hovercraft_ss_empty_moving,
    ];
}

spritegroup ohshima_freight_hovercraft_sg_not_moving {
    loaded:  [
        ohshima_freight_hovercraft_ss_empty_not_moving,
        ohshima_freight_hovercraft_ss_loaded_1_not_moving,
        ohshima_freight_hovercraft_ss_loaded_2_not_moving,
        ohshima_freight_hovercraft_ss_loaded_3_not_moving,
        ohshima_freight_hovercraft_ss_loaded_4_not_moving,
    ];
    loading: [
        ohshima_freight_hovercraft_ss_loading_0_not_moving,
        ohshima_freight_hovercraft_ss_loaded_1_not_moving,
        ohshima_freight_hovercraft_ss_loaded_2_not_moving,
        ohshima_freight_hovercraft_ss_loaded_3_not_moving,
        ohshima_freight_hovercraft_ss_loaded_4_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_graphics, current_speed) {
    0: return ohshima_freight_hovercraft_sg_not_moving;
    return ohshima_freight_hovercraft_sg_moving;
}

// buy menu graphics

template spriteset_template_purchase_ohshima_freight_hovercraft() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [668, 21, 42, 22, -21, -10]
}

spriteset(ohshima_freight_hovercraft_ss_purchase, "src/graphics/ohshima_freight_hovercraft_0.png") {
  spriteset_template_purchase_ohshima_freight_hovercraft()
}

spritegroup ohshima_freight_hovercraft_sg_purchase {
    loaded:  [
        ohshima_freight_hovercraft_ss_purchase,
    ];
    loading: [
        ohshima_freight_hovercraft_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 129;
        1..25 : 121;
        26..50 : 114;
        51..75 : 107;
        76..100 : 99;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 192;
        1..25 : 181;
        26..50 : 170;
        51..75 : 159;
        76..100 : 148;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 252;
        1..25 : 240;
        26..50 : 226;
        51..75 : 211;
        76..100 : 196;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_0;
    1: ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_1;
    2: ohshima_freight_hovercraft_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_purchase_speed, param_adjust_ship_speed) {
    0: 99;
    1: 148;
    2: 196;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 30;
    return 30;
}
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_cargo_capacity, cargo_type_in_veh) {
    
    ohshima_freight_hovercraft_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 30;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, ohshima_freight_hovercraft_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, ohshima_freight_hovercraft, 150) {
    property {
        name:                           string(STR_NAME_ohshima_freight_hovercraft, string(STR_NAME_SUFFIX_HOVERCRAFT));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1966,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 30;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          46.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    24;
        running_cost_factor:            39;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_PIECE_GOODS,CC_LIQUID,CC_ARMOURED,CC_EXPRESS);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [MAIL,FRUT,WATR];
        cargo_disallow_refit:           [FISH,LVST,OIL_,TOUR,WOOD];
        default_cargo_type:             GOOD;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          ohshima_freight_hovercraft_switch_speed_varies_with_load_amount;
        purchase_speed:                 ohshima_freight_hovercraft_switch_purchase_speed;
        cargo_capacity:                 ohshima_freight_hovercraft_switch_cargo_capacity;
        purchase_cargo_capacity:        ohshima_freight_hovercraft_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_HOVERCRAFT), string(STR_EMPTY));
        cargo_subtype_text:             ohshima_freight_hovercraft_switch_cargo_subtype_text;
        default:                        ohshima_freight_hovercraft_switch_graphics;
        purchase:                       ohshima_freight_hovercraft_sg_purchase;
        create_effect:                  ohshima_freight_hovercraft_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, ohshima_freight_hovercraft, 150) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Ohshima Freight [Hovercraft] -- 


// -- begin Shannon [Freighter] -- 


// graphics
template spriteset_template_shannon_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(shannon_freighter_ss_not_loaded_not_moving_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(10)
    }
    spriteset(shannon_freighter_ss_not_loaded_moving_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(110)
    }
    spriteset(shannon_freighter_ss_loading_0_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(210)
    }
    spriteset(shannon_freighter_ss_loading_1_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(310)
    }
    spriteset(shannon_freighter_ss_loading_2_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(410)
    }
    spriteset(shannon_freighter_ss_loading_3_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(510)
    }
    spriteset(shannon_freighter_ss_loaded_not_moving_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(610)
    }
    spriteset(shannon_freighter_ss_loaded_moving_0, "src/graphics/shannon_freighter_0.png") {
      spriteset_template_shannon_freighter(710)
    }

    spritegroup shannon_freighter_sg_moving_0 {
        loaded:  [
            shannon_freighter_ss_not_loaded_moving_0,
            shannon_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            shannon_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup shannon_freighter_sg_not_moving_0 {
        loaded:  [
            shannon_freighter_ss_not_loaded_not_moving_0,
            shannon_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            shannon_freighter_ss_loading_0_0,
            shannon_freighter_ss_loading_1_0,
            shannon_freighter_ss_loading_2_0,
            shannon_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, shannon_freighter_switch_graphics_0, current_speed) {
        0: return shannon_freighter_sg_not_moving_0;
        return shannon_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, shannon_freighter_switch_graphics_random_0) {
        
            1: return shannon_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, shannon_freighter_switch_graphics, build_year) {
    
        0..5000000:shannon_freighter_switch_graphics_random_0;
    
    return shannon_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_shannon_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(shannon_freighter_ss_purchase, "src/graphics/shannon_freighter_0.png") {
  spriteset_template_purchase_shannon_freighter()
}

spritegroup shannon_freighter_sg_purchase {
    loaded:  [
        shannon_freighter_ss_purchase,
    ];
    loading: [
        shannon_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, shannon_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 55;
        1..25 : 54;
        26..50 : 52;
        51..75 : 51;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, shannon_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 81;
        1..25 : 80;
        26..50 : 78;
        51..75 : 76;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, shannon_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 108;
        1..25 : 106;
        26..50 : 103;
        51..75 : 101;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, shannon_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: shannon_freighter_switch_speed_varies_with_load_amount_0;
    1: shannon_freighter_switch_speed_varies_with_load_amount_1;
    2: shannon_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, shannon_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, shannon_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1120;
}
switch (FEAT_SHIPS, SELF, shannon_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    shannon_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, shannon_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, shannon_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1120;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, shannon_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 2, 0, 29), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, shannon_freighter, 1135) {
    property {
        name:                           string(STR_NAME_shannon_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1936,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1120;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    84;
        running_cost_factor:            196;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          shannon_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 shannon_freighter_switch_purchase_speed;
        cargo_capacity:                 shannon_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        shannon_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             shannon_freighter_switch_cargo_subtype_text;
        default:                        shannon_freighter_switch_graphics;
        purchase:                       shannon_freighter_sg_purchase;
        create_effect:                  shannon_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, shannon_freighter, 1135) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Shannon [Freighter] -- 


// -- begin Meteor [Freighter] -- 


// graphics
template spriteset_template_meteor_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -78, -21, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        71,          -30, -21, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -78, -24, ANIM]
    [620,       y,          138,        48,          -68, -21, ANIM]
    [762,       y,          113,        71,          -32, -21, ANIM]
}


    spriteset(meteor_freighter_ss_not_loaded_not_moving_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(10)
    }
    spriteset(meteor_freighter_ss_not_loaded_moving_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(110)
    }
    spriteset(meteor_freighter_ss_loading_0_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(210)
    }
    spriteset(meteor_freighter_ss_loading_1_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(310)
    }
    spriteset(meteor_freighter_ss_loading_2_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(410)
    }
    spriteset(meteor_freighter_ss_loading_3_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(510)
    }
    spriteset(meteor_freighter_ss_loaded_not_moving_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(610)
    }
    spriteset(meteor_freighter_ss_loaded_moving_0, "src/graphics/meteor_freighter_0.png") {
      spriteset_template_meteor_freighter(710)
    }

    spritegroup meteor_freighter_sg_moving_0 {
        loaded:  [
            meteor_freighter_ss_not_loaded_moving_0,
            meteor_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            meteor_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup meteor_freighter_sg_not_moving_0 {
        loaded:  [
            meteor_freighter_ss_not_loaded_not_moving_0,
            meteor_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            meteor_freighter_ss_loading_0_0,
            meteor_freighter_ss_loading_1_0,
            meteor_freighter_ss_loading_2_0,
            meteor_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, meteor_freighter_switch_graphics_0, current_speed) {
        0: return meteor_freighter_sg_not_moving_0;
        return meteor_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, meteor_freighter_switch_graphics_random_0) {
        
            1: return meteor_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, meteor_freighter_switch_graphics, build_year) {
    
        0..5000000:meteor_freighter_switch_graphics_random_0;
    
    return meteor_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_meteor_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [663, 21, 51, 22, -25, -10, ANIM]
}

spriteset(meteor_freighter_ss_purchase, "src/graphics/meteor_freighter_0.png") {
  spriteset_template_purchase_meteor_freighter()
}

spritegroup meteor_freighter_sg_purchase {
    loaded:  [
        meteor_freighter_ss_purchase,
    ];
    loading: [
        meteor_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, meteor_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, meteor_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, meteor_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, meteor_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: meteor_freighter_switch_speed_varies_with_load_amount_0;
    1: meteor_freighter_switch_speed_varies_with_load_amount_1;
    2: meteor_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, meteor_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, meteor_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 100;
}
switch (FEAT_SHIPS, SELF, meteor_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    meteor_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, meteor_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, meteor_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 100;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, meteor_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 4, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, meteor_freighter, 1180) {
    property {
        name:                           string(STR_NAME_meteor_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1946,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 100;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    12;
        running_cost_factor:            34;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          meteor_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 meteor_freighter_switch_purchase_speed;
        cargo_capacity:                 meteor_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        meteor_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FREIGHTER), string(STR_EMPTY));
        cargo_subtype_text:             meteor_freighter_switch_cargo_subtype_text;
        default:                        meteor_freighter_switch_graphics;
        purchase:                       meteor_freighter_sg_purchase;
        create_effect:                  meteor_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, meteor_freighter, 1180) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Meteor [Freighter] -- 


// -- begin Whitgift [Freight Barge] -- 


// graphics
template spriteset_template_whitgift_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -78, -21, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        71,          -30, -21, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -78, -24, ANIM]
    [620,       y,          138,        48,          -68, -21, ANIM]
    [762,       y,          113,        71,          -32, -21, ANIM]
}


    spriteset(whitgift_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(10)
    }
    spriteset(whitgift_freight_barge_ss_not_loaded_moving_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(110)
    }
    spriteset(whitgift_freight_barge_ss_loading_0_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(210)
    }
    spriteset(whitgift_freight_barge_ss_loading_1_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(310)
    }
    spriteset(whitgift_freight_barge_ss_loading_2_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(410)
    }
    spriteset(whitgift_freight_barge_ss_loading_3_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(510)
    }
    spriteset(whitgift_freight_barge_ss_loaded_not_moving_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(610)
    }
    spriteset(whitgift_freight_barge_ss_loaded_moving_0, "src/graphics/whitgift_freight_barge_0.png") {
      spriteset_template_whitgift_freight_barge(710)
    }

    spritegroup whitgift_freight_barge_sg_moving_0 {
        loaded:  [
            whitgift_freight_barge_ss_not_loaded_moving_0,
            whitgift_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            whitgift_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup whitgift_freight_barge_sg_not_moving_0 {
        loaded:  [
            whitgift_freight_barge_ss_not_loaded_not_moving_0,
            whitgift_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            whitgift_freight_barge_ss_loading_0_0,
            whitgift_freight_barge_ss_loading_1_0,
            whitgift_freight_barge_ss_loading_2_0,
            whitgift_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_graphics_0, current_speed) {
        0: return whitgift_freight_barge_sg_not_moving_0;
        return whitgift_freight_barge_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_graphics_random_0) {
        
            1: return whitgift_freight_barge_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_graphics, build_year) {
    
        0..5000000:whitgift_freight_barge_switch_graphics_random_0;
    
    return whitgift_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_whitgift_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [667, 21, 44, 22, -22, -10, ANIM]
}

spriteset(whitgift_freight_barge_ss_purchase, "src/graphics/whitgift_freight_barge_0.png") {
  spriteset_template_purchase_whitgift_freight_barge()
}

spritegroup whitgift_freight_barge_sg_purchase {
    loaded:  [
        whitgift_freight_barge_ss_purchase,
    ];
    loading: [
        whitgift_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: whitgift_freight_barge_switch_speed_varies_with_load_amount_0;
    1: whitgift_freight_barge_switch_speed_varies_with_load_amount_1;
    2: whitgift_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 65;
}
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    whitgift_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 65;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, whitgift_freight_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 6, 0, 8), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, whitgift_freight_barge, 1160) {
    property {
        name:                           string(STR_NAME_whitgift_freight_barge, string(STR_NAME_SUFFIX_FREIGHT_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_DIESEL;
        introduction_date:              date(1850,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 65;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    4;
        running_cost_factor:            22;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          whitgift_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 whitgift_freight_barge_switch_purchase_speed;
        cargo_capacity:                 whitgift_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        whitgift_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             whitgift_freight_barge_switch_cargo_subtype_text;
        default:                        whitgift_freight_barge_switch_graphics;
        purchase:                       whitgift_freight_barge_sg_purchase;
        create_effect:                  whitgift_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, whitgift_freight_barge, 1160) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Whitgift [Freight Barge] -- 


// -- begin Kagoshima [Tanker] -- 


// graphics
template spriteset_template_kagoshima_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -46, ANIM]
    [60,        y,          113,        66,          -61, -30, ANIM]
    [186,       y,          138,        48,          -50, -29, ANIM]
    [328,       y,          113,        66,          -10, -29, ANIM]
    [454,       y,          28,         89,          -14, -58, ANIM]
    [494,       y,          113,        66,          -60, -30, ANIM]
    [620,       y,          138,        48,          -50, -29, ANIM]
    [762,       y,          113,        66,          -6, -23, ANIM]
}

spriteset(kagoshima_tanker_ss_not_loaded_not_moving, "src/graphics/kagoshima_tanker_0.png") {
  spriteset_template_kagoshima_tanker(10)
}
spriteset(kagoshima_tanker_ss_not_loaded_moving, "src/graphics/kagoshima_tanker_0.png") {
  spriteset_template_kagoshima_tanker(110)
}
spriteset(kagoshima_tanker_ss_loaded_not_moving, "src/graphics/kagoshima_tanker_0.png") {
  spriteset_template_kagoshima_tanker(210)
}
spriteset(kagoshima_tanker_ss_loaded_moving, "src/graphics/kagoshima_tanker_0.png") {
  spriteset_template_kagoshima_tanker(310)
}

spritegroup kagoshima_tanker_sg_moving {
    loaded:  [
        kagoshima_tanker_ss_not_loaded_moving,
        kagoshima_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        kagoshima_tanker_ss_loaded_moving,
    ];
}

spritegroup kagoshima_tanker_sg_not_moving {
    loaded:  [
        kagoshima_tanker_ss_not_loaded_not_moving,
        kagoshima_tanker_ss_loaded_not_moving,
    ];
    loading: [
        kagoshima_tanker_ss_not_loaded_not_moving,
        kagoshima_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_graphics, current_speed) {
    0: return kagoshima_tanker_sg_not_moving;
    return kagoshima_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_kagoshima_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 115, 22, -57, -10]
}

spriteset(kagoshima_tanker_ss_purchase, "src/graphics/kagoshima_tanker_0.png") {
  spriteset_template_purchase_kagoshima_tanker()
}

spritegroup kagoshima_tanker_sg_purchase {
    loaded:  [
        kagoshima_tanker_ss_purchase,
    ];
    loading: [
        kagoshima_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 55;
        1..25 : 54;
        26..50 : 52;
        51..75 : 51;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 81;
        1..25 : 80;
        26..50 : 78;
        51..75 : 76;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 108;
        1..25 : 106;
        26..50 : 103;
        51..75 : 101;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: kagoshima_tanker_switch_speed_varies_with_load_amount_0;
    1: kagoshima_tanker_switch_speed_varies_with_load_amount_1;
    2: kagoshima_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 750;
}
switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    kagoshima_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, kagoshima_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 750;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, kagoshima_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 10, 0, 21), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, kagoshima_tanker, 1260) {
    property {
        name:                           string(STR_NAME_kagoshima_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1948,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 750;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    70;
        running_cost_factor:            171;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          kagoshima_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 kagoshima_tanker_switch_purchase_speed;
        cargo_capacity:                 kagoshima_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        kagoshima_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             kagoshima_tanker_switch_cargo_subtype_text;
        default:                        kagoshima_tanker_switch_graphics;
        purchase:                       kagoshima_tanker_sg_purchase;
        create_effect:                  kagoshima_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, kagoshima_tanker, 1260) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Kagoshima [Tanker] -- 


// -- begin Volgoneft 540 [Tanker Barge] -- 


// graphics
template spriteset_template_volgoneft_five_forty_tanker_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        66,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        66,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        66,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        66,          -9, -28, ANIM]
}

spriteset(volgoneft_five_forty_tanker_barge_ss_not_loaded_not_moving, "src/graphics/volgoneft_five_forty_tanker_barge_0.png") {
  spriteset_template_volgoneft_five_forty_tanker_barge(10)
}
spriteset(volgoneft_five_forty_tanker_barge_ss_not_loaded_moving, "src/graphics/volgoneft_five_forty_tanker_barge_0.png") {
  spriteset_template_volgoneft_five_forty_tanker_barge(110)
}
spriteset(volgoneft_five_forty_tanker_barge_ss_loaded_not_moving, "src/graphics/volgoneft_five_forty_tanker_barge_0.png") {
  spriteset_template_volgoneft_five_forty_tanker_barge(210)
}
spriteset(volgoneft_five_forty_tanker_barge_ss_loaded_moving, "src/graphics/volgoneft_five_forty_tanker_barge_0.png") {
  spriteset_template_volgoneft_five_forty_tanker_barge(310)
}

spritegroup volgoneft_five_forty_tanker_barge_sg_moving {
    loaded:  [
        volgoneft_five_forty_tanker_barge_ss_not_loaded_moving,
        volgoneft_five_forty_tanker_barge_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        volgoneft_five_forty_tanker_barge_ss_loaded_moving,
    ];
}

spritegroup volgoneft_five_forty_tanker_barge_sg_not_moving {
    loaded:  [
        volgoneft_five_forty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_five_forty_tanker_barge_ss_loaded_not_moving,
    ];
    loading: [
        volgoneft_five_forty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_five_forty_tanker_barge_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_graphics, current_speed) {
    0: return volgoneft_five_forty_tanker_barge_sg_not_moving;
    return volgoneft_five_forty_tanker_barge_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_volgoneft_five_forty_tanker_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 25, 109, 22, -54, -10]
}

spriteset(volgoneft_five_forty_tanker_barge_ss_purchase, "src/graphics/volgoneft_five_forty_tanker_barge_0.png") {
  spriteset_template_purchase_volgoneft_five_forty_tanker_barge()
}

spritegroup volgoneft_five_forty_tanker_barge_sg_purchase {
    loaded:  [
        volgoneft_five_forty_tanker_barge_ss_purchase,
    ];
    loading: [
        volgoneft_five_forty_tanker_barge_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_0;
    1: volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_1;
    2: volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 540;
}
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    volgoneft_five_forty_tanker_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 540;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, volgoneft_five_forty_tanker_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 12, 0, 19), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, volgoneft_five_forty_tanker_barge, 2255) {
    property {
        name:                           string(STR_NAME_volgoneft_five_forty_tanker_barge, string(STR_NAME_SUFFIX_TANKER_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1885,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 540;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    25;
        running_cost_factor:            95;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          volgoneft_five_forty_tanker_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 volgoneft_five_forty_tanker_barge_switch_purchase_speed;
        cargo_capacity:                 volgoneft_five_forty_tanker_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        volgoneft_five_forty_tanker_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_TANKER_COASTAL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             volgoneft_five_forty_tanker_barge_switch_cargo_subtype_text;
        default:                        volgoneft_five_forty_tanker_barge_switch_graphics;
        purchase:                       volgoneft_five_forty_tanker_barge_sg_purchase;
        create_effect:                  volgoneft_five_forty_tanker_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, volgoneft_five_forty_tanker_barge, 2255) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Volgoneft 540 [Tanker Barge] -- 




// -- begin Mako [Fast Ferry] -- 


// graphics

    template spriteset_template_mako_catamaran_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -41, ANIM]
        [60,        y,          113,        66,          -67, -25, ANIM]
        [186,       y,          138,        48,          -59, -29, ANIM]
        [328,       y,          113,        66,          -15, -26, ANIM]
        [454,       y,          28,   89,          -14, -45, ANIM]
        [494,       y,          113,        66,          -67, -26, ANIM]
        [620,       y,          138,        48,          -59, -29, ANIM]
        [762,       y,          113,        66,          -15, -25, ANIM]
    }



    spriteset(mako_catamaran_ferry_ss_not_loaded_not_moving_0, "src/graphics/mako_catamaran_ferry_0.png") {
      spriteset_template_mako_catamaran_ferry(10)
    }
    spriteset(mako_catamaran_ferry_ss_not_loaded_moving_0, "src/graphics/mako_catamaran_ferry_0.png") {
      spriteset_template_mako_catamaran_ferry(110)
    }
    spriteset(mako_catamaran_ferry_ss_loaded_not_moving_0, "src/graphics/mako_catamaran_ferry_0.png") {
      spriteset_template_mako_catamaran_ferry(510)
    }
    spriteset(mako_catamaran_ferry_ss_loaded_moving_0, "src/graphics/mako_catamaran_ferry_0.png") {
      spriteset_template_mako_catamaran_ferry(610)
    }

    spritegroup mako_catamaran_ferry_sg_moving_0 {
        loaded:  [
            mako_catamaran_ferry_ss_not_loaded_moving_0,
            mako_catamaran_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            mako_catamaran_ferry_ss_not_loaded_moving_0,
            mako_catamaran_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup mako_catamaran_ferry_sg_not_moving_0 {
        loaded:  [
            mako_catamaran_ferry_ss_not_loaded_not_moving_0,
            mako_catamaran_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            mako_catamaran_ferry_ss_not_loaded_not_moving_0,
            mako_catamaran_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_graphics_0, current_speed) {
        0: return mako_catamaran_ferry_sg_not_moving_0;
        return mako_catamaran_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_graphics_random_0) {
        
            1: return mako_catamaran_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_graphics, build_year) {
    
        0..5000000:mako_catamaran_ferry_switch_graphics_random_0;
    
    return mako_catamaran_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_mako_catamaran_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 85, 22, -42, -10, ANIM]
}

spriteset(mako_catamaran_ferry_ss_purchase, "src/graphics/mako_catamaran_ferry_0.png") {
  spriteset_template_purchase_mako_catamaran_ferry()
}

spritegroup mako_catamaran_ferry_sg_purchase {
    loaded:  [
        mako_catamaran_ferry_ss_purchase,
    ];
    loading: [
        mako_catamaran_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 129;
        1..25 : 129;
        26..50 : 129;
        51..75 : 129;
        76..100 : 129;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 193;
        1..25 : 193;
        26..50 : 193;
        51..75 : 193;
        76..100 : 193;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 252;
        1..25 : 252;
        26..50 : 252;
        51..75 : 252;
        76..100 : 252;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: mako_catamaran_ferry_switch_speed_varies_with_load_amount_0;
    1: mako_catamaran_ferry_switch_speed_varies_with_load_amount_1;
    2: mako_catamaran_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 129;
    1: 193;
    2: 252;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 760;
    bitmask(CC_MAIL): return 760;
    return 320;
}
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    mako_catamaran_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 760;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, mako_catamaran_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, mako_catamaran_ferry, 100) {
    property {
        name:                           string(STR_NAME_mako_catamaran_ferry, string(STR_NAME_SUFFIX_FAST_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(2008,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 760;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          60.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    160;
        running_cost_factor:            250;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   26; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   30;
    }
    graphics {
        speed:                          mako_catamaran_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 mako_catamaran_ferry_switch_purchase_speed;
        cargo_capacity:                 mako_catamaran_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        mako_catamaran_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CATAMARAN_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,760,320));
        cargo_subtype_text:             mako_catamaran_ferry_switch_cargo_subtype_text;
        default:                        mako_catamaran_ferry_switch_graphics;
        purchase:                       mako_catamaran_ferry_sg_purchase;
        create_effect:                  mako_catamaran_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, mako_catamaran_ferry, 100) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Mako [Fast Ferry] -- 




// -- begin Duckitt 400 [Hovercraft] -- 


// graphics

    template spriteset_template_duckitt_400_hovercraft(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          36,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -82, -24, ANIM]
        [186,       y,          138,        48,          -69, -21, ANIM]
        [328,       y,          113,        66,          -29, -24, ANIM]
        [454,       y,          36,   89,          -14, -42, ANIM]
        [494,       y,          113,        66,          -80, -26, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -29, -24, ANIM]
    }



    spriteset(duckitt_400_hovercraft_ss_not_loaded_not_moving_0, "src/graphics/duckitt_400_hovercraft_0.png") {
      spriteset_template_duckitt_400_hovercraft(10)
    }
    spriteset(duckitt_400_hovercraft_ss_not_loaded_moving_0, "src/graphics/duckitt_400_hovercraft_0.png") {
      spriteset_template_duckitt_400_hovercraft(110)
    }
    spriteset(duckitt_400_hovercraft_ss_loaded_not_moving_0, "src/graphics/duckitt_400_hovercraft_0.png") {
      spriteset_template_duckitt_400_hovercraft(510)
    }
    spriteset(duckitt_400_hovercraft_ss_loaded_moving_0, "src/graphics/duckitt_400_hovercraft_0.png") {
      spriteset_template_duckitt_400_hovercraft(610)
    }

    spritegroup duckitt_400_hovercraft_sg_moving_0 {
        loaded:  [
            duckitt_400_hovercraft_ss_not_loaded_moving_0,
            duckitt_400_hovercraft_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            duckitt_400_hovercraft_ss_not_loaded_moving_0,
            duckitt_400_hovercraft_ss_loaded_moving_0,
        ];
    }

    spritegroup duckitt_400_hovercraft_sg_not_moving_0 {
        loaded:  [
            duckitt_400_hovercraft_ss_not_loaded_not_moving_0,
            duckitt_400_hovercraft_ss_loaded_not_moving_0,
        ];
        loading: [
            duckitt_400_hovercraft_ss_not_loaded_not_moving_0,
            duckitt_400_hovercraft_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_graphics_0, current_speed) {
        0: return duckitt_400_hovercraft_sg_not_moving_0;
        return duckitt_400_hovercraft_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_graphics_random_0) {
        
            1: return duckitt_400_hovercraft_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_graphics, build_year) {
    
        0..5000000:duckitt_400_hovercraft_switch_graphics_random_0;
    
    return duckitt_400_hovercraft_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_duckitt_400_hovercraft() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [660, 21, 54, 22, -27, -10, ANIM]
}

spriteset(duckitt_400_hovercraft_ss_purchase, "src/graphics/duckitt_400_hovercraft_0.png") {
  spriteset_template_purchase_duckitt_400_hovercraft()
}

spritegroup duckitt_400_hovercraft_sg_purchase {
    loaded:  [
        duckitt_400_hovercraft_ss_purchase,
    ];
    loading: [
        duckitt_400_hovercraft_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 151;
        1..25 : 151;
        26..50 : 151;
        51..75 : 151;
        76..100 : 151;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 225;
        1..25 : 225;
        26..50 : 225;
        51..75 : 225;
        76..100 : 225;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 252;
        1..25 : 252;
        26..50 : 252;
        51..75 : 252;
        76..100 : 252;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: duckitt_400_hovercraft_switch_speed_varies_with_load_amount_0;
    1: duckitt_400_hovercraft_switch_speed_varies_with_load_amount_1;
    2: duckitt_400_hovercraft_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_purchase_speed, param_adjust_ship_speed) {
    0: 151;
    1: 225;
    2: 252;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 400;
    bitmask(CC_MAIL): return 400;
    return 100;
}
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_cargo_capacity, cargo_type_in_veh) {
    
    duckitt_400_hovercraft_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 400;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, duckitt_400_hovercraft_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, duckitt_400_hovercraft, 1060) {
    property {
        name:                           string(STR_NAME_duckitt_400_hovercraft, string(STR_NAME_SUFFIX_HOVERCRAFT));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1968,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 400;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          70.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    90;
        running_cost_factor:            242;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  18;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          duckitt_400_hovercraft_switch_speed_varies_with_load_amount;
        purchase_speed:                 duckitt_400_hovercraft_switch_purchase_speed;
        cargo_capacity:                 duckitt_400_hovercraft_switch_cargo_capacity;
        purchase_cargo_capacity:        duckitt_400_hovercraft_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_HOVERCRAFT_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,400,100));
        cargo_subtype_text:             duckitt_400_hovercraft_switch_cargo_subtype_text;
        default:                        duckitt_400_hovercraft_switch_graphics;
        purchase:                       duckitt_400_hovercraft_sg_purchase;
        create_effect:                  duckitt_400_hovercraft_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, duckitt_400_hovercraft, 1060) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Duckitt 400 [Hovercraft] -- 


// -- begin Nagasaki [Tanker] -- 


// graphics
template spriteset_template_nagasaki_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(nagasaki_tanker_ss_not_loaded_not_moving, "src/graphics/nagasaki_tanker_0.png") {
  spriteset_template_nagasaki_tanker(10)
}
spriteset(nagasaki_tanker_ss_not_loaded_moving, "src/graphics/nagasaki_tanker_0.png") {
  spriteset_template_nagasaki_tanker(110)
}
spriteset(nagasaki_tanker_ss_loaded_not_moving, "src/graphics/nagasaki_tanker_0.png") {
  spriteset_template_nagasaki_tanker(210)
}
spriteset(nagasaki_tanker_ss_loaded_moving, "src/graphics/nagasaki_tanker_0.png") {
  spriteset_template_nagasaki_tanker(310)
}

spritegroup nagasaki_tanker_sg_moving {
    loaded:  [
        nagasaki_tanker_ss_not_loaded_moving,
        nagasaki_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        nagasaki_tanker_ss_loaded_moving,
    ];
}

spritegroup nagasaki_tanker_sg_not_moving {
    loaded:  [
        nagasaki_tanker_ss_not_loaded_not_moving,
        nagasaki_tanker_ss_loaded_not_moving,
    ];
    loading: [
        nagasaki_tanker_ss_not_loaded_not_moving,
        nagasaki_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_graphics, current_speed) {
    0: return nagasaki_tanker_sg_not_moving;
    return nagasaki_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_nagasaki_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(nagasaki_tanker_ss_purchase, "src/graphics/nagasaki_tanker_0.png") {
  spriteset_template_purchase_nagasaki_tanker()
}

spritegroup nagasaki_tanker_sg_purchase {
    loaded:  [
        nagasaki_tanker_ss_purchase,
    ];
    loading: [
        nagasaki_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 55;
        1..25 : 54;
        26..50 : 52;
        51..75 : 51;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 81;
        1..25 : 80;
        26..50 : 78;
        51..75 : 76;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 108;
        1..25 : 106;
        26..50 : 103;
        51..75 : 101;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: nagasaki_tanker_switch_speed_varies_with_load_amount_0;
    1: nagasaki_tanker_switch_speed_varies_with_load_amount_1;
    2: nagasaki_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1200;
}
switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    nagasaki_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, nagasaki_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1200;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, nagasaki_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 2, 0, 29), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, nagasaki_tanker, 1265) {
    property {
        name:                           string(STR_NAME_nagasaki_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1951,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1200;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    88;
        running_cost_factor:            196;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          nagasaki_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 nagasaki_tanker_switch_purchase_speed;
        cargo_capacity:                 nagasaki_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        nagasaki_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             nagasaki_tanker_switch_cargo_subtype_text;
        default:                        nagasaki_tanker_switch_graphics;
        purchase:                       nagasaki_tanker_sg_purchase;
        create_effect:                  nagasaki_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, nagasaki_tanker, 1265) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Nagasaki [Tanker] -- 


// -- begin Olympic [Log Tug] -- 


// graphics

    
        spriteset(olympic_log_tug_ss_not_loaded_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  10, 28, 89,  -13,  -6, ANIM]
            [60,  10, 113, 66, -124,   5, ANIM]
            [186, 10, 138, 48, -124, -28, ANIM]
            [328, 10, 113, 66,  -76, -37, ANIM]
            [454, 10, 28, 89,  -14, -76, ANIM]
            [494, 10, 113, 66,  -34, -38, ANIM]
            [620, 10, 138, 48,  -15, -28, ANIM]
            [762, 10, 113, 66,   15,   6, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_1_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  110, 28, 89,  -13, -14, ANIM]
            [60,  110, 113, 66, -118,   1, ANIM]
            [186, 110, 138, 48, -112, -28, ANIM]
            [328, 110, 113, 66,  -64, -32, ANIM]
            [454, 110, 28, 89,  -14, -65, ANIM]
            [494, 110, 113, 66,  -45, -32, ANIM]
            [620, 110, 138, 48,  -26, -28, ANIM]
            [762, 110, 113, 66,    2,   0, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_2_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  210, 28, 89,  -13, -21, ANIM]
            [60,  210, 113, 66, -107,  -4, ANIM]
            [186, 210, 138, 48, -100, -28, ANIM]
            [328, 210, 113, 66,  -59, -30, ANIM]
            [454, 210, 28, 89,  -14, -57, ANIM]
            [494, 210, 113, 66,  -53, -30, ANIM]
            [620, 210, 138, 48,  -49, -28, ANIM]
            [762, 210, 113, 66,   -4,  -4, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_3_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  310, 28, 89,  -13, -29, ANIM]
            [60,  310, 113, 66, -102,  -8, ANIM]
            [186, 310, 138, 48,  -84, -28, ANIM]
            [328, 310, 113, 66,  -48, -26, ANIM]
            [454, 310, 28, 89,  -14, -47, ANIM]
            [494, 310, 113, 66,  -60, -25, ANIM]
            [620, 310, 138, 48,  -50, -28, ANIM]
            [762, 310, 113, 66,   -7,  -6, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_4_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  410, 28, 89,  -13, -35, ANIM]
            [60,  410, 113, 66,  -97, -10, ANIM]
            [186, 410, 138, 48,  -69, -28, ANIM]
            [328, 410, 113, 66,  -45, -22, ANIM]
            [454, 410, 28, 89,  -14, -45, ANIM]
            [494, 410, 113, 66,  -66, -22, ANIM]
            [620, 410, 138, 48,  -61, -28, ANIM]
            [762, 410, 113, 66,  -15, -10, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_5_not_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  510, 28, 89,  -13, -41, ANIM]
            [60,  510, 113, 66,  -90, -13, ANIM]
            [186, 510, 138, 48,  -65, -28, ANIM]
            [328, 510, 113, 66,  -40, -19, ANIM]
            [454, 510, 28, 89,  -14, -42, ANIM]
            [494, 510, 113, 66,  -75, -17, ANIM]
            [620, 510, 138, 48,  -68, -28, ANIM]
            [762, 510, 113, 66,  -22, -13, ANIM]
        }
    

    
        spriteset(olympic_log_tug_ss_not_loaded_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  610, 28, 89,  -13,  -6, ANIM]
            [60,  610, 113, 66, -124,   5, ANIM]
            [186, 610, 138, 48, -124, -28, ANIM]
            [328, 610, 113, 66,  -76, -37, ANIM]
            [454, 610, 28, 89,  -14, -76, ANIM]
            [494, 610, 113, 66,  -34, -38, ANIM]
            [620, 610, 138, 48,  -15, -28, ANIM]
            [762, 610, 113, 66,   15,   6, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_1_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  710, 28, 89,  -13, -14, ANIM]
            [60,  710, 113, 66, -118,   1, ANIM]
            [186, 710, 138, 48, -112, -28, ANIM]
            [328, 710, 113, 66,  -64, -32, ANIM]
            [454, 710, 28, 89,  -14, -65, ANIM]
            [494, 710, 113, 66,  -45, -32, ANIM]
            [620, 710, 138, 48,  -26, -28, ANIM]
            [762, 710, 113, 66,    2,   0, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_2_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  810, 28, 89,  -13, -21, ANIM]
            [60,  810, 113, 66, -107,  -4, ANIM]
            [186, 810, 138, 48, -100, -28, ANIM]
            [328, 810, 113, 66,  -59, -30, ANIM]
            [454, 810, 28, 89,  -14, -57, ANIM]
            [494, 810, 113, 66,  -53, -30, ANIM]
            [620, 810, 138, 48,  -49, -28, ANIM]
            [762, 810, 113, 66,   -4,  -4, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_3_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  910, 28, 89,  -13, -29, ANIM]
            [60,  910, 113, 66, -102,  -8, ANIM]
            [186, 910, 138, 48,  -84, -28, ANIM]
            [328, 910, 113, 66,  -48, -26, ANIM]
            [454, 910, 28, 89,  -14, -47, ANIM]
            [494, 910, 113, 66,  -60, -25, ANIM]
            [620, 910, 138, 48,  -50, -28, ANIM]
            [762, 910, 113, 66,   -7,  -6, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_4_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  1010, 28, 89,  -13, -35, ANIM]
            [60,  1010, 113, 66,  -97, -10, ANIM]
            [186, 1010, 138, 48,  -69, -28, ANIM]
            [328, 1010, 113, 66,  -45, -22, ANIM]
            [454, 1010, 28, 89,  -14, -45, ANIM]
            [494, 1010, 113, 66,  -66, -22, ANIM]
            [620, 1010, 138, 48,  -61, -28, ANIM]
            [762, 1010, 113, 66,  -15, -10, ANIM]
        }
        spriteset(olympic_log_tug_ss_load_5_moving, "src/graphics/olympic_log_tug_0.png") {
            [20,  1110, 28, 89,  -13, -41, ANIM]
            [60,  1110, 113, 66,  -90, -13, ANIM]
            [186, 1110, 138, 48,  -65, -28, ANIM]
            [328, 1110, 113, 66,  -40, -19, ANIM]
            [454, 1110, 28, 89,  -14, -42, ANIM]
            [494, 1110, 113, 66,  -75, -17, ANIM]
            [620, 1110, 138, 48,  -68, -28, ANIM]
            [762, 1110, 113, 66,  -22, -13, ANIM]
        }
    


spritegroup olympic_log_tug_sg_refit_0_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_moving,
        olympic_log_tug_ss_load_1_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        olympic_log_tug_ss_not_loaded_moving,
    ];
}

spritegroup olympic_log_tug_sg_refit_0_not_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
    ];
    loading: [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_graphics_refit_0, current_speed) {
    0: return olympic_log_tug_sg_refit_0_not_moving;
    return olympic_log_tug_sg_refit_0_moving;
}

spritegroup olympic_log_tug_sg_refit_1_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_moving,
        olympic_log_tug_ss_load_1_moving,
        olympic_log_tug_ss_load_2_moving,
        olympic_log_tug_ss_load_3_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        olympic_log_tug_ss_not_loaded_moving,
    ];
}

spritegroup olympic_log_tug_sg_refit_1_not_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
        olympic_log_tug_ss_load_2_not_moving,
        olympic_log_tug_ss_load_3_not_moving,
    ];
    loading: [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
        olympic_log_tug_ss_load_2_not_moving,
        olympic_log_tug_ss_load_3_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_graphics_refit_1, current_speed) {
    0: return olympic_log_tug_sg_refit_1_not_moving;
    return olympic_log_tug_sg_refit_1_moving;
}

spritegroup olympic_log_tug_sg_refit_2_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_moving,
        olympic_log_tug_ss_load_1_moving,
        olympic_log_tug_ss_load_2_moving,
        olympic_log_tug_ss_load_3_moving,
        olympic_log_tug_ss_load_4_moving,
        olympic_log_tug_ss_load_5_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        olympic_log_tug_ss_not_loaded_moving,
    ];
}

spritegroup olympic_log_tug_sg_refit_2_not_moving {
    loaded:  [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
        olympic_log_tug_ss_load_2_not_moving,
        olympic_log_tug_ss_load_3_not_moving,
        olympic_log_tug_ss_load_4_not_moving,
        olympic_log_tug_ss_load_5_not_moving,
    ];
    loading: [
        olympic_log_tug_ss_not_loaded_not_moving,
        olympic_log_tug_ss_load_1_not_moving,
        olympic_log_tug_ss_load_2_not_moving,
        olympic_log_tug_ss_load_3_not_moving,
        olympic_log_tug_ss_load_4_not_moving,
        olympic_log_tug_ss_load_5_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_graphics_refit_2, current_speed) {
    0: return olympic_log_tug_sg_refit_2_not_moving;
    return olympic_log_tug_sg_refit_2_moving;
}

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_graphics, cargo_subtype) {
    0: return olympic_log_tug_switch_graphics_refit_0;
    1: return olympic_log_tug_switch_graphics_refit_1;
    2: return olympic_log_tug_switch_graphics_refit_2;
    return olympic_log_tug_switch_graphics_refit_0;
}

spritegroup olympic_log_tug_sg_purchase {
    loaded:  [
        olympic_log_tug_ss_not_loaded_not_moving,
    ];
    loading: [
        olympic_log_tug_ss_not_loaded_not_moving,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //

    switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 44;
        1..100 : 26; // log tug is binary: loaded or unloaded; no intermediate fractional speeds
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 66;
        1..100 : 39; // log tug is binary: loaded or unloaded; no intermediate fractional speeds
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 87;
        1..100 : 52; // log tug is binary: loaded or unloaded; no intermediate fractional speeds
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: olympic_log_tug_switch_speed_varies_with_load_amount_0;
    1: olympic_log_tug_switch_speed_varies_with_load_amount_1;
    2: olympic_log_tug_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_purchase_speed, param_adjust_ship_speed) {
    0: 26;
    1: 39;
    2: 52;
}

// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_cargo_capacity, cargo_subtype) {
    0: return 80;
    1: return 240;
    2: return 400;
    return 80;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 80, string(STR_UNIT_TONNES));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 240, string(STR_UNIT_TONNES));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 400, string(STR_UNIT_TONNES));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, olympic_log_tug_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 80;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, olympic_log_tug_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, olympic_log_tug, 250) {
    property {
        name:                           string(STR_NAME_olympic_log_tug, string(STR_NAME_SUFFIX_LOG_TUG));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1900,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 80;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          12.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    4;
        running_cost_factor:            12;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask();
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [WOOD];
        cargo_disallow_refit:           [];
        default_cargo_type:             WOOD;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          olympic_log_tug_switch_speed_varies_with_load_amount;
        purchase_speed:                 olympic_log_tug_switch_purchase_speed;
        cargo_capacity:                 olympic_log_tug_switch_cargo_capacity;
        purchase_cargo_capacity:        olympic_log_tug_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LOG_TUG), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,80,240,400,string(STR_QUANTITY_WOOD)));
        cargo_subtype_text:             olympic_log_tug_switch_cargo_subtype_text;
        default:                        olympic_log_tug_switch_graphics;
        purchase:                       olympic_log_tug_sg_purchase;
        create_effect:                  olympic_log_tug_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, olympic_log_tug, 250) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Olympic [Log Tug] -- 




// -- begin Tyree [Ferry] -- 


// graphics

    template spriteset_template_tyree_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -54, ANIM]
        [60,        y,          113,        66,          -61, -28, ANIM]
        [186,       y,          138,        48,          -36, -29, ANIM]
        [328,       y,          113,        66,          -10, -28, ANIM]
        [454,       y,          28,   89,          -14, -54, ANIM]
        [494,       y,          113,        66,          -55, -26, ANIM]
        [620,       y,          138,        48,          -36, -29, ANIM]
        [762,       y,          113,        66,          0, -24, ANIM]
    }



    spriteset(tyree_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/tyree_vehicle_ferry_0.png") {
      spriteset_template_tyree_vehicle_ferry(10)
    }
    spriteset(tyree_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/tyree_vehicle_ferry_0.png") {
      spriteset_template_tyree_vehicle_ferry(110)
    }
    spriteset(tyree_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/tyree_vehicle_ferry_0.png") {
      spriteset_template_tyree_vehicle_ferry(510)
    }
    spriteset(tyree_vehicle_ferry_ss_loaded_moving_0, "src/graphics/tyree_vehicle_ferry_0.png") {
      spriteset_template_tyree_vehicle_ferry(610)
    }

    spritegroup tyree_vehicle_ferry_sg_moving_0 {
        loaded:  [
            tyree_vehicle_ferry_ss_not_loaded_moving_0,
            tyree_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            tyree_vehicle_ferry_ss_not_loaded_moving_0,
            tyree_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup tyree_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            tyree_vehicle_ferry_ss_not_loaded_not_moving_0,
            tyree_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            tyree_vehicle_ferry_ss_not_loaded_not_moving_0,
            tyree_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return tyree_vehicle_ferry_sg_not_moving_0;
        return tyree_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_graphics_random_0) {
        
            1: return tyree_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:tyree_vehicle_ferry_switch_graphics_random_0;
    
    return tyree_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_tyree_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [622, 28, 89, 22, -44, -10, ANIM]
}

spriteset(tyree_vehicle_ferry_ss_purchase, "src/graphics/tyree_vehicle_ferry_0.png") {
  spriteset_template_purchase_tyree_vehicle_ferry()
}

spritegroup tyree_vehicle_ferry_sg_purchase {
    loaded:  [
        tyree_vehicle_ferry_ss_purchase,
    ];
    loading: [
        tyree_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 46;
        1..25 : 46;
        26..50 : 46;
        51..75 : 46;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 68;
        1..25 : 68;
        26..50 : 68;
        51..75 : 68;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 90;
        1..25 : 90;
        26..50 : 90;
        51..75 : 90;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: tyree_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: tyree_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: tyree_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 220;
    bitmask(CC_MAIL): return 220;
    return 110;
}
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    tyree_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 220;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, tyree_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, tyree_vehicle_ferry, 49) {
    property {
        name:                           string(STR_NAME_tyree_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1917,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 220;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    19;
        running_cost_factor:            76;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  35;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          tyree_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 tyree_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 tyree_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        tyree_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,220,110));
        cargo_subtype_text:             tyree_vehicle_ferry_switch_cargo_subtype_text;
        default:                        tyree_vehicle_ferry_switch_graphics;
        purchase:                       tyree_vehicle_ferry_sg_purchase;
        create_effect:                  tyree_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, tyree_vehicle_ferry, 49) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Tyree [Ferry] -- 


// -- begin Little Cumbrae [Freighter] -- 


// graphics
template spriteset_template_little_cumbrae_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -84, -25, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        71,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -83, -24, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        71,          -32, -23, ANIM]
}


    spriteset(little_cumbrae_freighter_ss_not_loaded_not_moving_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(10)
    }
    spriteset(little_cumbrae_freighter_ss_not_loaded_moving_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(110)
    }
    spriteset(little_cumbrae_freighter_ss_loading_0_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(210)
    }
    spriteset(little_cumbrae_freighter_ss_loading_1_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(310)
    }
    spriteset(little_cumbrae_freighter_ss_loading_2_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(410)
    }
    spriteset(little_cumbrae_freighter_ss_loading_3_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(510)
    }
    spriteset(little_cumbrae_freighter_ss_loaded_not_moving_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(610)
    }
    spriteset(little_cumbrae_freighter_ss_loaded_moving_0, "src/graphics/little_cumbrae_freighter_0.png") {
      spriteset_template_little_cumbrae_freighter(710)
    }

    spritegroup little_cumbrae_freighter_sg_moving_0 {
        loaded:  [
            little_cumbrae_freighter_ss_not_loaded_moving_0,
            little_cumbrae_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            little_cumbrae_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup little_cumbrae_freighter_sg_not_moving_0 {
        loaded:  [
            little_cumbrae_freighter_ss_not_loaded_not_moving_0,
            little_cumbrae_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            little_cumbrae_freighter_ss_loading_0_0,
            little_cumbrae_freighter_ss_loading_1_0,
            little_cumbrae_freighter_ss_loading_2_0,
            little_cumbrae_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_graphics_0, current_speed) {
        0: return little_cumbrae_freighter_sg_not_moving_0;
        return little_cumbrae_freighter_sg_moving_0;
    }

    spriteset(little_cumbrae_freighter_ss_not_loaded_not_moving_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(10)
    }
    spriteset(little_cumbrae_freighter_ss_not_loaded_moving_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(110)
    }
    spriteset(little_cumbrae_freighter_ss_loading_0_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(210)
    }
    spriteset(little_cumbrae_freighter_ss_loading_1_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(310)
    }
    spriteset(little_cumbrae_freighter_ss_loading_2_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(410)
    }
    spriteset(little_cumbrae_freighter_ss_loading_3_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(510)
    }
    spriteset(little_cumbrae_freighter_ss_loaded_not_moving_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(610)
    }
    spriteset(little_cumbrae_freighter_ss_loaded_moving_1, "src/graphics/little_cumbrae_freighter_1.png") {
      spriteset_template_little_cumbrae_freighter(710)
    }

    spritegroup little_cumbrae_freighter_sg_moving_1 {
        loaded:  [
            little_cumbrae_freighter_ss_not_loaded_moving_1,
            little_cumbrae_freighter_ss_loaded_moving_1,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            little_cumbrae_freighter_ss_loaded_moving_1,
        ];
    }

    spritegroup little_cumbrae_freighter_sg_not_moving_1 {
        loaded:  [
            little_cumbrae_freighter_ss_not_loaded_not_moving_1,
            little_cumbrae_freighter_ss_loaded_not_moving_1,
        ];
        loading: [
            little_cumbrae_freighter_ss_loading_0_1,
            little_cumbrae_freighter_ss_loading_1_1,
            little_cumbrae_freighter_ss_loading_2_1,
            little_cumbrae_freighter_ss_loading_3_1,
        ];
    }

    switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_graphics_1, current_speed) {
        0: return little_cumbrae_freighter_sg_not_moving_1;
        return little_cumbrae_freighter_sg_moving_1;
    }



    random_switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_graphics_random_0) {
        
            1: return little_cumbrae_freighter_switch_graphics_0;
        
            1: return little_cumbrae_freighter_switch_graphics_1;
        
    }



switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_graphics, build_year) {
    
        0..5000000:little_cumbrae_freighter_switch_graphics_random_0;
    
    return little_cumbrae_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_little_cumbrae_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10, ANIM]
}

spriteset(little_cumbrae_freighter_ss_purchase, "src/graphics/little_cumbrae_freighter_0.png") {
  spriteset_template_purchase_little_cumbrae_freighter()
}

spritegroup little_cumbrae_freighter_sg_purchase {
    loaded:  [
        little_cumbrae_freighter_ss_purchase,
    ];
    loading: [
        little_cumbrae_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 48;
        1..25 : 47;
        26..50 : 46;
        51..75 : 44;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 69;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 94;
        1..25 : 92;
        26..50 : 90;
        51..75 : 88;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: little_cumbrae_freighter_switch_speed_varies_with_load_amount_0;
    1: little_cumbrae_freighter_switch_speed_varies_with_load_amount_1;
    2: little_cumbrae_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 140;
}
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    little_cumbrae_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 140;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, little_cumbrae_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 6, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, little_cumbrae_freighter, 1101) {
    property {
        name:                           string(STR_NAME_little_cumbrae_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1885,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 140;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    12;
        running_cost_factor:            43;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          little_cumbrae_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 little_cumbrae_freighter_switch_purchase_speed;
        cargo_capacity:                 little_cumbrae_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        little_cumbrae_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FREIGHTER), string(STR_EMPTY));
        cargo_subtype_text:             little_cumbrae_freighter_switch_cargo_subtype_text;
        default:                        little_cumbrae_freighter_switch_graphics;
        purchase:                       little_cumbrae_freighter_sg_purchase;
        create_effect:                  little_cumbrae_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, little_cumbrae_freighter, 1101) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Little Cumbrae [Freighter] -- 


// -- begin Cadiz [Freighter] -- 


// graphics
template spriteset_template_cadiz_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -46, ANIM]
    [60,        y,          113,        71,          -61, -30, ANIM]
    [186,       y,          138,        48,          -50, -29, ANIM]
    [328,       y,          113,        71,          -10, -29, ANIM]
    [454,       y,          28,         89,          -14, -58, ANIM]
    [494,       y,          113,        71,          -60, -30, ANIM]
    [620,       y,          138,        48,          -50, -29, ANIM]
    [762,       y,          113,        71,          -6, -23, ANIM]
}


    spriteset(cadiz_freighter_ss_not_loaded_not_moving_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(10)
    }
    spriteset(cadiz_freighter_ss_not_loaded_moving_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(110)
    }
    spriteset(cadiz_freighter_ss_loading_0_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(210)
    }
    spriteset(cadiz_freighter_ss_loading_1_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(310)
    }
    spriteset(cadiz_freighter_ss_loading_2_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(410)
    }
    spriteset(cadiz_freighter_ss_loading_3_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(510)
    }
    spriteset(cadiz_freighter_ss_loaded_not_moving_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(610)
    }
    spriteset(cadiz_freighter_ss_loaded_moving_0, "src/graphics/cadiz_freighter_0.png") {
      spriteset_template_cadiz_freighter(710)
    }

    spritegroup cadiz_freighter_sg_moving_0 {
        loaded:  [
            cadiz_freighter_ss_not_loaded_moving_0,
            cadiz_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            cadiz_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup cadiz_freighter_sg_not_moving_0 {
        loaded:  [
            cadiz_freighter_ss_not_loaded_not_moving_0,
            cadiz_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            cadiz_freighter_ss_loading_0_0,
            cadiz_freighter_ss_loading_1_0,
            cadiz_freighter_ss_loading_2_0,
            cadiz_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_graphics_0, current_speed) {
        0: return cadiz_freighter_sg_not_moving_0;
        return cadiz_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_graphics_random_0) {
        
            1: return cadiz_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_graphics, build_year) {
    
        0..5000000:cadiz_freighter_switch_graphics_random_0;
    
    return cadiz_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_cadiz_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 100, 22, -50, -10, ANIM]
}

spriteset(cadiz_freighter_ss_purchase, "src/graphics/cadiz_freighter_0.png") {
  spriteset_template_purchase_cadiz_freighter()
}

spritegroup cadiz_freighter_sg_purchase {
    loaded:  [
        cadiz_freighter_ss_purchase,
    ];
    loading: [
        cadiz_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: cadiz_freighter_switch_speed_varies_with_load_amount_0;
    1: cadiz_freighter_switch_speed_varies_with_load_amount_1;
    2: cadiz_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 460;
}
switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    cadiz_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, cadiz_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 460;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, cadiz_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 10, 0, 21), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, cadiz_freighter, 1130) {
    property {
        name:                           string(STR_NAME_cadiz_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1970,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 460;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    38;
        running_cost_factor:            156;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          cadiz_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 cadiz_freighter_switch_purchase_speed;
        cargo_capacity:                 cadiz_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        cadiz_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             cadiz_freighter_switch_cargo_subtype_text;
        default:                        cadiz_freighter_switch_graphics;
        purchase:                       cadiz_freighter_sg_purchase;
        create_effect:                  cadiz_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, cadiz_freighter, 1130) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Cadiz [Freighter] -- 


// -- begin Quessant [Freighter] -- 


// graphics
template spriteset_template_quessant_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(quessant_freighter_ss_not_loaded_not_moving_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(10)
    }
    spriteset(quessant_freighter_ss_not_loaded_moving_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(110)
    }
    spriteset(quessant_freighter_ss_loading_0_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(210)
    }
    spriteset(quessant_freighter_ss_loading_1_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(310)
    }
    spriteset(quessant_freighter_ss_loading_2_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(410)
    }
    spriteset(quessant_freighter_ss_loading_3_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(510)
    }
    spriteset(quessant_freighter_ss_loaded_not_moving_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(610)
    }
    spriteset(quessant_freighter_ss_loaded_moving_0, "src/graphics/quessant_freighter_0.png") {
      spriteset_template_quessant_freighter(710)
    }

    spritegroup quessant_freighter_sg_moving_0 {
        loaded:  [
            quessant_freighter_ss_not_loaded_moving_0,
            quessant_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            quessant_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup quessant_freighter_sg_not_moving_0 {
        loaded:  [
            quessant_freighter_ss_not_loaded_not_moving_0,
            quessant_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            quessant_freighter_ss_loading_0_0,
            quessant_freighter_ss_loading_1_0,
            quessant_freighter_ss_loading_2_0,
            quessant_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, quessant_freighter_switch_graphics_0, current_speed) {
        0: return quessant_freighter_sg_not_moving_0;
        return quessant_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, quessant_freighter_switch_graphics_random_0) {
        
            1: return quessant_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, quessant_freighter_switch_graphics, build_year) {
    
        0..5000000:quessant_freighter_switch_graphics_random_0;
    
    return quessant_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_quessant_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(quessant_freighter_ss_purchase, "src/graphics/quessant_freighter_0.png") {
  spriteset_template_purchase_quessant_freighter()
}

spritegroup quessant_freighter_sg_purchase {
    loaded:  [
        quessant_freighter_ss_purchase,
    ];
    loading: [
        quessant_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, quessant_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, quessant_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, quessant_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, quessant_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: quessant_freighter_switch_speed_varies_with_load_amount_0;
    1: quessant_freighter_switch_speed_varies_with_load_amount_1;
    2: quessant_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, quessant_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, quessant_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1012;
}
switch (FEAT_SHIPS, SELF, quessant_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    quessant_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, quessant_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, quessant_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1012;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, quessant_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 16, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, quessant_freighter, 1125) {
    property {
        name:                           string(STR_NAME_quessant_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1895,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1012;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    72;
        running_cost_factor:            164;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          quessant_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 quessant_freighter_switch_purchase_speed;
        cargo_capacity:                 quessant_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        quessant_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             quessant_freighter_switch_cargo_subtype_text;
        default:                        quessant_freighter_switch_graphics;
        purchase:                       quessant_freighter_sg_purchase;
        create_effect:                  quessant_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, quessant_freighter, 1125) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Quessant [Freighter] -- 


// -- begin Schipbeek [Freight Barge] -- 


// graphics
template spriteset_template_schipbeek_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        71,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        71,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        71,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        71,          -9, -28, ANIM]
}


    spriteset(schipbeek_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(10)
    }
    spriteset(schipbeek_freight_barge_ss_not_loaded_moving_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(110)
    }
    spriteset(schipbeek_freight_barge_ss_loading_0_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(210)
    }
    spriteset(schipbeek_freight_barge_ss_loading_1_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(310)
    }
    spriteset(schipbeek_freight_barge_ss_loading_2_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(410)
    }
    spriteset(schipbeek_freight_barge_ss_loading_3_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(510)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_not_moving_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(610)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_moving_0, "src/graphics/schipbeek_freight_barge_0.png") {
      spriteset_template_schipbeek_freight_barge(710)
    }

    spritegroup schipbeek_freight_barge_sg_moving_0 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_moving_0,
            schipbeek_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            schipbeek_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup schipbeek_freight_barge_sg_not_moving_0 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_not_moving_0,
            schipbeek_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            schipbeek_freight_barge_ss_loading_0_0,
            schipbeek_freight_barge_ss_loading_1_0,
            schipbeek_freight_barge_ss_loading_2_0,
            schipbeek_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_0, current_speed) {
        0: return schipbeek_freight_barge_sg_not_moving_0;
        return schipbeek_freight_barge_sg_moving_0;
    }

    spriteset(schipbeek_freight_barge_ss_not_loaded_not_moving_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(10)
    }
    spriteset(schipbeek_freight_barge_ss_not_loaded_moving_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(110)
    }
    spriteset(schipbeek_freight_barge_ss_loading_0_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(210)
    }
    spriteset(schipbeek_freight_barge_ss_loading_1_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(310)
    }
    spriteset(schipbeek_freight_barge_ss_loading_2_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(410)
    }
    spriteset(schipbeek_freight_barge_ss_loading_3_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(510)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_not_moving_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(610)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_moving_1, "src/graphics/schipbeek_freight_barge_1.png") {
      spriteset_template_schipbeek_freight_barge(710)
    }

    spritegroup schipbeek_freight_barge_sg_moving_1 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_moving_1,
            schipbeek_freight_barge_ss_loaded_moving_1,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            schipbeek_freight_barge_ss_loaded_moving_1,
        ];
    }

    spritegroup schipbeek_freight_barge_sg_not_moving_1 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_not_moving_1,
            schipbeek_freight_barge_ss_loaded_not_moving_1,
        ];
        loading: [
            schipbeek_freight_barge_ss_loading_0_1,
            schipbeek_freight_barge_ss_loading_1_1,
            schipbeek_freight_barge_ss_loading_2_1,
            schipbeek_freight_barge_ss_loading_3_1,
        ];
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_1, current_speed) {
        0: return schipbeek_freight_barge_sg_not_moving_1;
        return schipbeek_freight_barge_sg_moving_1;
    }

    spriteset(schipbeek_freight_barge_ss_not_loaded_not_moving_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(10)
    }
    spriteset(schipbeek_freight_barge_ss_not_loaded_moving_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(110)
    }
    spriteset(schipbeek_freight_barge_ss_loading_0_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(210)
    }
    spriteset(schipbeek_freight_barge_ss_loading_1_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(310)
    }
    spriteset(schipbeek_freight_barge_ss_loading_2_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(410)
    }
    spriteset(schipbeek_freight_barge_ss_loading_3_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(510)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_not_moving_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(610)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_moving_2, "src/graphics/schipbeek_freight_barge_2.png") {
      spriteset_template_schipbeek_freight_barge(710)
    }

    spritegroup schipbeek_freight_barge_sg_moving_2 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_moving_2,
            schipbeek_freight_barge_ss_loaded_moving_2,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            schipbeek_freight_barge_ss_loaded_moving_2,
        ];
    }

    spritegroup schipbeek_freight_barge_sg_not_moving_2 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_not_moving_2,
            schipbeek_freight_barge_ss_loaded_not_moving_2,
        ];
        loading: [
            schipbeek_freight_barge_ss_loading_0_2,
            schipbeek_freight_barge_ss_loading_1_2,
            schipbeek_freight_barge_ss_loading_2_2,
            schipbeek_freight_barge_ss_loading_3_2,
        ];
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_2, current_speed) {
        0: return schipbeek_freight_barge_sg_not_moving_2;
        return schipbeek_freight_barge_sg_moving_2;
    }

    spriteset(schipbeek_freight_barge_ss_not_loaded_not_moving_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(10)
    }
    spriteset(schipbeek_freight_barge_ss_not_loaded_moving_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(110)
    }
    spriteset(schipbeek_freight_barge_ss_loading_0_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(210)
    }
    spriteset(schipbeek_freight_barge_ss_loading_1_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(310)
    }
    spriteset(schipbeek_freight_barge_ss_loading_2_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(410)
    }
    spriteset(schipbeek_freight_barge_ss_loading_3_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(510)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_not_moving_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(610)
    }
    spriteset(schipbeek_freight_barge_ss_loaded_moving_3, "src/graphics/schipbeek_freight_barge_3.png") {
      spriteset_template_schipbeek_freight_barge(710)
    }

    spritegroup schipbeek_freight_barge_sg_moving_3 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_moving_3,
            schipbeek_freight_barge_ss_loaded_moving_3,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            schipbeek_freight_barge_ss_loaded_moving_3,
        ];
    }

    spritegroup schipbeek_freight_barge_sg_not_moving_3 {
        loaded:  [
            schipbeek_freight_barge_ss_not_loaded_not_moving_3,
            schipbeek_freight_barge_ss_loaded_not_moving_3,
        ];
        loading: [
            schipbeek_freight_barge_ss_loading_0_3,
            schipbeek_freight_barge_ss_loading_1_3,
            schipbeek_freight_barge_ss_loading_2_3,
            schipbeek_freight_barge_ss_loading_3_3,
        ];
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_3, current_speed) {
        0: return schipbeek_freight_barge_sg_not_moving_3;
        return schipbeek_freight_barge_sg_moving_3;
    }



    random_switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_random_0) {
        
            1: return schipbeek_freight_barge_switch_graphics_0;
        
    }

    random_switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_random_1950) {
        
            1: return schipbeek_freight_barge_switch_graphics_0;
        
            1: return schipbeek_freight_barge_switch_graphics_1;
        
            1: return schipbeek_freight_barge_switch_graphics_2;
        
    }

    random_switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics_random_1960) {
        
            1: return schipbeek_freight_barge_switch_graphics_1;
        
            1: return schipbeek_freight_barge_switch_graphics_2;
        
            1: return schipbeek_freight_barge_switch_graphics_3;
        
    }



switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_graphics, build_year) {
    
        0..1949:schipbeek_freight_barge_switch_graphics_random_0;
    
        1950..1959:schipbeek_freight_barge_switch_graphics_random_1950;
    
        1960..5000000:schipbeek_freight_barge_switch_graphics_random_1960;
    
    return schipbeek_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_schipbeek_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [624, 21, 109, 22, -54, -10, ANIM]
}

spriteset(schipbeek_freight_barge_ss_purchase, "src/graphics/schipbeek_freight_barge_0.png") {
  spriteset_template_purchase_schipbeek_freight_barge()
}

spritegroup schipbeek_freight_barge_sg_purchase {
    loaded:  [
        schipbeek_freight_barge_ss_purchase,
    ];
    loading: [
        schipbeek_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 49;
        26..50 : 48;
        51..75 : 47;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 73;
        26..50 : 71;
        51..75 : 69;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 99;
        1..25 : 97;
        26..50 : 94;
        51..75 : 92;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: schipbeek_freight_barge_switch_speed_varies_with_load_amount_0;
    1: schipbeek_freight_barge_switch_speed_varies_with_load_amount_1;
    2: schipbeek_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 560;
}
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    schipbeek_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 560;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, schipbeek_freight_barge_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, schipbeek_freight_barge, 2140) {
    property {
        name:                           string(STR_NAME_schipbeek_freight_barge, string(STR_NAME_SUFFIX_FREIGHT_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1915,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 560;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    27;
        running_cost_factor:            77;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          schipbeek_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 schipbeek_freight_barge_switch_purchase_speed;
        cargo_capacity:                 schipbeek_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        schipbeek_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             schipbeek_freight_barge_switch_cargo_subtype_text;
        default:                        schipbeek_freight_barge_switch_graphics;
        purchase:                       schipbeek_freight_barge_sg_purchase;
        create_effect:                  schipbeek_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, schipbeek_freight_barge, 2140) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Schipbeek [Freight Barge] -- 




// -- begin Harbour Point [Utility Vessel] -- 


// graphics

    template spriteset_template_harbour_point_utility_vessel(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(harbour_point_utility_vessel_ss_not_loaded_not_moving_0, "src/graphics/harbour_point_utility_vessel_0.png") {
      spriteset_template_harbour_point_utility_vessel(10)
    }
    spriteset(harbour_point_utility_vessel_ss_not_loaded_moving_0, "src/graphics/harbour_point_utility_vessel_0.png") {
      spriteset_template_harbour_point_utility_vessel(110)
    }
    spriteset(harbour_point_utility_vessel_ss_loaded_not_moving_0, "src/graphics/harbour_point_utility_vessel_0.png") {
      spriteset_template_harbour_point_utility_vessel(510)
    }
    spriteset(harbour_point_utility_vessel_ss_loaded_moving_0, "src/graphics/harbour_point_utility_vessel_0.png") {
      spriteset_template_harbour_point_utility_vessel(610)
    }

    spritegroup harbour_point_utility_vessel_sg_moving_0 {
        loaded:  [
            harbour_point_utility_vessel_ss_not_loaded_moving_0,
            harbour_point_utility_vessel_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            harbour_point_utility_vessel_ss_not_loaded_moving_0,
            harbour_point_utility_vessel_ss_loaded_moving_0,
        ];
    }

    spritegroup harbour_point_utility_vessel_sg_not_moving_0 {
        loaded:  [
            harbour_point_utility_vessel_ss_not_loaded_not_moving_0,
            harbour_point_utility_vessel_ss_loaded_not_moving_0,
        ];
        loading: [
            harbour_point_utility_vessel_ss_not_loaded_not_moving_0,
            harbour_point_utility_vessel_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_graphics_0, current_speed) {
        0: return harbour_point_utility_vessel_sg_not_moving_0;
        return harbour_point_utility_vessel_sg_moving_0;
    }

    spriteset(harbour_point_utility_vessel_ss_not_loaded_not_moving_1, "src/graphics/harbour_point_utility_vessel_1.png") {
      spriteset_template_harbour_point_utility_vessel(10)
    }
    spriteset(harbour_point_utility_vessel_ss_not_loaded_moving_1, "src/graphics/harbour_point_utility_vessel_1.png") {
      spriteset_template_harbour_point_utility_vessel(110)
    }
    spriteset(harbour_point_utility_vessel_ss_loaded_not_moving_1, "src/graphics/harbour_point_utility_vessel_1.png") {
      spriteset_template_harbour_point_utility_vessel(510)
    }
    spriteset(harbour_point_utility_vessel_ss_loaded_moving_1, "src/graphics/harbour_point_utility_vessel_1.png") {
      spriteset_template_harbour_point_utility_vessel(610)
    }

    spritegroup harbour_point_utility_vessel_sg_moving_1 {
        loaded:  [
            harbour_point_utility_vessel_ss_not_loaded_moving_1,
            harbour_point_utility_vessel_ss_loaded_moving_1,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            harbour_point_utility_vessel_ss_not_loaded_moving_1,
            harbour_point_utility_vessel_ss_loaded_moving_1,
        ];
    }

    spritegroup harbour_point_utility_vessel_sg_not_moving_1 {
        loaded:  [
            harbour_point_utility_vessel_ss_not_loaded_not_moving_1,
            harbour_point_utility_vessel_ss_loaded_not_moving_1,
        ];
        loading: [
            harbour_point_utility_vessel_ss_not_loaded_not_moving_1,
            harbour_point_utility_vessel_ss_loaded_not_moving_1,
        ];
    }

    switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_graphics_1, current_speed) {
        0: return harbour_point_utility_vessel_sg_not_moving_1;
        return harbour_point_utility_vessel_sg_moving_1;
    }



    random_switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_graphics_random_0) {
        
            1: return harbour_point_utility_vessel_switch_graphics_0;
        
            1: return harbour_point_utility_vessel_switch_graphics_1;
        
    }



switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_graphics, build_year) {
    
        0..5000000:harbour_point_utility_vessel_switch_graphics_random_0;
    
    return harbour_point_utility_vessel_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_harbour_point_utility_vessel() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [673, 23, 29, 22, -14, -10, ANIM]
}

spriteset(harbour_point_utility_vessel_ss_purchase, "src/graphics/harbour_point_utility_vessel_0.png") {
  spriteset_template_purchase_harbour_point_utility_vessel()
}

spritegroup harbour_point_utility_vessel_sg_purchase {
    loaded:  [
        harbour_point_utility_vessel_ss_purchase,
    ];
    loading: [
        harbour_point_utility_vessel_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 47;
        1..25 : 46;
        26..50 : 44;
        51..75 : 43;
        76..100 : 41;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 70;
        1..25 : 68;
        26..50 : 66;
        51..75 : 64;
        76..100 : 61;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 94;
        1..25 : 90;
        26..50 : 87;
        51..75 : 84;
        76..100 : 81;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: harbour_point_utility_vessel_switch_speed_varies_with_load_amount_0;
    1: harbour_point_utility_vessel_switch_speed_varies_with_load_amount_1;
    2: harbour_point_utility_vessel_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_purchase_speed, param_adjust_ship_speed) {
    0: 41;
    1: 61;
    2: 81;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 27;
    bitmask(CC_MAIL): return 30;
    return 20;
}
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_cargo_capacity, cargo_type_in_veh) {
    
    harbour_point_utility_vessel_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 27;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, harbour_point_utility_vessel_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 8), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, harbour_point_utility_vessel, 1000) {
    property {
        name:                           string(STR_NAME_harbour_point_utility_vessel, string(STR_NAME_SUFFIX_UTILITY_VESSEL));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 27;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          19.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    4;
        running_cost_factor:            15;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_PASSENGERS,CC_EXPRESS,CC_ARMOURED,CC_MAIL,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             PASS;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          harbour_point_utility_vessel_switch_speed_varies_with_load_amount;
        purchase_speed:                 harbour_point_utility_vessel_switch_purchase_speed;
        cargo_capacity:                 harbour_point_utility_vessel_switch_cargo_capacity;
        purchase_cargo_capacity:        harbour_point_utility_vessel_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_GENERAL_PURPOSE_VESSEL), string(STR_BUY_MENU_REFIT_CAPACITIES_UTILITY,30,20));
        cargo_subtype_text:             harbour_point_utility_vessel_switch_cargo_subtype_text;
        default:                        harbour_point_utility_vessel_switch_graphics;
        purchase:                       harbour_point_utility_vessel_sg_purchase;
        create_effect:                  harbour_point_utility_vessel_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, harbour_point_utility_vessel, 1000) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Harbour Point [Utility Vessel] -- 


// -- begin Newport [Container Feeder] -- 


// graphics
template spriteset_template_newport_container_feeder(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y,                       flags]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -25, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -25, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}

spriteset(newport_container_feeder_ss_empty_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(10)
}
spriteset(newport_container_feeder_ss_empty_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(110)
}
spriteset(newport_container_feeder_ss_loading_0_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(210)
}
spriteset(newport_container_feeder_ss_loaded_1_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(310)
}
spriteset(newport_container_feeder_ss_loaded_1_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(410)
}
spriteset(newport_container_feeder_ss_loaded_2_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(510)
}
spriteset(newport_container_feeder_ss_loaded_2_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(610)
}
spriteset(newport_container_feeder_ss_loaded_3_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(710)
}
spriteset(newport_container_feeder_ss_loaded_3_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(810)
}
spriteset(newport_container_feeder_ss_loaded_4_not_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(910)
}
spriteset(newport_container_feeder_ss_loaded_4_moving, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_newport_container_feeder(1010)
}

spritegroup newport_container_feeder_sg_moving {
    loaded:  [
        newport_container_feeder_ss_empty_moving,
        newport_container_feeder_ss_loaded_1_moving,
        newport_container_feeder_ss_loaded_2_moving,
        newport_container_feeder_ss_loaded_3_moving,
        newport_container_feeder_ss_loaded_4_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        newport_container_feeder_ss_empty_moving,
    ];
}

spritegroup newport_container_feeder_sg_not_moving {
    loaded:  [
        newport_container_feeder_ss_empty_not_moving,
        newport_container_feeder_ss_loaded_1_not_moving,
        newport_container_feeder_ss_loaded_2_not_moving,
        newport_container_feeder_ss_loaded_3_not_moving,
        newport_container_feeder_ss_loaded_4_not_moving,
    ];
    loading: [
        newport_container_feeder_ss_loading_0_not_moving,
        newport_container_feeder_ss_loaded_1_not_moving,
        newport_container_feeder_ss_loaded_2_not_moving,
        newport_container_feeder_ss_loaded_3_not_moving,
        newport_container_feeder_ss_loaded_4_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_graphics, current_speed) {
    0: return newport_container_feeder_sg_not_moving;
    return newport_container_feeder_sg_moving;
}

// buy menu graphics

template spriteset_template_purchase_newport_container_feeder() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(newport_container_feeder_ss_purchase, "src/graphics/newport_container_feeder_0.png") {
  spriteset_template_purchase_newport_container_feeder()
}

spritegroup newport_container_feeder_sg_purchase {
    loaded:  [
        newport_container_feeder_ss_purchase,
    ];
    loading: [
        newport_container_feeder_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: newport_container_feeder_switch_speed_varies_with_load_amount_0;
    1: newport_container_feeder_switch_speed_varies_with_load_amount_1;
    2: newport_container_feeder_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1200;
}
switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_cargo_capacity, cargo_type_in_veh) {
    
    newport_container_feeder_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, newport_container_feeder_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1200;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, newport_container_feeder_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, 2, 26), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, -2, 26), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, newport_container_feeder, 1240) {
    property {
        name:                           string(STR_NAME_newport_container_feeder, string(STR_NAME_SUFFIX_CONTAINER_FEEDER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1972,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1200;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.45;
        cost_factor:                    71;
        running_cost_factor:            173;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_PIECE_GOODS,CC_LIQUID,CC_ARMOURED,CC_EXPRESS);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [MAIL,FRUT,WATR];
        cargo_disallow_refit:           [FISH,LVST,OIL_,TOUR,WOOD];
        default_cargo_type:             GOOD;
        loading_speed:                  35;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   26; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   30;
    }
    graphics {
        speed:                          newport_container_feeder_switch_speed_varies_with_load_amount;
        purchase_speed:                 newport_container_feeder_switch_purchase_speed;
        cargo_capacity:                 newport_container_feeder_switch_cargo_capacity;
        purchase_cargo_capacity:        newport_container_feeder_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CONTAINER_FEEDER), string(STR_EMPTY));
        cargo_subtype_text:             newport_container_feeder_switch_cargo_subtype_text;
        default:                        newport_container_feeder_switch_graphics;
        purchase:                       newport_container_feeder_sg_purchase;
        create_effect:                  newport_container_feeder_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, newport_container_feeder, 1240) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Newport [Container Feeder] -- 


// -- begin Yokohama [Tanker] -- 


// graphics
template spriteset_template_yokohama_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(yokohama_tanker_ss_not_loaded_not_moving, "src/graphics/yokohama_tanker_0.png") {
  spriteset_template_yokohama_tanker(10)
}
spriteset(yokohama_tanker_ss_not_loaded_moving, "src/graphics/yokohama_tanker_0.png") {
  spriteset_template_yokohama_tanker(110)
}
spriteset(yokohama_tanker_ss_loaded_not_moving, "src/graphics/yokohama_tanker_0.png") {
  spriteset_template_yokohama_tanker(210)
}
spriteset(yokohama_tanker_ss_loaded_moving, "src/graphics/yokohama_tanker_0.png") {
  spriteset_template_yokohama_tanker(310)
}

spritegroup yokohama_tanker_sg_moving {
    loaded:  [
        yokohama_tanker_ss_not_loaded_moving,
        yokohama_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        yokohama_tanker_ss_loaded_moving,
    ];
}

spritegroup yokohama_tanker_sg_not_moving {
    loaded:  [
        yokohama_tanker_ss_not_loaded_not_moving,
        yokohama_tanker_ss_loaded_not_moving,
    ];
    loading: [
        yokohama_tanker_ss_not_loaded_not_moving,
        yokohama_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_graphics, current_speed) {
    0: return yokohama_tanker_sg_not_moving;
    return yokohama_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_yokohama_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(yokohama_tanker_ss_purchase, "src/graphics/yokohama_tanker_0.png") {
  spriteset_template_purchase_yokohama_tanker()
}

spritegroup yokohama_tanker_sg_purchase {
    loaded:  [
        yokohama_tanker_ss_purchase,
    ];
    loading: [
        yokohama_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: yokohama_tanker_switch_speed_varies_with_load_amount_0;
    1: yokohama_tanker_switch_speed_varies_with_load_amount_1;
    2: yokohama_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1660;
}
switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    yokohama_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, yokohama_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1660;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, yokohama_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 27), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, yokohama_tanker, 1271) {
    property {
        name:                           string(STR_NAME_yokohama_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1973,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1660;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    130;
        running_cost_factor:            255;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          yokohama_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 yokohama_tanker_switch_purchase_speed;
        cargo_capacity:                 yokohama_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        yokohama_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             yokohama_tanker_switch_cargo_subtype_text;
        default:                        yokohama_tanker_switch_graphics;
        purchase:                       yokohama_tanker_sg_purchase;
        create_effect:                  yokohama_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, yokohama_tanker, 1271) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Yokohama [Tanker] -- 


// -- begin Volgoneft 630 [Tanker Barge] -- 


// graphics
template spriteset_template_volgoneft_six_thirty_tanker_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        66,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        66,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        66,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        66,          -9, -28, ANIM]
}

spriteset(volgoneft_six_thirty_tanker_barge_ss_not_loaded_not_moving, "src/graphics/volgoneft_six_thirty_tanker_barge_0.png") {
  spriteset_template_volgoneft_six_thirty_tanker_barge(10)
}
spriteset(volgoneft_six_thirty_tanker_barge_ss_not_loaded_moving, "src/graphics/volgoneft_six_thirty_tanker_barge_0.png") {
  spriteset_template_volgoneft_six_thirty_tanker_barge(110)
}
spriteset(volgoneft_six_thirty_tanker_barge_ss_loaded_not_moving, "src/graphics/volgoneft_six_thirty_tanker_barge_0.png") {
  spriteset_template_volgoneft_six_thirty_tanker_barge(210)
}
spriteset(volgoneft_six_thirty_tanker_barge_ss_loaded_moving, "src/graphics/volgoneft_six_thirty_tanker_barge_0.png") {
  spriteset_template_volgoneft_six_thirty_tanker_barge(310)
}

spritegroup volgoneft_six_thirty_tanker_barge_sg_moving {
    loaded:  [
        volgoneft_six_thirty_tanker_barge_ss_not_loaded_moving,
        volgoneft_six_thirty_tanker_barge_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        volgoneft_six_thirty_tanker_barge_ss_loaded_moving,
    ];
}

spritegroup volgoneft_six_thirty_tanker_barge_sg_not_moving {
    loaded:  [
        volgoneft_six_thirty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_six_thirty_tanker_barge_ss_loaded_not_moving,
    ];
    loading: [
        volgoneft_six_thirty_tanker_barge_ss_not_loaded_not_moving,
        volgoneft_six_thirty_tanker_barge_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_graphics, current_speed) {
    0: return volgoneft_six_thirty_tanker_barge_sg_not_moving;
    return volgoneft_six_thirty_tanker_barge_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_volgoneft_six_thirty_tanker_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 21, 114, 22, -57, -10]
}

spriteset(volgoneft_six_thirty_tanker_barge_ss_purchase, "src/graphics/volgoneft_six_thirty_tanker_barge_0.png") {
  spriteset_template_purchase_volgoneft_six_thirty_tanker_barge()
}

spritegroup volgoneft_six_thirty_tanker_barge_sg_purchase {
    loaded:  [
        volgoneft_six_thirty_tanker_barge_ss_purchase,
    ];
    loading: [
        volgoneft_six_thirty_tanker_barge_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 49;
        26..50 : 48;
        51..75 : 47;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 73;
        26..50 : 71;
        51..75 : 69;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 99;
        1..25 : 97;
        26..50 : 94;
        51..75 : 92;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_0;
    1: volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_1;
    2: volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 630;
}
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    volgoneft_six_thirty_tanker_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 630;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, volgoneft_six_thirty_tanker_barge_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, volgoneft_six_thirty_tanker_barge, 2260) {
    property {
        name:                           string(STR_NAME_volgoneft_six_thirty_tanker_barge, string(STR_NAME_SUFFIX_TANKER_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1926,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 630;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    29;
        running_cost_factor:            131;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          volgoneft_six_thirty_tanker_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 volgoneft_six_thirty_tanker_barge_switch_purchase_speed;
        cargo_capacity:                 volgoneft_six_thirty_tanker_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        volgoneft_six_thirty_tanker_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_TANKER_COASTAL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             volgoneft_six_thirty_tanker_barge_switch_cargo_subtype_text;
        default:                        volgoneft_six_thirty_tanker_barge_switch_graphics;
        purchase:                       volgoneft_six_thirty_tanker_barge_sg_purchase;
        create_effect:                  volgoneft_six_thirty_tanker_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, volgoneft_six_thirty_tanker_barge, 2260) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Volgoneft 630 [Tanker Barge] -- 




// -- begin Friedrich [Paddle Steamer] -- 


// graphics

    template spriteset_template_friedrich_paddle_steamer(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -38, ANIM]
        [60,        y,          113,        66,          -75, -20, ANIM]
        [186,       y,          138,        48,          -67, -28, ANIM]
        [328,       y,          113,        66,          -22, -21, ANIM]
        [454,       y,          28,   89,          -14, -42, ANIM]
        [494,       y,          113,        66,          -75, -21, ANIM]
        [620,       y,          138,        48,          -67, -28, ANIM]
        [762,       y,          113,        66,          -20, -21, ANIM]
    }



    spriteset(friedrich_paddle_steamer_ss_not_loaded_not_moving_0, "src/graphics/friedrich_paddle_steamer_0.png") {
      spriteset_template_friedrich_paddle_steamer(10)
    }
    spriteset(friedrich_paddle_steamer_ss_not_loaded_moving_0, "src/graphics/friedrich_paddle_steamer_0.png") {
      spriteset_template_friedrich_paddle_steamer(110)
    }
    spriteset(friedrich_paddle_steamer_ss_loaded_not_moving_0, "src/graphics/friedrich_paddle_steamer_0.png") {
      spriteset_template_friedrich_paddle_steamer(510)
    }
    spriteset(friedrich_paddle_steamer_ss_loaded_moving_0, "src/graphics/friedrich_paddle_steamer_0.png") {
      spriteset_template_friedrich_paddle_steamer(610)
    }

    spritegroup friedrich_paddle_steamer_sg_moving_0 {
        loaded:  [
            friedrich_paddle_steamer_ss_not_loaded_moving_0,
            friedrich_paddle_steamer_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            friedrich_paddle_steamer_ss_not_loaded_moving_0,
            friedrich_paddle_steamer_ss_loaded_moving_0,
        ];
    }

    spritegroup friedrich_paddle_steamer_sg_not_moving_0 {
        loaded:  [
            friedrich_paddle_steamer_ss_not_loaded_not_moving_0,
            friedrich_paddle_steamer_ss_loaded_not_moving_0,
        ];
        loading: [
            friedrich_paddle_steamer_ss_not_loaded_not_moving_0,
            friedrich_paddle_steamer_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_graphics_0, current_speed) {
        0: return friedrich_paddle_steamer_sg_not_moving_0;
        return friedrich_paddle_steamer_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_graphics_random_0) {
        
            1: return friedrich_paddle_steamer_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_graphics, build_year) {
    
        0..5000000:friedrich_paddle_steamer_switch_graphics_random_0;
    
    return friedrich_paddle_steamer_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_friedrich_paddle_steamer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 26, 138, 22, -69, -10, ANIM]
}

spriteset(friedrich_paddle_steamer_ss_purchase, "src/graphics/friedrich_paddle_steamer_0.png") {
  spriteset_template_purchase_friedrich_paddle_steamer()
}

spritegroup friedrich_paddle_steamer_sg_purchase {
    loaded:  [
        friedrich_paddle_steamer_ss_purchase,
    ];
    loading: [
        friedrich_paddle_steamer_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 61;
        1..25 : 61;
        26..50 : 61;
        51..75 : 61;
        76..100 : 61;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 90;
        1..25 : 90;
        26..50 : 90;
        51..75 : 90;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 120;
        1..25 : 120;
        26..50 : 120;
        51..75 : 120;
        76..100 : 120;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: friedrich_paddle_steamer_switch_speed_varies_with_load_amount_0;
    1: friedrich_paddle_steamer_switch_speed_varies_with_load_amount_1;
    2: friedrich_paddle_steamer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 61;
    1: 90;
    2: 120;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 720;
    bitmask(CC_MAIL): return 320;
    return 250;
}
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_cargo_capacity, cargo_type_in_veh) {
    
    friedrich_paddle_steamer_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 720;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, friedrich_paddle_steamer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 28), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 4, 0, 28), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, friedrich_paddle_steamer, 1040) {
    property {
        name:                           string(STR_NAME_friedrich_paddle_steamer, string(STR_NAME_SUFFIX_PADDLE_STEAMER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1892,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 720;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          28.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    79;
        running_cost_factor:            178;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  12;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          friedrich_paddle_steamer_switch_speed_varies_with_load_amount;
        purchase_speed:                 friedrich_paddle_steamer_switch_purchase_speed;
        cargo_capacity:                 friedrich_paddle_steamer_switch_cargo_capacity;
        purchase_cargo_capacity:        friedrich_paddle_steamer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_PADDLE_STEAMER), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,320,250));
        cargo_subtype_text:             friedrich_paddle_steamer_switch_cargo_subtype_text;
        default:                        friedrich_paddle_steamer_switch_graphics;
        purchase:                       friedrich_paddle_steamer_sg_purchase;
        create_effect:                  friedrich_paddle_steamer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, friedrich_paddle_steamer, 1040) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Friedrich [Paddle Steamer] -- 


// -- begin Malin [Freighter] -- 


// graphics
template spriteset_template_malin_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        71,          -84, -25, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        71,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        71,          -83, -24, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        71,          -32, -23, ANIM]
}


    spriteset(malin_freighter_ss_not_loaded_not_moving_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(10)
    }
    spriteset(malin_freighter_ss_not_loaded_moving_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(110)
    }
    spriteset(malin_freighter_ss_loading_0_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(210)
    }
    spriteset(malin_freighter_ss_loading_1_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(310)
    }
    spriteset(malin_freighter_ss_loading_2_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(410)
    }
    spriteset(malin_freighter_ss_loading_3_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(510)
    }
    spriteset(malin_freighter_ss_loaded_not_moving_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(610)
    }
    spriteset(malin_freighter_ss_loaded_moving_0, "src/graphics/malin_freighter_0.png") {
      spriteset_template_malin_freighter(710)
    }

    spritegroup malin_freighter_sg_moving_0 {
        loaded:  [
            malin_freighter_ss_not_loaded_moving_0,
            malin_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            malin_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup malin_freighter_sg_not_moving_0 {
        loaded:  [
            malin_freighter_ss_not_loaded_not_moving_0,
            malin_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            malin_freighter_ss_loading_0_0,
            malin_freighter_ss_loading_1_0,
            malin_freighter_ss_loading_2_0,
            malin_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, malin_freighter_switch_graphics_0, current_speed) {
        0: return malin_freighter_sg_not_moving_0;
        return malin_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, malin_freighter_switch_graphics_random_0) {
        
            1: return malin_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, malin_freighter_switch_graphics, build_year) {
    
        0..5000000:malin_freighter_switch_graphics_random_0;
    
    return malin_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_malin_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10, ANIM]
}

spriteset(malin_freighter_ss_purchase, "src/graphics/malin_freighter_0.png") {
  spriteset_template_purchase_malin_freighter()
}

spritegroup malin_freighter_sg_purchase {
    loaded:  [
        malin_freighter_ss_purchase,
    ];
    loading: [
        malin_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, malin_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, malin_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, malin_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, malin_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: malin_freighter_switch_speed_varies_with_load_amount_0;
    1: malin_freighter_switch_speed_varies_with_load_amount_1;
    2: malin_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, malin_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, malin_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 110;
}
switch (FEAT_SHIPS, SELF, malin_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    malin_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, malin_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, malin_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 110;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, malin_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 6, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, malin_freighter, 1100) {
    property {
        name:                           string(STR_NAME_malin_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 110;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    10;
        running_cost_factor:            37;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          malin_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 malin_freighter_switch_purchase_speed;
        cargo_capacity:                 malin_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        malin_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_FREIGHTER), string(STR_EMPTY));
        cargo_subtype_text:             malin_freighter_switch_cargo_subtype_text;
        default:                        malin_freighter_switch_graphics;
        purchase:                       malin_freighter_sg_purchase;
        create_effect:                  malin_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, malin_freighter, 1100) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Malin [Freighter] -- 




// -- begin Bernard [Paddle Steamer] -- 


// graphics

    template spriteset_template_bernard_paddle_steamer(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -54, ANIM]
        [60,        y,          113,        66,          -63, -24, ANIM]
        [186,       y,          138,        48,          -50, -29, ANIM]
        [328,       y,          113,        66,          -10, -28, ANIM]
        [454,       y,          28,   89,          -14, -55, ANIM]
        [494,       y,          113,        66,          -58, -27, ANIM]
        [620,       y,          138,        48,          -50, -29, ANIM]
        [762,       y,          113,        66,          -8, -24, ANIM]
    }



    spriteset(bernard_paddle_steamer_ss_not_loaded_not_moving_0, "src/graphics/bernard_paddle_steamer_0.png") {
      spriteset_template_bernard_paddle_steamer(10)
    }
    spriteset(bernard_paddle_steamer_ss_not_loaded_moving_0, "src/graphics/bernard_paddle_steamer_0.png") {
      spriteset_template_bernard_paddle_steamer(110)
    }
    spriteset(bernard_paddle_steamer_ss_loaded_not_moving_0, "src/graphics/bernard_paddle_steamer_0.png") {
      spriteset_template_bernard_paddle_steamer(510)
    }
    spriteset(bernard_paddle_steamer_ss_loaded_moving_0, "src/graphics/bernard_paddle_steamer_0.png") {
      spriteset_template_bernard_paddle_steamer(610)
    }

    spritegroup bernard_paddle_steamer_sg_moving_0 {
        loaded:  [
            bernard_paddle_steamer_ss_not_loaded_moving_0,
            bernard_paddle_steamer_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            bernard_paddle_steamer_ss_not_loaded_moving_0,
            bernard_paddle_steamer_ss_loaded_moving_0,
        ];
    }

    spritegroup bernard_paddle_steamer_sg_not_moving_0 {
        loaded:  [
            bernard_paddle_steamer_ss_not_loaded_not_moving_0,
            bernard_paddle_steamer_ss_loaded_not_moving_0,
        ];
        loading: [
            bernard_paddle_steamer_ss_not_loaded_not_moving_0,
            bernard_paddle_steamer_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_graphics_0, current_speed) {
        0: return bernard_paddle_steamer_sg_not_moving_0;
        return bernard_paddle_steamer_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_graphics_random_0) {
        
            1: return bernard_paddle_steamer_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_graphics, build_year) {
    
        0..5000000:bernard_paddle_steamer_switch_graphics_random_0;
    
    return bernard_paddle_steamer_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_bernard_paddle_steamer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [626, 26, 89, 22, -44, -10, ANIM]
}

spriteset(bernard_paddle_steamer_ss_purchase, "src/graphics/bernard_paddle_steamer_0.png") {
  spriteset_template_purchase_bernard_paddle_steamer()
}

spritegroup bernard_paddle_steamer_sg_purchase {
    loaded:  [
        bernard_paddle_steamer_ss_purchase,
    ];
    loading: [
        bernard_paddle_steamer_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 46;
        1..25 : 46;
        26..50 : 46;
        51..75 : 46;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 68;
        1..25 : 68;
        26..50 : 68;
        51..75 : 68;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 90;
        1..25 : 90;
        26..50 : 90;
        51..75 : 90;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: bernard_paddle_steamer_switch_speed_varies_with_load_amount_0;
    1: bernard_paddle_steamer_switch_speed_varies_with_load_amount_1;
    2: bernard_paddle_steamer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 300;
    bitmask(CC_MAIL): return 300;
    return 125;
}
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_cargo_capacity, cargo_type_in_veh) {
    
    bernard_paddle_steamer_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 300;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, bernard_paddle_steamer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 24), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 4, 0, 24), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, bernard_paddle_steamer, 2020) {
    property {
        name:                           string(STR_NAME_bernard_paddle_steamer, string(STR_NAME_SUFFIX_PADDLE_STEAMER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1855,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 300;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    32;
        running_cost_factor:            74;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  12;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          bernard_paddle_steamer_switch_speed_varies_with_load_amount;
        purchase_speed:                 bernard_paddle_steamer_switch_purchase_speed;
        cargo_capacity:                 bernard_paddle_steamer_switch_cargo_capacity;
        purchase_cargo_capacity:        bernard_paddle_steamer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_PADDLE_STEAMER), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,300,125));
        cargo_subtype_text:             bernard_paddle_steamer_switch_cargo_subtype_text;
        default:                        bernard_paddle_steamer_switch_graphics;
        purchase:                       bernard_paddle_steamer_sg_purchase;
        create_effect:                  bernard_paddle_steamer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, bernard_paddle_steamer, 2020) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Bernard [Paddle Steamer] -- 


// -- begin Munkegrund [Freighter] -- 


// graphics
template spriteset_template_munkegrund_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -46, ANIM]
    [60,        y,          113,        71,          -61, -30, ANIM]
    [186,       y,          138,        48,          -50, -29, ANIM]
    [328,       y,          113,        71,          -10, -29, ANIM]
    [454,       y,          28,         89,          -14, -58, ANIM]
    [494,       y,          113,        71,          -60, -30, ANIM]
    [620,       y,          138,        48,          -50, -29, ANIM]
    [762,       y,          113,        71,          -6, -23, ANIM]
}


    spriteset(munkegrund_freighter_ss_not_loaded_not_moving_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(10)
    }
    spriteset(munkegrund_freighter_ss_not_loaded_moving_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(110)
    }
    spriteset(munkegrund_freighter_ss_loading_0_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(210)
    }
    spriteset(munkegrund_freighter_ss_loading_1_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(310)
    }
    spriteset(munkegrund_freighter_ss_loading_2_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(410)
    }
    spriteset(munkegrund_freighter_ss_loading_3_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(510)
    }
    spriteset(munkegrund_freighter_ss_loaded_not_moving_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(610)
    }
    spriteset(munkegrund_freighter_ss_loaded_moving_0, "src/graphics/munkegrund_freighter_0.png") {
      spriteset_template_munkegrund_freighter(710)
    }

    spritegroup munkegrund_freighter_sg_moving_0 {
        loaded:  [
            munkegrund_freighter_ss_not_loaded_moving_0,
            munkegrund_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            munkegrund_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup munkegrund_freighter_sg_not_moving_0 {
        loaded:  [
            munkegrund_freighter_ss_not_loaded_not_moving_0,
            munkegrund_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            munkegrund_freighter_ss_loading_0_0,
            munkegrund_freighter_ss_loading_1_0,
            munkegrund_freighter_ss_loading_2_0,
            munkegrund_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_graphics_0, current_speed) {
        0: return munkegrund_freighter_sg_not_moving_0;
        return munkegrund_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_graphics_random_0) {
        
            1: return munkegrund_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_graphics, build_year) {
    
        0..5000000:munkegrund_freighter_switch_graphics_random_0;
    
    return munkegrund_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_munkegrund_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 115, 22, -57, -10, ANIM]
}

spriteset(munkegrund_freighter_ss_purchase, "src/graphics/munkegrund_freighter_0.png") {
  spriteset_template_purchase_munkegrund_freighter()
}

spritegroup munkegrund_freighter_sg_purchase {
    loaded:  [
        munkegrund_freighter_ss_purchase,
    ];
    loading: [
        munkegrund_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: munkegrund_freighter_switch_speed_varies_with_load_amount_0;
    1: munkegrund_freighter_switch_speed_varies_with_load_amount_1;
    2: munkegrund_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 980;
}
switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    munkegrund_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, munkegrund_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 980;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, munkegrund_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 10, 0, 24), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, munkegrund_freighter, 1145) {
    property {
        name:                           string(STR_NAME_munkegrund_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1978,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 980;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    69;
        running_cost_factor:            177;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          munkegrund_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 munkegrund_freighter_switch_purchase_speed;
        cargo_capacity:                 munkegrund_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        munkegrund_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             munkegrund_freighter_switch_cargo_subtype_text;
        default:                        munkegrund_freighter_switch_graphics;
        purchase:                       munkegrund_freighter_sg_purchase;
        create_effect:                  munkegrund_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, munkegrund_freighter, 1145) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Munkegrund [Freighter] -- 


// -- begin Grindavik [Reefer] -- 


// graphics
template spriteset_template_grindavik_reefer(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -45, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(grindavik_reefer_ss_not_loaded_not_moving_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(10)
    }
    spriteset(grindavik_reefer_ss_not_loaded_moving_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(110)
    }
    spriteset(grindavik_reefer_ss_loading_0_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(210)
    }
    spriteset(grindavik_reefer_ss_loading_1_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(310)
    }
    spriteset(grindavik_reefer_ss_loading_2_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(410)
    }
    spriteset(grindavik_reefer_ss_loading_3_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(510)
    }
    spriteset(grindavik_reefer_ss_loaded_not_moving_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(610)
    }
    spriteset(grindavik_reefer_ss_loaded_moving_0, "src/graphics/grindavik_reefer_0.png") {
      spriteset_template_grindavik_reefer(710)
    }

    spritegroup grindavik_reefer_sg_moving_0 {
        loaded:  [
            grindavik_reefer_ss_not_loaded_moving_0,
            grindavik_reefer_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            grindavik_reefer_ss_loaded_moving_0,
        ];
    }

    spritegroup grindavik_reefer_sg_not_moving_0 {
        loaded:  [
            grindavik_reefer_ss_not_loaded_not_moving_0,
            grindavik_reefer_ss_loaded_not_moving_0,
        ];
        loading: [
            grindavik_reefer_ss_loading_0_0,
            grindavik_reefer_ss_loading_1_0,
            grindavik_reefer_ss_loading_2_0,
            grindavik_reefer_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_graphics_0, current_speed) {
        0: return grindavik_reefer_sg_not_moving_0;
        return grindavik_reefer_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_graphics_random_0) {
        
            1: return grindavik_reefer_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_graphics, build_year) {
    
        0..5000000:grindavik_reefer_switch_graphics_random_0;
    
    return grindavik_reefer_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_grindavik_reefer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(grindavik_reefer_ss_purchase, "src/graphics/grindavik_reefer_0.png") {
  spriteset_template_purchase_grindavik_reefer()
}

spritegroup grindavik_reefer_sg_purchase {
    loaded:  [
        grindavik_reefer_ss_purchase,
    ];
    loading: [
        grindavik_reefer_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: grindavik_reefer_switch_speed_varies_with_load_amount_0;
    1: grindavik_reefer_switch_speed_varies_with_load_amount_1;
    2: grindavik_reefer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_cargo_capacity, cargo_subtype) {
    0: return 250;
    1: return 500;
    2: return 1000;
    return 250;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 250, string(STR_UNIT_TONNES));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 500, string(STR_UNIT_TONNES));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 1000, string(STR_UNIT_TONNES));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, grindavik_reefer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 250;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, grindavik_reefer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 2, 0, 29), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, grindavik_reefer, 1220) {
    property {
        name:                           string(STR_NAME_grindavik_reefer, string(STR_NAME_SUFFIX_REEFER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1938,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 250;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.6;
        cost_factor:                    83;
        running_cost_factor:            212;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_REFRIGERATED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             GOOD;
        loading_speed:                  20;
        cargo_age_period:               1480;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          grindavik_reefer_switch_speed_varies_with_load_amount;
        purchase_speed:                 grindavik_reefer_switch_purchase_speed;
        cargo_capacity:                 grindavik_reefer_switch_cargo_capacity;
        purchase_cargo_capacity:        grindavik_reefer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_REEFER), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,250,500,1000,string(STR_QUANTITY_FOOD)));
        cargo_subtype_text:             grindavik_reefer_switch_cargo_subtype_text;
        default:                        grindavik_reefer_switch_graphics;
        purchase:                       grindavik_reefer_sg_purchase;
        create_effect:                  grindavik_reefer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, grindavik_reefer, 1220) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Grindavik [Reefer] -- 


// -- begin Winterhold [Container Reefer] -- 


// graphics
template spriteset_template_winterhold_container_reefer(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y,                       flags]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}

spriteset(winterhold_container_reefer_ss_empty_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(10)
}
spriteset(winterhold_container_reefer_ss_empty_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(110)
}
spriteset(winterhold_container_reefer_ss_loading_0_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(210)
}
spriteset(winterhold_container_reefer_ss_loaded_1_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(310)
}
spriteset(winterhold_container_reefer_ss_loaded_1_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(410)
}
spriteset(winterhold_container_reefer_ss_loaded_2_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(510)
}
spriteset(winterhold_container_reefer_ss_loaded_2_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(610)
}
spriteset(winterhold_container_reefer_ss_loaded_3_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(710)
}
spriteset(winterhold_container_reefer_ss_loaded_3_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(810)
}
spriteset(winterhold_container_reefer_ss_loaded_4_not_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(910)
}
spriteset(winterhold_container_reefer_ss_loaded_4_moving, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_winterhold_container_reefer(1010)
}

spritegroup winterhold_container_reefer_sg_moving {
    loaded:  [
        winterhold_container_reefer_ss_empty_moving,
        winterhold_container_reefer_ss_loaded_1_moving,
        winterhold_container_reefer_ss_loaded_2_moving,
        winterhold_container_reefer_ss_loaded_3_moving,
        winterhold_container_reefer_ss_loaded_4_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        winterhold_container_reefer_ss_empty_moving,
    ];
}

spritegroup winterhold_container_reefer_sg_not_moving {
    loaded:  [
        winterhold_container_reefer_ss_empty_not_moving,
        winterhold_container_reefer_ss_loaded_1_not_moving,
        winterhold_container_reefer_ss_loaded_2_not_moving,
        winterhold_container_reefer_ss_loaded_3_not_moving,
        winterhold_container_reefer_ss_loaded_4_not_moving,
    ];
    loading: [
        winterhold_container_reefer_ss_loading_0_not_moving,
        winterhold_container_reefer_ss_loaded_1_not_moving,
        winterhold_container_reefer_ss_loaded_2_not_moving,
        winterhold_container_reefer_ss_loaded_3_not_moving,
        winterhold_container_reefer_ss_loaded_4_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_graphics, current_speed) {
    0: return winterhold_container_reefer_sg_not_moving;
    return winterhold_container_reefer_sg_moving;
}

// buy menu graphics

template spriteset_template_purchase_winterhold_container_reefer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(winterhold_container_reefer_ss_purchase, "src/graphics/winterhold_container_reefer_0.png") {
  spriteset_template_purchase_winterhold_container_reefer()
}

spritegroup winterhold_container_reefer_sg_purchase {
    loaded:  [
        winterhold_container_reefer_ss_purchase,
    ];
    loading: [
        winterhold_container_reefer_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: winterhold_container_reefer_switch_speed_varies_with_load_amount_0;
    1: winterhold_container_reefer_switch_speed_varies_with_load_amount_1;
    2: winterhold_container_reefer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_cargo_capacity, cargo_subtype) {
    0: return 400;
    1: return 800;
    2: return 1600;
    return 400;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 400, string(STR_UNIT_TONNES));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 800, string(STR_UNIT_TONNES));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 1600, string(STR_UNIT_TONNES));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, winterhold_container_reefer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 400;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, winterhold_container_reefer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, 2, 26), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, -2, 26), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, winterhold_container_reefer, 1222) {
    property {
        name:                           string(STR_NAME_winterhold_container_reefer, string(STR_NAME_SUFFIX_CONTAINER_REEFER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1990,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 400;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.6;
        cost_factor:                    99;
        running_cost_factor:            232;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_REFRIGERATED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             GOOD;
        loading_speed:                  35;
        cargo_age_period:               1480;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          winterhold_container_reefer_switch_speed_varies_with_load_amount;
        purchase_speed:                 winterhold_container_reefer_switch_purchase_speed;
        cargo_capacity:                 winterhold_container_reefer_switch_cargo_capacity;
        purchase_cargo_capacity:        winterhold_container_reefer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_REEFER), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,400,800,1600,string(STR_QUANTITY_FOOD)));
        cargo_subtype_text:             winterhold_container_reefer_switch_cargo_subtype_text;
        default:                        winterhold_container_reefer_switch_graphics;
        purchase:                       winterhold_container_reefer_sg_purchase;
        create_effect:                  winterhold_container_reefer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, winterhold_container_reefer, 1222) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Winterhold [Container Reefer] -- 


// -- begin Huanghai LNG [Tanker] -- 


// graphics
template spriteset_template_huanghai_lng_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(huanghai_lng_tanker_ss_not_loaded_not_moving, "src/graphics/huanghai_lng_tanker_0.png") {
  spriteset_template_huanghai_lng_tanker(10)
}
spriteset(huanghai_lng_tanker_ss_not_loaded_moving, "src/graphics/huanghai_lng_tanker_0.png") {
  spriteset_template_huanghai_lng_tanker(110)
}
spriteset(huanghai_lng_tanker_ss_loaded_not_moving, "src/graphics/huanghai_lng_tanker_0.png") {
  spriteset_template_huanghai_lng_tanker(210)
}
spriteset(huanghai_lng_tanker_ss_loaded_moving, "src/graphics/huanghai_lng_tanker_0.png") {
  spriteset_template_huanghai_lng_tanker(310)
}

spritegroup huanghai_lng_tanker_sg_moving {
    loaded:  [
        huanghai_lng_tanker_ss_not_loaded_moving,
        huanghai_lng_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        huanghai_lng_tanker_ss_loaded_moving,
    ];
}

spritegroup huanghai_lng_tanker_sg_not_moving {
    loaded:  [
        huanghai_lng_tanker_ss_not_loaded_not_moving,
        huanghai_lng_tanker_ss_loaded_not_moving,
    ];
    loading: [
        huanghai_lng_tanker_ss_not_loaded_not_moving,
        huanghai_lng_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_graphics, current_speed) {
    0: return huanghai_lng_tanker_sg_not_moving;
    return huanghai_lng_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_huanghai_lng_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(huanghai_lng_tanker_ss_purchase, "src/graphics/huanghai_lng_tanker_0.png") {
  spriteset_template_purchase_huanghai_lng_tanker()
}

spritegroup huanghai_lng_tanker_sg_purchase {
    loaded:  [
        huanghai_lng_tanker_ss_purchase,
    ];
    loading: [
        huanghai_lng_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: huanghai_lng_tanker_switch_speed_varies_with_load_amount_0;
    1: huanghai_lng_tanker_switch_speed_varies_with_load_amount_1;
    2: huanghai_lng_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 1920;
}
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    huanghai_lng_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 1920;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, huanghai_lng_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 27), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, huanghai_lng_tanker, 1275) {
    property {
        name:                           string(STR_NAME_huanghai_lng_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1982,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 1920;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    140;
        running_cost_factor:            255;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          huanghai_lng_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 huanghai_lng_tanker_switch_purchase_speed;
        cargo_capacity:                 huanghai_lng_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        huanghai_lng_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             huanghai_lng_tanker_switch_cargo_subtype_text;
        default:                        huanghai_lng_tanker_switch_graphics;
        purchase:                       huanghai_lng_tanker_sg_purchase;
        create_effect:                  huanghai_lng_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, huanghai_lng_tanker, 1275) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Huanghai LNG [Tanker] -- 


// -- begin Matsushima [Hydrofoil] -- 


// graphics

template spriteset_template_matsushima_hydrofoil(y, y_offs_adjust) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -54 + y_offs_adjust, ANIM]
    [60,        y,          113,        66,          -57, -26 + y_offs_adjust, ANIM]
    [186,       y,          138,        48,          -35, -29 + y_offs_adjust, ANIM]
    [328,       y,          113,        66,          -19, -32 + y_offs_adjust, ANIM]
    [454,       y,          28,         89,          -14, -54 + y_offs_adjust, ANIM]
    [494,       y,          113,        66,          -58, -32 + y_offs_adjust, ANIM]
    [620,       y,          138,        48,          -42, -29 + y_offs_adjust, ANIM]
    [762,       y,          113,        66,          -1, -26 + y_offs_adjust, ANIM]
}

spriteset(matsushima_hydrofoil_ss_speed_1, "src/graphics/matsushima_hydrofoil_0.png") {
  spriteset_template_matsushima_hydrofoil(10, 0)
}
spriteset(matsushima_hydrofoil_ss_speed_2, "src/graphics/matsushima_hydrofoil_0.png") {
  spriteset_template_matsushima_hydrofoil(110, -1)
}
spriteset(matsushima_hydrofoil_ss_speed_3, "src/graphics/matsushima_hydrofoil_0.png") {
  spriteset_template_matsushima_hydrofoil(210, -2)
}
spriteset(matsushima_hydrofoil_ss_speed_4, "src/graphics/matsushima_hydrofoil_0.png") {
  spriteset_template_matsushima_hydrofoil(310, -3)
}

switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_graphics, current_speed) {
    0: return matsushima_hydrofoil_ss_speed_1;
    1..7: matsushima_hydrofoil_ss_speed_2;
    8..15: matsushima_hydrofoil_ss_speed_3;
    return matsushima_hydrofoil_ss_speed_4;
}

// buy menu graphics

template spriteset_template_purchase_matsushima_hydrofoil() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [624, 28, 67, 22, -33, -10]
}

spriteset(matsushima_hydrofoil_ss_purchase, "src/graphics/matsushima_hydrofoil_0.png") {
  spriteset_template_purchase_matsushima_hydrofoil()
}

spritegroup matsushima_hydrofoil_sg_purchase {
    loaded:  [
        matsushima_hydrofoil_ss_purchase,
    ];
    loading: [
        matsushima_hydrofoil_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 121;
        1..25 : 121;
        26..50 : 121;
        51..75 : 121;
        76..100 : 121;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 180;
        1..25 : 180;
        26..50 : 180;
        51..75 : 180;
        76..100 : 180;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 239;
        1..25 : 239;
        26..50 : 239;
        51..75 : 239;
        76..100 : 239;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: matsushima_hydrofoil_switch_speed_varies_with_load_amount_0;
    1: matsushima_hydrofoil_switch_speed_varies_with_load_amount_1;
    2: matsushima_hydrofoil_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_purchase_speed, param_adjust_ship_speed) {
    0: 121;
    1: 180;
    2: 239;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 240;
    bitmask(CC_MAIL): return 60;
    return 0;
}
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_cargo_capacity, cargo_type_in_veh) {
    
    matsushima_hydrofoil_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 240;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, matsushima_hydrofoil_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, matsushima_hydrofoil, 70) {
    property {
        name:                           string(STR_NAME_matsushima_hydrofoil, string(STR_NAME_SUFFIX_HYDROFOIL));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1978,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 240;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          56.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    44;
        running_cost_factor:            73;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  18;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          matsushima_hydrofoil_switch_speed_varies_with_load_amount;
        purchase_speed:                 matsushima_hydrofoil_switch_purchase_speed;
        cargo_capacity:                 matsushima_hydrofoil_switch_cargo_capacity;
        purchase_cargo_capacity:        matsushima_hydrofoil_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_HYDROFOIL_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,60,0));
        cargo_subtype_text:             matsushima_hydrofoil_switch_cargo_subtype_text;
        default:                        matsushima_hydrofoil_switch_graphics;
        purchase:                       matsushima_hydrofoil_sg_purchase;
        create_effect:                  matsushima_hydrofoil_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, matsushima_hydrofoil, 70) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Matsushima [Hydrofoil] -- 


// -- begin Taurus [Freighter] -- 


// graphics
template spriteset_template_taurus_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -15, -38, ANIM]
    [60,        y,          113,        71,          -79, -21, ANIM]
    [186,       y,          138,        48,          -66, -25, ANIM]
    [328,       y,          113,        71,          -38, -22, ANIM]
    [454,       y,          28,         89,          -14, -36, ANIM]
    [494,       y,          113,        71,          -78, -22, ANIM]
    [620,       y,          138,        48,          -68, -25, ANIM]
    [762,       y,          113,        71,          -38, -20, ANIM]
}


    spriteset(taurus_freighter_ss_not_loaded_not_moving_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(10)
    }
    spriteset(taurus_freighter_ss_not_loaded_moving_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(110)
    }
    spriteset(taurus_freighter_ss_loading_0_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(210)
    }
    spriteset(taurus_freighter_ss_loading_1_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(310)
    }
    spriteset(taurus_freighter_ss_loading_2_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(410)
    }
    spriteset(taurus_freighter_ss_loading_3_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(510)
    }
    spriteset(taurus_freighter_ss_loaded_not_moving_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(610)
    }
    spriteset(taurus_freighter_ss_loaded_moving_0, "src/graphics/taurus_freighter_0.png") {
      spriteset_template_taurus_freighter(710)
    }

    spritegroup taurus_freighter_sg_moving_0 {
        loaded:  [
            taurus_freighter_ss_not_loaded_moving_0,
            taurus_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            taurus_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup taurus_freighter_sg_not_moving_0 {
        loaded:  [
            taurus_freighter_ss_not_loaded_not_moving_0,
            taurus_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            taurus_freighter_ss_loading_0_0,
            taurus_freighter_ss_loading_1_0,
            taurus_freighter_ss_loading_2_0,
            taurus_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, taurus_freighter_switch_graphics_0, current_speed) {
        0: return taurus_freighter_sg_not_moving_0;
        return taurus_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, taurus_freighter_switch_graphics_random_0) {
        
            1: return taurus_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, taurus_freighter_switch_graphics, build_year) {
    
        0..5000000:taurus_freighter_switch_graphics_random_0;
    
    return taurus_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_taurus_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [646, 25, 94, 22, -47, -10, ANIM]
}

spriteset(taurus_freighter_ss_purchase, "src/graphics/taurus_freighter_0.png") {
  spriteset_template_purchase_taurus_freighter()
}

spritegroup taurus_freighter_sg_purchase {
    loaded:  [
        taurus_freighter_ss_purchase,
    ];
    loading: [
        taurus_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, taurus_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 55;
        1..25 : 54;
        26..50 : 52;
        51..75 : 51;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, taurus_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 81;
        1..25 : 80;
        26..50 : 78;
        51..75 : 76;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, taurus_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 108;
        1..25 : 106;
        26..50 : 103;
        51..75 : 101;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, taurus_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: taurus_freighter_switch_speed_varies_with_load_amount_0;
    1: taurus_freighter_switch_speed_varies_with_load_amount_1;
    2: taurus_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, taurus_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, taurus_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 420;
}
switch (FEAT_SHIPS, SELF, taurus_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    taurus_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, taurus_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, taurus_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 420;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, taurus_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 28), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, taurus_freighter, 1132) {
    property {
        name:                           string(STR_NAME_taurus_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1932,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 420;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    30;
        running_cost_factor:            60;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          taurus_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 taurus_freighter_switch_purchase_speed;
        cargo_capacity:                 taurus_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        taurus_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             taurus_freighter_switch_cargo_subtype_text;
        default:                        taurus_freighter_switch_graphics;
        purchase:                       taurus_freighter_sg_purchase;
        create_effect:                  taurus_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, taurus_freighter, 1132) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Taurus [Freighter] -- 


// -- begin Frisco Bay [Freighter] -- 


// graphics
template spriteset_template_frisco_bay_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -45, ANIM]
    [60,        y,          113,        71,          -70, -26, ANIM]
    [186,       y,          138,        48,          -57, -28, ANIM]
    [328,       y,          113,        71,          -17, -25, ANIM]
    [454,       y,          28,         89,          -14, -47, ANIM]
    [494,       y,          113,        71,          -69, -25, ANIM]
    [620,       y,          138,        48,          -57, -28, ANIM]
    [762,       y,          113,        71,          -12, -26, ANIM]
}


    spriteset(frisco_bay_freighter_ss_not_loaded_not_moving_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(10)
    }
    spriteset(frisco_bay_freighter_ss_not_loaded_moving_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(110)
    }
    spriteset(frisco_bay_freighter_ss_loading_0_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(210)
    }
    spriteset(frisco_bay_freighter_ss_loading_1_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(310)
    }
    spriteset(frisco_bay_freighter_ss_loading_2_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(410)
    }
    spriteset(frisco_bay_freighter_ss_loading_3_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(510)
    }
    spriteset(frisco_bay_freighter_ss_loaded_not_moving_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(610)
    }
    spriteset(frisco_bay_freighter_ss_loaded_moving_0, "src/graphics/frisco_bay_freighter_0.png") {
      spriteset_template_frisco_bay_freighter(710)
    }

    spritegroup frisco_bay_freighter_sg_moving_0 {
        loaded:  [
            frisco_bay_freighter_ss_not_loaded_moving_0,
            frisco_bay_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            frisco_bay_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup frisco_bay_freighter_sg_not_moving_0 {
        loaded:  [
            frisco_bay_freighter_ss_not_loaded_not_moving_0,
            frisco_bay_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            frisco_bay_freighter_ss_loading_0_0,
            frisco_bay_freighter_ss_loading_1_0,
            frisco_bay_freighter_ss_loading_2_0,
            frisco_bay_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_graphics_0, current_speed) {
        0: return frisco_bay_freighter_sg_not_moving_0;
        return frisco_bay_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_graphics_random_0) {
        
            1: return frisco_bay_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_graphics, build_year) {
    
        0..5000000:frisco_bay_freighter_switch_graphics_random_0;
    
    return frisco_bay_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_frisco_bay_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 119, 22, -59, -10, ANIM]
}

spriteset(frisco_bay_freighter_ss_purchase, "src/graphics/frisco_bay_freighter_0.png") {
  spriteset_template_purchase_frisco_bay_freighter()
}

spritegroup frisco_bay_freighter_sg_purchase {
    loaded:  [
        frisco_bay_freighter_ss_purchase,
    ];
    loading: [
        frisco_bay_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: frisco_bay_freighter_switch_speed_varies_with_load_amount_0;
    1: frisco_bay_freighter_switch_speed_varies_with_load_amount_1;
    2: frisco_bay_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 810;
}
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    frisco_bay_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 810;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, frisco_bay_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 0, 0, 29), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, frisco_bay_freighter, 1120) {
    property {
        name:                           string(STR_NAME_frisco_bay_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1875,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 810;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    62;
        running_cost_factor:            134;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          frisco_bay_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 frisco_bay_freighter_switch_purchase_speed;
        cargo_capacity:                 frisco_bay_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        frisco_bay_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             frisco_bay_freighter_switch_cargo_subtype_text;
        default:                        frisco_bay_freighter_switch_graphics;
        purchase:                       frisco_bay_freighter_sg_purchase;
        create_effect:                  frisco_bay_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, frisco_bay_freighter, 1120) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Frisco Bay [Freighter] -- 


// -- begin Maspalomas [Freighter] -- 


// graphics
template spriteset_template_maspalomas_freighter(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -45, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(maspalomas_freighter_ss_not_loaded_not_moving_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(10)
    }
    spriteset(maspalomas_freighter_ss_not_loaded_moving_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(110)
    }
    spriteset(maspalomas_freighter_ss_loading_0_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(210)
    }
    spriteset(maspalomas_freighter_ss_loading_1_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(310)
    }
    spriteset(maspalomas_freighter_ss_loading_2_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(410)
    }
    spriteset(maspalomas_freighter_ss_loading_3_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(510)
    }
    spriteset(maspalomas_freighter_ss_loaded_not_moving_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(610)
    }
    spriteset(maspalomas_freighter_ss_loaded_moving_0, "src/graphics/maspalomas_freighter_0.png") {
      spriteset_template_maspalomas_freighter(710)
    }

    spritegroup maspalomas_freighter_sg_moving_0 {
        loaded:  [
            maspalomas_freighter_ss_not_loaded_moving_0,
            maspalomas_freighter_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            maspalomas_freighter_ss_loaded_moving_0,
        ];
    }

    spritegroup maspalomas_freighter_sg_not_moving_0 {
        loaded:  [
            maspalomas_freighter_ss_not_loaded_not_moving_0,
            maspalomas_freighter_ss_loaded_not_moving_0,
        ];
        loading: [
            maspalomas_freighter_ss_loading_0_0,
            maspalomas_freighter_ss_loading_1_0,
            maspalomas_freighter_ss_loading_2_0,
            maspalomas_freighter_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_graphics_0, current_speed) {
        0: return maspalomas_freighter_sg_not_moving_0;
        return maspalomas_freighter_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_graphics_random_0) {
        
            1: return maspalomas_freighter_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_graphics, build_year) {
    
        0..5000000:maspalomas_freighter_switch_graphics_random_0;
    
    return maspalomas_freighter_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_maspalomas_freighter() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(maspalomas_freighter_ss_purchase, "src/graphics/maspalomas_freighter_0.png") {
  spriteset_template_purchase_maspalomas_freighter()
}

spritegroup maspalomas_freighter_sg_purchase {
    loaded:  [
        maspalomas_freighter_ss_purchase,
    ];
    loading: [
        maspalomas_freighter_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: maspalomas_freighter_switch_speed_varies_with_load_amount_0;
    1: maspalomas_freighter_switch_speed_varies_with_load_amount_1;
    2: maspalomas_freighter_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 2160;
}
switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_cargo_capacity, cargo_type_in_veh) {
    
    maspalomas_freighter_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, maspalomas_freighter_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 2160;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, maspalomas_freighter_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 29), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, maspalomas_freighter, 1150) {
    property {
        name:                           string(STR_NAME_maspalomas_freighter, string(STR_NAME_SUFFIX_FREIGHTER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1988,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 2160;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    100;
        running_cost_factor:            255;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          maspalomas_freighter_switch_speed_varies_with_load_amount;
        purchase_speed:                 maspalomas_freighter_switch_purchase_speed;
        cargo_capacity:                 maspalomas_freighter_switch_cargo_capacity;
        purchase_cargo_capacity:        maspalomas_freighter_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             maspalomas_freighter_switch_cargo_subtype_text;
        default:                        maspalomas_freighter_switch_graphics;
        purchase:                       maspalomas_freighter_sg_purchase;
        create_effect:                  maspalomas_freighter_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, maspalomas_freighter, 1150) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Maspalomas [Freighter] -- 


// -- begin Roland [Tanker] -- 


// graphics
template spriteset_template_roland_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        66,          -68, -26, ANIM]
    [186,       y,          138,        48,          -55, -30, ANIM]
    [328,       y,          113,        66,          -16, -26, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        66,          -66, -27, ANIM]
    [620,       y,          138,        48,          -55, -30, ANIM]
    [762,       y,          113,        66,          -14, -26, ANIM]
}

spriteset(roland_tanker_ss_not_loaded_not_moving, "src/graphics/roland_tanker_0.png") {
  spriteset_template_roland_tanker(10)
}
spriteset(roland_tanker_ss_not_loaded_moving, "src/graphics/roland_tanker_0.png") {
  spriteset_template_roland_tanker(110)
}
spriteset(roland_tanker_ss_loaded_not_moving, "src/graphics/roland_tanker_0.png") {
  spriteset_template_roland_tanker(210)
}
spriteset(roland_tanker_ss_loaded_moving, "src/graphics/roland_tanker_0.png") {
  spriteset_template_roland_tanker(310)
}

spritegroup roland_tanker_sg_moving {
    loaded:  [
        roland_tanker_ss_not_loaded_moving,
        roland_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        roland_tanker_ss_loaded_moving,
    ];
}

spritegroup roland_tanker_sg_not_moving {
    loaded:  [
        roland_tanker_ss_not_loaded_not_moving,
        roland_tanker_ss_loaded_not_moving,
    ];
    loading: [
        roland_tanker_ss_not_loaded_not_moving,
        roland_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, roland_tanker_switch_graphics, current_speed) {
    0: return roland_tanker_sg_not_moving;
    return roland_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_roland_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 115, 22, -57, -10]
}

spriteset(roland_tanker_ss_purchase, "src/graphics/roland_tanker_0.png") {
  spriteset_template_purchase_roland_tanker()
}

spritegroup roland_tanker_sg_purchase {
    loaded:  [
        roland_tanker_ss_purchase,
    ];
    loading: [
        roland_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, roland_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 48;
        1..25 : 47;
        26..50 : 46;
        51..75 : 44;
        76..100 : 43;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, roland_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 69;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, roland_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 94;
        1..25 : 92;
        26..50 : 90;
        51..75 : 88;
        76..100 : 86;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, roland_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: roland_tanker_switch_speed_varies_with_load_amount_0;
    1: roland_tanker_switch_speed_varies_with_load_amount_1;
    2: roland_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, roland_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 43;
    1: 65;
    2: 86;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, roland_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 675;
}
switch (FEAT_SHIPS, SELF, roland_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    roland_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, roland_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, roland_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 675;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, roland_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 12, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, roland_tanker, 1255) {
    property {
        name:                           string(STR_NAME_roland_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1908,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 675;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          20.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    64;
        running_cost_factor:            151;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          roland_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 roland_tanker_switch_purchase_speed;
        cargo_capacity:                 roland_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        roland_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_COASTAL_TANKER), string(STR_EMPTY));
        cargo_subtype_text:             roland_tanker_switch_cargo_subtype_text;
        default:                        roland_tanker_switch_graphics;
        purchase:                       roland_tanker_sg_purchase;
        create_effect:                  roland_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, roland_tanker, 1255) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Roland [Tanker] -- 




// -- begin Rosario [Ferry] -- 


// graphics

    template spriteset_template_rosario_vehicle_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -54, ANIM]
        [60,        y,          113,        66,          -61, -28, ANIM]
        [186,       y,          138,        48,          -36, -29, ANIM]
        [328,       y,          113,        66,          -10, -28, ANIM]
        [454,       y,          28,   89,          -14, -54, ANIM]
        [494,       y,          113,        66,          -55, -26, ANIM]
        [620,       y,          138,        48,          -36, -29, ANIM]
        [762,       y,          113,        66,          0, -24, ANIM]
    }



    spriteset(rosario_vehicle_ferry_ss_not_loaded_not_moving_0, "src/graphics/rosario_vehicle_ferry_0.png") {
      spriteset_template_rosario_vehicle_ferry(10)
    }
    spriteset(rosario_vehicle_ferry_ss_not_loaded_moving_0, "src/graphics/rosario_vehicle_ferry_0.png") {
      spriteset_template_rosario_vehicle_ferry(110)
    }
    spriteset(rosario_vehicle_ferry_ss_loaded_not_moving_0, "src/graphics/rosario_vehicle_ferry_0.png") {
      spriteset_template_rosario_vehicle_ferry(510)
    }
    spriteset(rosario_vehicle_ferry_ss_loaded_moving_0, "src/graphics/rosario_vehicle_ferry_0.png") {
      spriteset_template_rosario_vehicle_ferry(610)
    }

    spritegroup rosario_vehicle_ferry_sg_moving_0 {
        loaded:  [
            rosario_vehicle_ferry_ss_not_loaded_moving_0,
            rosario_vehicle_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            rosario_vehicle_ferry_ss_not_loaded_moving_0,
            rosario_vehicle_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup rosario_vehicle_ferry_sg_not_moving_0 {
        loaded:  [
            rosario_vehicle_ferry_ss_not_loaded_not_moving_0,
            rosario_vehicle_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            rosario_vehicle_ferry_ss_not_loaded_not_moving_0,
            rosario_vehicle_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_graphics_0, current_speed) {
        0: return rosario_vehicle_ferry_sg_not_moving_0;
        return rosario_vehicle_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_graphics_random_0) {
        
            1: return rosario_vehicle_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_graphics, build_year) {
    
        0..5000000:rosario_vehicle_ferry_switch_graphics_random_0;
    
    return rosario_vehicle_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_rosario_vehicle_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [622, 28, 89, 22, -44, -10, ANIM]
}

spriteset(rosario_vehicle_ferry_ss_purchase, "src/graphics/rosario_vehicle_ferry_0.png") {
  spriteset_template_purchase_rosario_vehicle_ferry()
}

spritegroup rosario_vehicle_ferry_sg_purchase {
    loaded:  [
        rosario_vehicle_ferry_ss_purchase,
    ];
    loading: [
        rosario_vehicle_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 50;
        1..25 : 50;
        26..50 : 50;
        51..75 : 50;
        76..100 : 50;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 74;
        1..25 : 74;
        26..50 : 74;
        51..75 : 74;
        76..100 : 74;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 98;
        1..25 : 98;
        26..50 : 98;
        51..75 : 98;
        76..100 : 98;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: rosario_vehicle_ferry_switch_speed_varies_with_load_amount_0;
    1: rosario_vehicle_ferry_switch_speed_varies_with_load_amount_1;
    2: rosario_vehicle_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 50;
    1: 74;
    2: 98;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 450;
    bitmask(CC_MAIL): return 450;
    return 280;
}
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    rosario_vehicle_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 450;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, rosario_vehicle_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, rosario_vehicle_ferry, 50) {
    property {
        name:                           string(STR_NAME_rosario_vehicle_ferry, string(STR_NAME_SUFFIX_FERRY));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1937,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 450;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          23.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    27;
        running_cost_factor:            76;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  35;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          rosario_vehicle_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 rosario_vehicle_ferry_switch_purchase_speed;
        cargo_capacity:                 rosario_vehicle_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        rosario_vehicle_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_VEHICLE_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,450,280));
        cargo_subtype_text:             rosario_vehicle_ferry_switch_cargo_subtype_text;
        default:                        rosario_vehicle_ferry_switch_graphics;
        purchase:                       rosario_vehicle_ferry_sg_purchase;
        create_effect:                  rosario_vehicle_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, rosario_vehicle_ferry, 50) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Rosario [Ferry] -- 




// -- begin Enoshima [Catamaran] -- 


// graphics

    template spriteset_template_enoshima_catamaran_ferry(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -54, ANIM]
        [60,        y,          113,        66,          -57, -26, ANIM]
        [186,       y,          138,        48,          -35, -29, ANIM]
        [328,       y,          113,        66,          -19, -32, ANIM]
        [454,       y,          28,   89,          -14, -54, ANIM]
        [494,       y,          113,        66,          -58, -32, ANIM]
        [620,       y,          138,        48,          -42, -29, ANIM]
        [762,       y,          113,        66,          -1, -26, ANIM]
    }



    spriteset(enoshima_catamaran_ferry_ss_not_loaded_not_moving_0, "src/graphics/enoshima_catamaran_ferry_0.png") {
      spriteset_template_enoshima_catamaran_ferry(10)
    }
    spriteset(enoshima_catamaran_ferry_ss_not_loaded_moving_0, "src/graphics/enoshima_catamaran_ferry_0.png") {
      spriteset_template_enoshima_catamaran_ferry(110)
    }
    spriteset(enoshima_catamaran_ferry_ss_loaded_not_moving_0, "src/graphics/enoshima_catamaran_ferry_0.png") {
      spriteset_template_enoshima_catamaran_ferry(510)
    }
    spriteset(enoshima_catamaran_ferry_ss_loaded_moving_0, "src/graphics/enoshima_catamaran_ferry_0.png") {
      spriteset_template_enoshima_catamaran_ferry(610)
    }

    spritegroup enoshima_catamaran_ferry_sg_moving_0 {
        loaded:  [
            enoshima_catamaran_ferry_ss_not_loaded_moving_0,
            enoshima_catamaran_ferry_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            enoshima_catamaran_ferry_ss_not_loaded_moving_0,
            enoshima_catamaran_ferry_ss_loaded_moving_0,
        ];
    }

    spritegroup enoshima_catamaran_ferry_sg_not_moving_0 {
        loaded:  [
            enoshima_catamaran_ferry_ss_not_loaded_not_moving_0,
            enoshima_catamaran_ferry_ss_loaded_not_moving_0,
        ];
        loading: [
            enoshima_catamaran_ferry_ss_not_loaded_not_moving_0,
            enoshima_catamaran_ferry_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_graphics_0, current_speed) {
        0: return enoshima_catamaran_ferry_sg_not_moving_0;
        return enoshima_catamaran_ferry_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_graphics_random_0) {
        
            1: return enoshima_catamaran_ferry_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_graphics, build_year) {
    
        0..5000000:enoshima_catamaran_ferry_switch_graphics_random_0;
    
    return enoshima_catamaran_ferry_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_enoshima_catamaran_ferry() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [624, 28, 67, 22, -33, -10, ANIM]
}

spriteset(enoshima_catamaran_ferry_ss_purchase, "src/graphics/enoshima_catamaran_ferry_0.png") {
  spriteset_template_purchase_enoshima_catamaran_ferry()
}

spritegroup enoshima_catamaran_ferry_sg_purchase {
    loaded:  [
        enoshima_catamaran_ferry_ss_purchase,
    ];
    loading: [
        enoshima_catamaran_ferry_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 108;
        1..25 : 108;
        26..50 : 108;
        51..75 : 108;
        76..100 : 108;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 161;
        1..25 : 161;
        26..50 : 161;
        51..75 : 161;
        76..100 : 161;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 213;
        1..25 : 213;
        26..50 : 213;
        51..75 : 213;
        76..100 : 213;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_0;
    1: enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_1;
    2: enoshima_catamaran_ferry_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_purchase_speed, param_adjust_ship_speed) {
    0: 108;
    1: 161;
    2: 213;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 260;
    bitmask(CC_MAIL): return 220;
    return 175;
}
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_cargo_capacity, cargo_type_in_veh) {
    
    enoshima_catamaran_ferry_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 260;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, enoshima_catamaran_ferry_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, enoshima_catamaran_ferry, 90) {
    property {
        name:                           string(STR_NAME_enoshima_catamaran_ferry, string(STR_NAME_SUFFIX_CATAMARAN));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1997,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 260;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          50.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    63;
        running_cost_factor:            117;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          enoshima_catamaran_ferry_switch_speed_varies_with_load_amount;
        purchase_speed:                 enoshima_catamaran_ferry_switch_purchase_speed;
        cargo_capacity:                 enoshima_catamaran_ferry_switch_cargo_capacity;
        purchase_cargo_capacity:        enoshima_catamaran_ferry_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CATAMARAN_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,220,175));
        cargo_subtype_text:             enoshima_catamaran_ferry_switch_cargo_subtype_text;
        default:                        enoshima_catamaran_ferry_switch_graphics;
        purchase:                       enoshima_catamaran_ferry_sg_purchase;
        create_effect:                  enoshima_catamaran_ferry_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, enoshima_catamaran_ferry, 90) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Enoshima [Catamaran] -- 




// -- begin Wellfleet [Trawler] -- 


// graphics

    template spriteset_template_wellfleet_trawler(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(wellfleet_trawler_ss_not_loaded_not_moving_0, "src/graphics/wellfleet_trawler_0.png") {
      spriteset_template_wellfleet_trawler(10)
    }
    spriteset(wellfleet_trawler_ss_not_loaded_moving_0, "src/graphics/wellfleet_trawler_0.png") {
      spriteset_template_wellfleet_trawler(110)
    }
    spriteset(wellfleet_trawler_ss_loaded_not_moving_0, "src/graphics/wellfleet_trawler_0.png") {
      spriteset_template_wellfleet_trawler(510)
    }
    spriteset(wellfleet_trawler_ss_loaded_moving_0, "src/graphics/wellfleet_trawler_0.png") {
      spriteset_template_wellfleet_trawler(610)
    }

    spritegroup wellfleet_trawler_sg_moving_0 {
        loaded:  [
            wellfleet_trawler_ss_not_loaded_moving_0,
            wellfleet_trawler_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            wellfleet_trawler_ss_not_loaded_moving_0,
            wellfleet_trawler_ss_loaded_moving_0,
        ];
    }

    spritegroup wellfleet_trawler_sg_not_moving_0 {
        loaded:  [
            wellfleet_trawler_ss_not_loaded_not_moving_0,
            wellfleet_trawler_ss_loaded_not_moving_0,
        ];
        loading: [
            wellfleet_trawler_ss_not_loaded_not_moving_0,
            wellfleet_trawler_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_graphics_0, current_speed) {
        0: return wellfleet_trawler_sg_not_moving_0;
        return wellfleet_trawler_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_graphics_random_0) {
        
            1: return wellfleet_trawler_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_graphics, build_year) {
    
        0..5000000:wellfleet_trawler_switch_graphics_random_0;
    
    return wellfleet_trawler_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_wellfleet_trawler() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [669, 21, 40, 22, -20, -10, ANIM]
}

spriteset(wellfleet_trawler_ss_purchase, "src/graphics/wellfleet_trawler_0.png") {
  spriteset_template_purchase_wellfleet_trawler()
}

spritegroup wellfleet_trawler_sg_purchase {
    loaded:  [
        wellfleet_trawler_ss_purchase,
    ];
    loading: [
        wellfleet_trawler_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 45;
        1..25 : 43;
        26..50 : 42;
        51..75 : 41;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 67;
        1..25 : 65;
        26..50 : 62;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 89;
        1..25 : 86;
        26..50 : 83;
        51..75 : 80;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: wellfleet_trawler_switch_speed_varies_with_load_amount_0;
    1: wellfleet_trawler_switch_speed_varies_with_load_amount_1;
    2: wellfleet_trawler_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 18;
    bitmask(CC_MAIL): return 32;
    return 24;
}
switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_cargo_capacity, cargo_type_in_veh) {
    FISH: return 46;
    wellfleet_trawler_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, wellfleet_trawler_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
        FISH: return 46;
        PASS: return 18;
    
    return 46;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, wellfleet_trawler_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 14), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, wellfleet_trawler, 1200) {
    property {
        name:                           string(STR_NAME_wellfleet_trawler, string(STR_NAME_SUFFIX_TRAWLER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_DIESEL;
        introduction_date:              date(1860,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 46;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    5;
        running_cost_factor:            14;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FISH,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [];
        default_cargo_type:             FISH;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          wellfleet_trawler_switch_speed_varies_with_load_amount;
        purchase_speed:                 wellfleet_trawler_switch_purchase_speed;
        cargo_capacity:                 wellfleet_trawler_switch_cargo_capacity;
        purchase_cargo_capacity:        wellfleet_trawler_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_TRAWLER), string(STR_BUY_MENU_REFIT_CAPACITIES_TRAWLER,18,32,46,24));
        cargo_subtype_text:             wellfleet_trawler_switch_cargo_subtype_text;
        default:                        wellfleet_trawler_switch_graphics;
        purchase:                       wellfleet_trawler_sg_purchase;
        create_effect:                  wellfleet_trawler_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, wellfleet_trawler, 1200) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Wellfleet [Trawler] -- 




// -- begin Lampwick [Steamer] -- 


// graphics

    template spriteset_template_lampwick_steamer(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -84, -22, ANIM]
        [186,       y,          138,        48,          -69, -29, ANIM]
        [328,       y,          113,        66,          -31, -20, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -75, -23, ANIM]
        [620,       y,          138,        48,          -70, -29, ANIM]
        [762,       y,          113,        66,          -10, -18, ANIM]
    }



    spriteset(lampwick_steamer_ss_not_loaded_not_moving_0, "src/graphics/lampwick_steamer_0.png") {
      spriteset_template_lampwick_steamer(10)
    }
    spriteset(lampwick_steamer_ss_not_loaded_moving_0, "src/graphics/lampwick_steamer_0.png") {
      spriteset_template_lampwick_steamer(110)
    }
    spriteset(lampwick_steamer_ss_loaded_not_moving_0, "src/graphics/lampwick_steamer_0.png") {
      spriteset_template_lampwick_steamer(510)
    }
    spriteset(lampwick_steamer_ss_loaded_moving_0, "src/graphics/lampwick_steamer_0.png") {
      spriteset_template_lampwick_steamer(610)
    }

    spritegroup lampwick_steamer_sg_moving_0 {
        loaded:  [
            lampwick_steamer_ss_not_loaded_moving_0,
            lampwick_steamer_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            lampwick_steamer_ss_not_loaded_moving_0,
            lampwick_steamer_ss_loaded_moving_0,
        ];
    }

    spritegroup lampwick_steamer_sg_not_moving_0 {
        loaded:  [
            lampwick_steamer_ss_not_loaded_not_moving_0,
            lampwick_steamer_ss_loaded_not_moving_0,
        ];
        loading: [
            lampwick_steamer_ss_not_loaded_not_moving_0,
            lampwick_steamer_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_graphics_0, current_speed) {
        0: return lampwick_steamer_sg_not_moving_0;
        return lampwick_steamer_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_graphics_random_0) {
        
            1: return lampwick_steamer_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_graphics, build_year) {
    
        0..5000000:lampwick_steamer_switch_graphics_random_0;
    
    return lampwick_steamer_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_lampwick_steamer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [645, 28, 94, 22, -47, -10, ANIM]
}

spriteset(lampwick_steamer_ss_purchase, "src/graphics/lampwick_steamer_0.png") {
  spriteset_template_purchase_lampwick_steamer()
}

spritegroup lampwick_steamer_sg_purchase {
    loaded:  [
        lampwick_steamer_ss_purchase,
    ];
    loading: [
        lampwick_steamer_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 61;
        1..25 : 61;
        26..50 : 61;
        51..75 : 61;
        76..100 : 61;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 90;
        1..25 : 90;
        26..50 : 90;
        51..75 : 90;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 120;
        1..25 : 120;
        26..50 : 120;
        51..75 : 120;
        76..100 : 120;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: lampwick_steamer_switch_speed_varies_with_load_amount_0;
    1: lampwick_steamer_switch_speed_varies_with_load_amount_1;
    2: lampwick_steamer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 61;
    1: 90;
    2: 120;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 250;
    bitmask(CC_MAIL): return 480;
    return 180;
}
switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_cargo_capacity, cargo_type_in_veh) {
    
    lampwick_steamer_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, lampwick_steamer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 250;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, lampwick_steamer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 1, 0, 30), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, lampwick_steamer, 1030) {
    property {
        name:                           string(STR_NAME_lampwick_steamer, string(STR_NAME_SUFFIX_STEAMER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1900,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 250;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          28.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    36;
        running_cost_factor:            72;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          lampwick_steamer_switch_speed_varies_with_load_amount;
        purchase_speed:                 lampwick_steamer_switch_purchase_speed;
        cargo_capacity:                 lampwick_steamer_switch_cargo_capacity;
        purchase_cargo_capacity:        lampwick_steamer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_FAST_PACKET_STEAMER), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,480,180));
        cargo_subtype_text:             lampwick_steamer_switch_cargo_subtype_text;
        default:                        lampwick_steamer_switch_graphics;
        purchase:                       lampwick_steamer_sg_purchase;
        create_effect:                  lampwick_steamer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, lampwick_steamer, 1030) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Lampwick [Steamer] -- 


// -- begin La Orchilla [Tanker] -- 


// graphics
template spriteset_template_la_orchilla_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        66,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        66,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        66,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        66,          -20, -22, ANIM]
}

spriteset(la_orchilla_tanker_ss_not_loaded_not_moving, "src/graphics/la_orchilla_tanker_0.png") {
  spriteset_template_la_orchilla_tanker(10)
}
spriteset(la_orchilla_tanker_ss_not_loaded_moving, "src/graphics/la_orchilla_tanker_0.png") {
  spriteset_template_la_orchilla_tanker(110)
}
spriteset(la_orchilla_tanker_ss_loaded_not_moving, "src/graphics/la_orchilla_tanker_0.png") {
  spriteset_template_la_orchilla_tanker(210)
}
spriteset(la_orchilla_tanker_ss_loaded_moving, "src/graphics/la_orchilla_tanker_0.png") {
  spriteset_template_la_orchilla_tanker(310)
}

spritegroup la_orchilla_tanker_sg_moving {
    loaded:  [
        la_orchilla_tanker_ss_not_loaded_moving,
        la_orchilla_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        la_orchilla_tanker_ss_loaded_moving,
    ];
}

spritegroup la_orchilla_tanker_sg_not_moving {
    loaded:  [
        la_orchilla_tanker_ss_not_loaded_not_moving,
        la_orchilla_tanker_ss_loaded_not_moving,
    ];
    loading: [
        la_orchilla_tanker_ss_not_loaded_not_moving,
        la_orchilla_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_graphics, current_speed) {
    0: return la_orchilla_tanker_sg_not_moving;
    return la_orchilla_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_la_orchilla_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10]
}

spriteset(la_orchilla_tanker_ss_purchase, "src/graphics/la_orchilla_tanker_0.png") {
  spriteset_template_purchase_la_orchilla_tanker()
}

spritegroup la_orchilla_tanker_sg_purchase {
    loaded:  [
        la_orchilla_tanker_ss_purchase,
    ];
    loading: [
        la_orchilla_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 62;
        1..25 : 60;
        26..50 : 59;
        51..75 : 58;
        76..100 : 56;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 92;
        1..25 : 90;
        26..50 : 88;
        51..75 : 86;
        76..100 : 84;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 122;
        1..25 : 119;
        26..50 : 117;
        51..75 : 114;
        76..100 : 111;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: la_orchilla_tanker_switch_speed_varies_with_load_amount_0;
    1: la_orchilla_tanker_switch_speed_varies_with_load_amount_1;
    2: la_orchilla_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 56;
    1: 84;
    2: 111;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 920;
}
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    la_orchilla_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 920;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, la_orchilla_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_AIRCRAFT_BREAKDOWN_SMOKE, 16, 0, 26), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, la_orchilla_tanker, 1270) {
    property {
        name:                           string(STR_NAME_la_orchilla_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1968,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 920;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          26.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    75;
        running_cost_factor:            178;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          la_orchilla_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 la_orchilla_tanker_switch_purchase_speed;
        cargo_capacity:                 la_orchilla_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        la_orchilla_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_LARGE_COASTER), string(STR_EMPTY));
        cargo_subtype_text:             la_orchilla_tanker_switch_cargo_subtype_text;
        default:                        la_orchilla_tanker_switch_graphics;
        purchase:                       la_orchilla_tanker_sg_purchase;
        create_effect:                  la_orchilla_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, la_orchilla_tanker, 1270) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end La Orchilla [Tanker] -- 


// -- begin Provence Edibles [Tanker] -- 


// graphics
template spriteset_template_provence_edibles_tanker(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        66,          -80, -24, ANIM]
    [186,       y,          138,        48,          -66, -21, ANIM]
    [328,       y,          113,        66,          -33, -25, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        66,          -78, -26, ANIM]
    [620,       y,          138,        48,          -66, -21, ANIM]
    [762,       y,          113,        66,          -32, -23, ANIM]
}

spriteset(provence_edibles_tanker_ss_not_loaded_not_moving, "src/graphics/provence_edibles_tanker_0.png") {
  spriteset_template_provence_edibles_tanker(10)
}
spriteset(provence_edibles_tanker_ss_not_loaded_moving, "src/graphics/provence_edibles_tanker_0.png") {
  spriteset_template_provence_edibles_tanker(110)
}
spriteset(provence_edibles_tanker_ss_loaded_not_moving, "src/graphics/provence_edibles_tanker_0.png") {
  spriteset_template_provence_edibles_tanker(210)
}
spriteset(provence_edibles_tanker_ss_loaded_moving, "src/graphics/provence_edibles_tanker_0.png") {
  spriteset_template_provence_edibles_tanker(310)
}

spritegroup provence_edibles_tanker_sg_moving {
    loaded:  [
        provence_edibles_tanker_ss_not_loaded_moving,
        provence_edibles_tanker_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        provence_edibles_tanker_ss_loaded_moving,
    ];
}

spritegroup provence_edibles_tanker_sg_not_moving {
    loaded:  [
        provence_edibles_tanker_ss_not_loaded_not_moving,
        provence_edibles_tanker_ss_loaded_not_moving,
    ];
    loading: [
        provence_edibles_tanker_ss_not_loaded_not_moving,
        provence_edibles_tanker_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_graphics, current_speed) {
    0: return provence_edibles_tanker_sg_not_moving;
    return provence_edibles_tanker_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_provence_edibles_tanker() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [649, 21, 78, 22, -39, -10]
}

spriteset(provence_edibles_tanker_ss_purchase, "src/graphics/provence_edibles_tanker_0.png") {
  spriteset_template_purchase_provence_edibles_tanker()
}

spritegroup provence_edibles_tanker_sg_purchase {
    loaded:  [
        provence_edibles_tanker_ss_purchase,
    ];
    loading: [
        provence_edibles_tanker_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: provence_edibles_tanker_switch_speed_varies_with_load_amount_0;
    1: provence_edibles_tanker_switch_speed_varies_with_load_amount_1;
    2: provence_edibles_tanker_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 300;
}
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_cargo_capacity, cargo_type_in_veh) {
    
    provence_edibles_tanker_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 300;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, provence_edibles_tanker_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 8, 0, 18), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, provence_edibles_tanker, 1280) {
    property {
        name:                           string(STR_NAME_provence_edibles_tanker, string(STR_NAME_SUFFIX_TANKER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1955,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 300;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    30;
        running_cost_factor:            74;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [RFPR,OIL_,FMSP,PETR];
        default_cargo_type:             WATR;
        loading_speed:                  40;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          provence_edibles_tanker_switch_speed_varies_with_load_amount;
        purchase_speed:                 provence_edibles_tanker_switch_purchase_speed;
        cargo_capacity:                 provence_edibles_tanker_switch_cargo_capacity;
        purchase_cargo_capacity:        provence_edibles_tanker_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_COASTAL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             provence_edibles_tanker_switch_cargo_subtype_text;
        default:                        provence_edibles_tanker_switch_graphics;
        purchase:                       provence_edibles_tanker_sg_purchase;
        create_effect:                  provence_edibles_tanker_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, provence_edibles_tanker, 1280) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Provence Edibles [Tanker] -- 




// -- begin Island Trader [Blank] -- 


// graphics

    template spriteset_template_island_trader(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -84, -22, ANIM]
        [186,       y,          138,        48,          -69, -29, ANIM]
        [328,       y,          113,        66,          -31, -20, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -75, -23, ANIM]
        [620,       y,          138,        48,          -70, -29, ANIM]
        [762,       y,          113,        66,          -10, -18, ANIM]
    }



    spriteset(island_trader_ss_not_loaded_not_moving_0, "src/graphics/island_trader_0.png") {
      spriteset_template_island_trader(10)
    }
    spriteset(island_trader_ss_not_loaded_moving_0, "src/graphics/island_trader_0.png") {
      spriteset_template_island_trader(110)
    }
    spriteset(island_trader_ss_loaded_not_moving_0, "src/graphics/island_trader_0.png") {
      spriteset_template_island_trader(510)
    }
    spriteset(island_trader_ss_loaded_moving_0, "src/graphics/island_trader_0.png") {
      spriteset_template_island_trader(610)
    }

    spritegroup island_trader_sg_moving_0 {
        loaded:  [
            island_trader_ss_not_loaded_moving_0,
            island_trader_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            island_trader_ss_not_loaded_moving_0,
            island_trader_ss_loaded_moving_0,
        ];
    }

    spritegroup island_trader_sg_not_moving_0 {
        loaded:  [
            island_trader_ss_not_loaded_not_moving_0,
            island_trader_ss_loaded_not_moving_0,
        ];
        loading: [
            island_trader_ss_not_loaded_not_moving_0,
            island_trader_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, island_trader_switch_graphics_0, current_speed) {
        0: return island_trader_sg_not_moving_0;
        return island_trader_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, island_trader_switch_graphics_random_0) {
        
            1: return island_trader_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, island_trader_switch_graphics, build_year) {
    
        0..5000000:island_trader_switch_graphics_random_0;
    
    return island_trader_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_island_trader() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [630, 28, 104, 22, -52, -10, ANIM]
}

spriteset(island_trader_ss_purchase, "src/graphics/island_trader_0.png") {
  spriteset_template_purchase_island_trader()
}

spritegroup island_trader_sg_purchase {
    loaded:  [
        island_trader_ss_purchase,
    ];
    loading: [
        island_trader_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, island_trader_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 65;
        1..25 : 65;
        26..50 : 65;
        51..75 : 65;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, island_trader_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 97;
        1..25 : 97;
        26..50 : 97;
        51..75 : 97;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, island_trader_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 128;
        1..25 : 128;
        26..50 : 128;
        51..75 : 128;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, island_trader_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: island_trader_switch_speed_varies_with_load_amount_0;
    1: island_trader_switch_speed_varies_with_load_amount_1;
    2: island_trader_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, island_trader_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, island_trader_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 360;
    bitmask(CC_MAIL): return 720;
    return 240;
}
switch (FEAT_SHIPS, SELF, island_trader_switch_cargo_capacity, cargo_type_in_veh) {
    
    island_trader_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, island_trader_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, island_trader_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 360;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, island_trader_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 5, 0, 27), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, island_trader, 1031) {
    property {
        name:                           string(STR_NAME_island_trader, string(STR_NAME_SUFFIX_BLANK));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1930,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 360;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    39;
        running_cost_factor:            108;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   21; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   25;
    }
    graphics {
        speed:                          island_trader_switch_speed_varies_with_load_amount;
        purchase_speed:                 island_trader_switch_purchase_speed;
        cargo_capacity:                 island_trader_switch_cargo_capacity;
        purchase_cargo_capacity:        island_trader_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_FAST_PACKET_STEAMER), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,720,240));
        cargo_subtype_text:             island_trader_switch_cargo_subtype_text;
        default:                        island_trader_switch_graphics;
        purchase:                       island_trader_sg_purchase;
        create_effect:                  island_trader_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, island_trader, 1031) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Island Trader [Blank] -- 


// -- begin Freshney [Tanker Barge] -- 


// graphics
template spriteset_template_freshney_tanker_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -40, ANIM]
    [60,        y,          113,        66,          -78, -21, ANIM]
    [186,       y,          138,        48,          -68, -21, ANIM]
    [328,       y,          113,        66,          -30, -21, ANIM]
    [454,       y,          28,         89,          -14, -40, ANIM]
    [494,       y,          113,        66,          -78, -24, ANIM]
    [620,       y,          138,        48,          -68, -21, ANIM]
    [762,       y,          113,        66,          -32, -21, ANIM]
}

spriteset(freshney_tanker_barge_ss_not_loaded_not_moving, "src/graphics/freshney_tanker_barge_0.png") {
  spriteset_template_freshney_tanker_barge(10)
}
spriteset(freshney_tanker_barge_ss_not_loaded_moving, "src/graphics/freshney_tanker_barge_0.png") {
  spriteset_template_freshney_tanker_barge(110)
}
spriteset(freshney_tanker_barge_ss_loaded_not_moving, "src/graphics/freshney_tanker_barge_0.png") {
  spriteset_template_freshney_tanker_barge(210)
}
spriteset(freshney_tanker_barge_ss_loaded_moving, "src/graphics/freshney_tanker_barge_0.png") {
  spriteset_template_freshney_tanker_barge(310)
}

spritegroup freshney_tanker_barge_sg_moving {
    loaded:  [
        freshney_tanker_barge_ss_not_loaded_moving,
        freshney_tanker_barge_ss_loaded_moving,
    ];
    loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
        freshney_tanker_barge_ss_loaded_moving,
    ];
}

spritegroup freshney_tanker_barge_sg_not_moving {
    loaded:  [
        freshney_tanker_barge_ss_not_loaded_not_moving,
        freshney_tanker_barge_ss_loaded_not_moving,
    ];
    loading: [
        freshney_tanker_barge_ss_not_loaded_not_moving,
        freshney_tanker_barge_ss_loaded_not_moving,
    ];
}

switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_graphics, current_speed) {
    0: return freshney_tanker_barge_sg_not_moving;
    return freshney_tanker_barge_sg_moving;
}


// buy menu graphics

template spriteset_template_purchase_freshney_tanker_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [667, 21, 44, 22, -22, -10]
}

spriteset(freshney_tanker_barge_ss_purchase, "src/graphics/freshney_tanker_barge_0.png") {
  spriteset_template_purchase_freshney_tanker_barge()
}

spritegroup freshney_tanker_barge_sg_purchase {
    loaded:  [
        freshney_tanker_barge_ss_purchase,
    ];
    loading: [
        freshney_tanker_barge_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: freshney_tanker_barge_switch_speed_varies_with_load_amount_0;
    1: freshney_tanker_barge_switch_speed_varies_with_load_amount_1;
    2: freshney_tanker_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 90;
}
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    freshney_tanker_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 90;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, freshney_tanker_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 6, 0, 8), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, freshney_tanker_barge, 2248) {
    property {
        name:                           string(STR_NAME_freshney_tanker_barge, string(STR_NAME_SUFFIX_TANKER_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_DIESEL;
        introduction_date:              date(1870,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 90;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    4;
        running_cost_factor:            22;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [MILK,WATR,BEER,FOOD];
        default_cargo_type:             OIL_;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          freshney_tanker_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 freshney_tanker_barge_switch_purchase_speed;
        cargo_capacity:                 freshney_tanker_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        freshney_tanker_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_SMALL_TANKER_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             freshney_tanker_barge_switch_cargo_subtype_text;
        default:                        freshney_tanker_barge_switch_graphics;
        purchase:                       freshney_tanker_barge_sg_purchase;
        create_effect:                  freshney_tanker_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, freshney_tanker_barge, 2248) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Freshney [Tanker Barge] -- 


// -- begin Helsinki [Reefer] -- 


// graphics
template spriteset_template_helsinki_reefer(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -41, ANIM]
    [60,        y,          113,        71,          -74, -22, ANIM]
    [186,       y,          138,        48,          -65, -29, ANIM]
    [328,       y,          113,        71,          -21, -22, ANIM]
    [454,       y,          28,         89,          -14, -50, ANIM]
    [494,       y,          113,        71,          -75, -22, ANIM]
    [620,       y,          138,        48,          -65, -29, ANIM]
    [762,       y,          113,        71,          -20, -22, ANIM]
}


    spriteset(helsinki_reefer_ss_not_loaded_not_moving_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(10)
    }
    spriteset(helsinki_reefer_ss_not_loaded_moving_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(110)
    }
    spriteset(helsinki_reefer_ss_loading_0_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(210)
    }
    spriteset(helsinki_reefer_ss_loading_1_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(310)
    }
    spriteset(helsinki_reefer_ss_loading_2_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(410)
    }
    spriteset(helsinki_reefer_ss_loading_3_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(510)
    }
    spriteset(helsinki_reefer_ss_loaded_not_moving_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(610)
    }
    spriteset(helsinki_reefer_ss_loaded_moving_0, "src/graphics/helsinki_reefer_0.png") {
      spriteset_template_helsinki_reefer(710)
    }

    spritegroup helsinki_reefer_sg_moving_0 {
        loaded:  [
            helsinki_reefer_ss_not_loaded_moving_0,
            helsinki_reefer_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            helsinki_reefer_ss_loaded_moving_0,
        ];
    }

    spritegroup helsinki_reefer_sg_not_moving_0 {
        loaded:  [
            helsinki_reefer_ss_not_loaded_not_moving_0,
            helsinki_reefer_ss_loaded_not_moving_0,
        ];
        loading: [
            helsinki_reefer_ss_loading_0_0,
            helsinki_reefer_ss_loading_1_0,
            helsinki_reefer_ss_loading_2_0,
            helsinki_reefer_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_graphics_0, current_speed) {
        0: return helsinki_reefer_sg_not_moving_0;
        return helsinki_reefer_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_graphics_random_0) {
        
            1: return helsinki_reefer_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_graphics, build_year) {
    
        0..5000000:helsinki_reefer_switch_graphics_random_0;
    
    return helsinki_reefer_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_helsinki_reefer() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 28, 138, 22, -69, -10, ANIM]
}

spriteset(helsinki_reefer_ss_purchase, "src/graphics/helsinki_reefer_0.png") {
  spriteset_template_purchase_helsinki_reefer()
}

spritegroup helsinki_reefer_sg_purchase {
    loaded:  [
        helsinki_reefer_ss_purchase,
    ];
    loading: [
        helsinki_reefer_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 71;
        1..25 : 70;
        26..50 : 68;
        51..75 : 66;
        76..100 : 65;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 106;
        1..25 : 104;
        26..50 : 101;
        51..75 : 99;
        76..100 : 97;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 141;
        1..25 : 138;
        26..50 : 135;
        51..75 : 131;
        76..100 : 128;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: helsinki_reefer_switch_speed_varies_with_load_amount_0;
    1: helsinki_reefer_switch_speed_varies_with_load_amount_1;
    2: helsinki_reefer_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_purchase_speed, param_adjust_ship_speed) {
    0: 65;
    1: 97;
    2: 128;
}


// -- ships that have subtype refits for capacity rely on the capacities_refittable prop //

switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_cargo_capacity, cargo_subtype) {
    0: return 300;
    1: return 600;
    2: return 1200;
    return 300;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_cargo_subtype_text, cargo_subtype) {
    0: return string(STR_GENERIC_REFIT_SUBTYPE, 300, string(STR_UNIT_TONNES));
    1: return string(STR_GENERIC_REFIT_SUBTYPE, 600, string(STR_UNIT_TONNES));
    2: return string(STR_GENERIC_REFIT_SUBTYPE, 1200, string(STR_UNIT_TONNES));
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, helsinki_reefer_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 300;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, helsinki_reefer_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, 2, 23), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 16, -2, 23), 0x101)]) {
    return 2;
}


// -- props -- //
item(FEAT_SHIPS, helsinki_reefer, 1221) {
    property {
        name:                           string(STR_NAME_helsinki_reefer, string(STR_NAME_SUFFIX_REEFER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1963,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 300;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          30.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.6;
        cost_factor:                    90;
        running_cost_factor:            212;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_REFRIGERATED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
        default_cargo_type:             GOOD;
        loading_speed:                  20;
        cargo_age_period:               1480;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   31; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   35;
    }
    graphics {
        speed:                          helsinki_reefer_switch_speed_varies_with_load_amount;
        purchase_speed:                 helsinki_reefer_switch_purchase_speed;
        cargo_capacity:                 helsinki_reefer_switch_cargo_capacity;
        purchase_cargo_capacity:        helsinki_reefer_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_REEFER), string(STR_GENERIC_REFIT_SUBTYPE_BUY_MENU_INFO,300,600,1200,string(STR_QUANTITY_FOOD)));
        cargo_subtype_text:             helsinki_reefer_switch_cargo_subtype_text;
        default:                        helsinki_reefer_switch_graphics;
        purchase:                       helsinki_reefer_sg_purchase;
        create_effect:                  helsinki_reefer_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, helsinki_reefer, 1221) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Helsinki [Reefer] -- 




// -- begin Nanaimo 70 [Hovercraft] -- 


// graphics

    template spriteset_template_nanaimo_70_hovercraft(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          36,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -82, -24, ANIM]
        [186,       y,          138,        48,          -69, -21, ANIM]
        [328,       y,          113,        66,          -29, -24, ANIM]
        [454,       y,          36,   89,          -14, -42, ANIM]
        [494,       y,          113,        66,          -80, -26, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -29, -24, ANIM]
    }



    spriteset(nanaimo_70_hovercraft_ss_not_loaded_not_moving_0, "src/graphics/nanaimo_70_hovercraft_0.png") {
      spriteset_template_nanaimo_70_hovercraft(10)
    }
    spriteset(nanaimo_70_hovercraft_ss_not_loaded_moving_0, "src/graphics/nanaimo_70_hovercraft_0.png") {
      spriteset_template_nanaimo_70_hovercraft(110)
    }
    spriteset(nanaimo_70_hovercraft_ss_loaded_not_moving_0, "src/graphics/nanaimo_70_hovercraft_0.png") {
      spriteset_template_nanaimo_70_hovercraft(510)
    }
    spriteset(nanaimo_70_hovercraft_ss_loaded_moving_0, "src/graphics/nanaimo_70_hovercraft_0.png") {
      spriteset_template_nanaimo_70_hovercraft(610)
    }

    spritegroup nanaimo_70_hovercraft_sg_moving_0 {
        loaded:  [
            nanaimo_70_hovercraft_ss_not_loaded_moving_0,
            nanaimo_70_hovercraft_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            nanaimo_70_hovercraft_ss_not_loaded_moving_0,
            nanaimo_70_hovercraft_ss_loaded_moving_0,
        ];
    }

    spritegroup nanaimo_70_hovercraft_sg_not_moving_0 {
        loaded:  [
            nanaimo_70_hovercraft_ss_not_loaded_not_moving_0,
            nanaimo_70_hovercraft_ss_loaded_not_moving_0,
        ];
        loading: [
            nanaimo_70_hovercraft_ss_not_loaded_not_moving_0,
            nanaimo_70_hovercraft_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_graphics_0, current_speed) {
        0: return nanaimo_70_hovercraft_sg_not_moving_0;
        return nanaimo_70_hovercraft_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_graphics_random_0) {
        
            1: return nanaimo_70_hovercraft_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_graphics, build_year) {
    
        0..5000000:nanaimo_70_hovercraft_switch_graphics_random_0;
    
    return nanaimo_70_hovercraft_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_nanaimo_70_hovercraft() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [668, 21, 52, 22, -26, -10, ANIM]
}

spriteset(nanaimo_70_hovercraft_ss_purchase, "src/graphics/nanaimo_70_hovercraft_0.png") {
  spriteset_template_purchase_nanaimo_70_hovercraft()
}

spritegroup nanaimo_70_hovercraft_sg_purchase {
    loaded:  [
        nanaimo_70_hovercraft_ss_purchase,
    ];
    loading: [
        nanaimo_70_hovercraft_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 151;
        1..25 : 151;
        26..50 : 151;
        51..75 : 151;
        76..100 : 151;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 225;
        1..25 : 225;
        26..50 : 225;
        51..75 : 225;
        76..100 : 225;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 252;
        1..25 : 252;
        26..50 : 252;
        51..75 : 252;
        76..100 : 252;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_0;
    1: nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_1;
    2: nanaimo_70_hovercraft_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_purchase_speed, param_adjust_ship_speed) {
    0: 151;
    1: 225;
    2: 252;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 70;
    bitmask(CC_MAIL): return 30;
    return 25;
}
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_cargo_capacity, cargo_type_in_veh) {
    
    nanaimo_70_hovercraft_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 70;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, nanaimo_70_hovercraft_create_visual_effect, 0) {
    return 0;
}


// -- props -- //
item(FEAT_SHIPS, nanaimo_70_hovercraft, 1050) {
    property {
        name:                           string(STR_NAME_nanaimo_70_hovercraft, string(STR_NAME_SUFFIX_HOVERCRAFT));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_FERRY_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1965,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 70;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          70.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           0.7;
        cost_factor:                    28;
        running_cost_factor:            97;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [FISH];
        default_cargo_type:             PASS;
        loading_speed:                  30;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   41; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   45;
    }
    graphics {
        speed:                          nanaimo_70_hovercraft_switch_speed_varies_with_load_amount;
        purchase_speed:                 nanaimo_70_hovercraft_switch_purchase_speed;
        cargo_capacity:                 nanaimo_70_hovercraft_switch_cargo_capacity;
        purchase_cargo_capacity:        nanaimo_70_hovercraft_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_HOVERCRAFT_FAST_FERRY), string(STR_BUY_MENU_REFIT_CAPACITIES_PACKET,30,25));
        cargo_subtype_text:             nanaimo_70_hovercraft_switch_cargo_subtype_text;
        default:                        nanaimo_70_hovercraft_switch_graphics;
        purchase:                       nanaimo_70_hovercraft_sg_purchase;
        create_effect:                  nanaimo_70_hovercraft_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, nanaimo_70_hovercraft, 1050) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Nanaimo 70 [Hovercraft] -- 


// -- begin Gorky [Freight Barge] -- 


// graphics
template spriteset_template_gorky_freight_barge(y) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [20,        y,          28,         89,          -14, -42, ANIM]
    [60,        y,          113,        71,          -61, -28, ANIM]
    [186,       y,          138,        48,          -55, -29, ANIM]
    [328,       y,          113,        71,          -10, -28, ANIM]
    [454,       y,          28,         89,          -14, -54, ANIM]
    [494,       y,          113,        71,          -61, -28, ANIM]
    [620,       y,          138,        48,          -55, -29, ANIM]
    [762,       y,          113,        71,          -9, -28, ANIM]
}


    spriteset(gorky_freight_barge_ss_not_loaded_not_moving_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(10)
    }
    spriteset(gorky_freight_barge_ss_not_loaded_moving_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(110)
    }
    spriteset(gorky_freight_barge_ss_loading_0_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(210)
    }
    spriteset(gorky_freight_barge_ss_loading_1_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(310)
    }
    spriteset(gorky_freight_barge_ss_loading_2_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(410)
    }
    spriteset(gorky_freight_barge_ss_loading_3_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(510)
    }
    spriteset(gorky_freight_barge_ss_loaded_not_moving_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(610)
    }
    spriteset(gorky_freight_barge_ss_loaded_moving_0, "src/graphics/gorky_freight_barge_0.png") {
      spriteset_template_gorky_freight_barge(710)
    }

    spritegroup gorky_freight_barge_sg_moving_0 {
        loaded:  [
            gorky_freight_barge_ss_not_loaded_moving_0,
            gorky_freight_barge_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            gorky_freight_barge_ss_loaded_moving_0,
        ];
    }

    spritegroup gorky_freight_barge_sg_not_moving_0 {
        loaded:  [
            gorky_freight_barge_ss_not_loaded_not_moving_0,
            gorky_freight_barge_ss_loaded_not_moving_0,
        ];
        loading: [
            gorky_freight_barge_ss_loading_0_0,
            gorky_freight_barge_ss_loading_1_0,
            gorky_freight_barge_ss_loading_2_0,
            gorky_freight_barge_ss_loading_3_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_graphics_0, current_speed) {
        0: return gorky_freight_barge_sg_not_moving_0;
        return gorky_freight_barge_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_graphics_random_0) {
        
            1: return gorky_freight_barge_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_graphics, build_year) {
    
        0..5000000:gorky_freight_barge_switch_graphics_random_0;
    
    return gorky_freight_barge_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_gorky_freight_barge() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [620, 25, 109, 22, -54, -10, ANIM]
}

spriteset(gorky_freight_barge_ss_purchase, "src/graphics/gorky_freight_barge_0.png") {
  spriteset_template_purchase_gorky_freight_barge()
}

spritegroup gorky_freight_barge_sg_purchase {
    loaded:  [
        gorky_freight_barge_ss_purchase,
    ];
    loading: [
        gorky_freight_barge_ss_purchase,
    ];
}


// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 43;
        1..25 : 42;
        26..50 : 41;
        51..75 : 40;
        76..100 : 39;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 64;
        1..25 : 62;
        26..50 : 61;
        51..75 : 60;
        76..100 : 58;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 85;
        1..25 : 83;
        26..50 : 81;
        51..75 : 79;
        76..100 : 77;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: gorky_freight_barge_switch_speed_varies_with_load_amount_0;
    1: gorky_freight_barge_switch_speed_varies_with_load_amount_1;
    2: gorky_freight_barge_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_purchase_speed, param_adjust_ship_speed) {
    0: 39;
    1: 58;
    2: 77;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 0;
    bitmask(CC_MAIL): return 0;
    return 500;
}
switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_cargo_capacity, cargo_type_in_veh) {
    
    gorky_freight_barge_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, gorky_freight_barge_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
    return 500;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, gorky_freight_barge_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_STEAM, 12, 0, 19), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, gorky_freight_barge, 2125) {
    property {
        name:                           string(STR_NAME_gorky_freight_barge, string(STR_NAME_SUFFIX_FREIGHT_BARGE));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1870,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 500;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          18.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    22;
        running_cost_factor:            86;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_LIQUID,CC_BULK,CC_EXPRESS,CC_ARMOURED,CC_REFRIGERATED,CC_NON_POURABLE,CC_PIECE_GOODS,CC_COVERED);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
        default_cargo_type:             COAL;
        loading_speed:                  20;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   56; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   60;
    }
    graphics {
        speed:                          gorky_freight_barge_switch_speed_varies_with_load_amount;
        purchase_speed:                 gorky_freight_barge_switch_purchase_speed;
        cargo_capacity:                 gorky_freight_barge_switch_cargo_capacity;
        purchase_cargo_capacity:        gorky_freight_barge_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_CARGO_VESSEL_INLAND), string(STR_EMPTY));
        cargo_subtype_text:             gorky_freight_barge_switch_cargo_subtype_text;
        default:                        gorky_freight_barge_switch_graphics;
        purchase:                       gorky_freight_barge_sg_purchase;
        create_effect:                  gorky_freight_barge_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, gorky_freight_barge, 2125) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Gorky [Freight Barge] -- 




// -- begin Josephine [Trawler] -- 


// graphics

    template spriteset_template_josephine_trawler(y) {
        //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
        [20,        y,          28,   89,          -14, -40, ANIM]
        [60,        y,          113,        66,          -78, -21, ANIM]
        [186,       y,          138,        48,          -68, -21, ANIM]
        [328,       y,          113,        66,          -30, -21, ANIM]
        [454,       y,          28,   89,          -14, -40, ANIM]
        [494,       y,          113,        66,          -78, -24, ANIM]
        [620,       y,          138,        48,          -68, -21, ANIM]
        [762,       y,          113,        66,          -32, -21, ANIM]
    }



    spriteset(josephine_trawler_ss_not_loaded_not_moving_0, "src/graphics/josephine_trawler_0.png") {
      spriteset_template_josephine_trawler(10)
    }
    spriteset(josephine_trawler_ss_not_loaded_moving_0, "src/graphics/josephine_trawler_0.png") {
      spriteset_template_josephine_trawler(110)
    }
    spriteset(josephine_trawler_ss_loaded_not_moving_0, "src/graphics/josephine_trawler_0.png") {
      spriteset_template_josephine_trawler(510)
    }
    spriteset(josephine_trawler_ss_loaded_moving_0, "src/graphics/josephine_trawler_0.png") {
      spriteset_template_josephine_trawler(610)
    }

    spritegroup josephine_trawler_sg_moving_0 {
        loaded:  [
            josephine_trawler_ss_not_loaded_moving_0,
            josephine_trawler_ss_loaded_moving_0,
        ];
        loading: [ // can't be loading when moving, but we'll overlook that, it's required by nml ;)
            josephine_trawler_ss_not_loaded_moving_0,
            josephine_trawler_ss_loaded_moving_0,
        ];
    }

    spritegroup josephine_trawler_sg_not_moving_0 {
        loaded:  [
            josephine_trawler_ss_not_loaded_not_moving_0,
            josephine_trawler_ss_loaded_not_moving_0,
        ];
        loading: [
            josephine_trawler_ss_not_loaded_not_moving_0,
            josephine_trawler_ss_loaded_not_moving_0,
        ];
    }

    switch (FEAT_SHIPS, SELF, josephine_trawler_switch_graphics_0, current_speed) {
        0: return josephine_trawler_sg_not_moving_0;
        return josephine_trawler_sg_moving_0;
    }



    random_switch (FEAT_SHIPS, SELF, josephine_trawler_switch_graphics_random_0) {
        
            1: return josephine_trawler_switch_graphics_0;
        
    }



switch (FEAT_SHIPS, SELF, josephine_trawler_switch_graphics, build_year) {
    
        0..5000000:josephine_trawler_switch_graphics_random_0;
    
    return josephine_trawler_switch_graphics_random_0;
}


// buy menu graphics

template spriteset_template_purchase_josephine_trawler() {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    [663, 21, 51, 22, -25, -10, ANIM]
}

spriteset(josephine_trawler_ss_purchase, "src/graphics/josephine_trawler_0.png") {
  spriteset_template_purchase_josephine_trawler()
}

spritegroup josephine_trawler_sg_purchase {
    loaded:  [
        josephine_trawler_ss_purchase,
    ];
    loading: [
        josephine_trawler_ss_purchase,
    ];
}

// -- set speed a little higher than rated speed when unladen -- //
// -- also apply the param_adjust_ship_speed parameter -- //

    switch (FEAT_SHIPS, SELF, josephine_trawler_switch_speed_varies_with_load_amount_0, cargo_count*100/cargo_capacity) {
        0 : 52;
        1..25 : 51;
        26..50 : 49;
        51..75 : 47;
        76..100 : 46;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, josephine_trawler_switch_speed_varies_with_load_amount_1, cargo_count*100/cargo_capacity) {
        0 : 78;
        1..25 : 75;
        26..50 : 73;
        51..75 : 70;
        76..100 : 68;
        return 0; // should never reach this result, make it show up as a problem
    }

    switch (FEAT_SHIPS, SELF, josephine_trawler_switch_speed_varies_with_load_amount_2, cargo_count*100/cargo_capacity) {
        0 : 103;
        1..25 : 100;
        26..50 : 97;
        51..75 : 93;
        76..100 : 90;
        return 0; // should never reach this result, make it show up as a problem
    }

switch (FEAT_SHIPS, SELF, josephine_trawler_switch_speed_varies_with_load_amount, param_adjust_ship_speed) {
    0: josephine_trawler_switch_speed_varies_with_load_amount_0;
    1: josephine_trawler_switch_speed_varies_with_load_amount_1;
    2: josephine_trawler_switch_speed_varies_with_load_amount_2;
}
switch (FEAT_SHIPS, SELF, josephine_trawler_switch_purchase_speed, param_adjust_ship_speed) {
    0: 46;
    1: 68;
    2: 90;
}


// -- capacity determined according to specific labels that might need to be handled, and otherwise cargo class -- //
switch (FEAT_SHIPS, SELF, josephine_trawler_switch_cargo_capacity_classes, cargo_classes) {
    bitmask(CC_PASSENGERS): return 40;
    bitmask(CC_MAIL): return 66;
    return 44;
}
switch (FEAT_SHIPS, SELF, josephine_trawler_switch_cargo_capacity, cargo_type_in_veh) {
    FISH: return 124;
    josephine_trawler_switch_cargo_capacity_classes;
}

// -- handle subtype strings, used to aid players understand auto-refitting -- //
switch (FEAT_SHIPS, SELF, josephine_trawler_switch_cargo_subtype_text, cargo_subtype) {
    return CB_RESULT_NO_TEXT;
}


// -- some switches are common to all vehicles so included with properties -- //

// -- dibble about with purchase menu capacity to handle various cargo-specific capacity issues (cargo might be missing etc) -- //
switch (FEAT_SHIPS, SELF, josephine_trawler_switch_purchase_cargo_capacity, cargo_type_in_veh) {
    
    
        FISH: return 124;
        PASS: return 40;
    
    return 124;
}

// -- smoke -- //
switch (FEAT_SHIPS, SELF, josephine_trawler_create_visual_effect, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, 0, 0, 16), 0x100)]) {
    return 1;
}


// -- props -- //
item(FEAT_SHIPS, josephine_trawler, 1210) {
    property {
        name:                           string(STR_NAME_josephine_trawler, string(STR_NAME_SUFFIX_TRAWLER));
        climates_available:             NO_CLIMATE; // nml constant
        sound_effect:                   SOUND_SHIP_HORN;
        effect_spawn_model:             EFFECT_SPAWN_MODEL_STEAM;
        introduction_date:              date(1933,01,01); // ship just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 124;
        sprite_id:                      SPRITE_ID_NEW_SHIP; //enable new graphics - nml constant
        speed:                          21.0mph;
        ocean_speed_fraction:           1;
        canal_speed_fraction:           1;
        cost_factor:                    7;
        running_cost_factor:            18;
        refit_cost:                     0; // leave at 0 for refitting without defining cb
        is_refittable:                  1;
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_PASSENGERS,CC_EXPRESS,CC_MAIL);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [BDMT,FISH,FRUT,LVST,VEHI,WATR];
        cargo_disallow_refit:           [];
        default_cargo_type:             FISH;
        loading_speed:                  15;
        cargo_age_period:               740;
        misc_flags:                     bitmask(SHIP_FLAG_2CC, SHIP_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   36; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   40;
    }
    graphics {
        speed:                          josephine_trawler_switch_speed_varies_with_load_amount;
        purchase_speed:                 josephine_trawler_switch_purchase_speed;
        cargo_capacity:                 josephine_trawler_switch_cargo_capacity;
        purchase_cargo_capacity:        josephine_trawler_switch_purchase_cargo_capacity;
        additional_text:                string(STR_BUY_MENU_TEXT, string(STR_TRAWLER), string(STR_BUY_MENU_REFIT_CAPACITIES_TRAWLER,40,66,124,44));
        cargo_subtype_text:             josephine_trawler_switch_cargo_subtype_text;
        default:                        josephine_trawler_switch_graphics;
        purchase:                       josephine_trawler_sg_purchase;
        create_effect:                  josephine_trawler_create_visual_effect;
    }
}

if (param[2]==0) {
    item(FEAT_SHIPS, josephine_trawler, 1210) {
        property {
            climates_available:             ALL_CLIMATES;
        }
    }
}

// -- end Josephine [Trawler] -- 


